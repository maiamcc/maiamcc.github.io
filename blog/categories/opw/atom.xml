<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: opw | Maia McCormick]]></title>
  <link href="http://maiamcc.github.io/blog/categories/opw/atom.xml" rel="self"/>
  <link href="http://maiamcc.github.io/"/>
  <updated>2017-11-22T22:41:39-05:00</updated>
  <id>http://maiamcc.github.io/</id>
  <author>
    <name><![CDATA[Maia Remez McCormick]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OPW Retrospective]]></title>
    <link href="http://maiamcc.github.io/blog/2015/03/09/opw-retrospective/"/>
    <updated>2015-03-09T16:48:33-04:00</updated>
    <id>http://maiamcc.github.io/blog/2015/03/09/opw-retrospective</id>
    <content type="html"><![CDATA[<p>Three months later, I&rsquo;m done with my OPW internship with GNOME Music.</p>

<p>I&rsquo;ve learned that open-source contributing isn&rsquo;t as scary and impossible as it once seemed, and that IRC is full of nice people who are happy to help! But I&rsquo;ve also learned that diving into a new codebase is challenging, at best, and nearly impossible at worst. <code>pdb</code>, <code>for x in dir(foo): print(x)</code>, <code>traceback.print_stack()</code>, and <code>inspect.getargspec(myfunc)</code> have become good friends of mine in the past three months. Good documentation, it turns out, is essential&mdash;the project I was working on had very little, and the libraries it utilized (at least, the Python wrappers for those libraries) were similarly sketchily documented, and all this made learning the code waaaaay tougher than it needed to be.<!--more--></p>

<p>I&rsquo;ve learned how much I benefit from writing things down. I took notes when I was <a href="//www.youtube.com/watch?v=r7N7s1yejFQ&amp;list=PLea0WJq13cnA6k4B6Tr1ljj2nleUl9dZt">learning SPARQL</a>, and color-coded my questions so I could come back to them later. I kept track of all the weird dependency problems I ran into during my build&mdash;which turned out to be way more useful than I&rsquo;d even imagined when I ended up having to JHBuild my program all over again on a different machine. I made a to-do list at the beginning of every work day, with a macro-goal or two and manageable sub-steps that I could check off as I did them, to keep myself on-task and non-overwhelmed. I kept a list of bugs as I ran into them so I didn&rsquo;t get side-tracked&mdash;I could finish the task at hand, then go back and report all the intervening bugs at once. Similarly, I tried my best to jot down any real-world distractions&mdash;like that email I needed to send, that form I needed to mail&hellip;&mdash;so that they were out of my head and on paper, and I could come back to them whenever I was done with work.</p>

<p>I&rsquo;ve learned how important task-setting and accountability is to me. If I don&rsquo;t know <em>what</em> task I&rsquo;m doing at any given time, I have the potential to just mess around in the source code for a good few hours without really getting anything done. Having &ldquo;Bug X: Put Y in the Z&rdquo; written at the top of my notebook, or telling my mentor Vadim, &ldquo;Okay, I&rsquo;m gonna work on foo today,&rdquo; clarified my purpose and kept me from trying to do 5 things at once, or from doing nothing at all.</p>

<p>I&rsquo;ve learned that working from home is <em>hard</em>! I need to be pretty firm with myself to get out of bed in the morning, shower, eat a good breakfast, and sit down to work, instead of lazing around in bed with a book for ages and messing around on Facebook. But for the most part, I managed to stick to the <a href="/blog/2014/12/29/rules-for-opw/">rules I laid out for myself</a> at the beginning of all of this, to great positive effect. (Having codified rules definitely helps!) (Disabling Facebook on my work machine, and <a href="/blog/2015/02/25/the-best-thing-ive-done-for-my-productivity-lately/">disabling my Facebook newsfeed</a> on my personal machine, have both been very good choices as far as my productivity goes.) Having a space that is my <em>work space</em> (my desk, with an external monitor) helps a lot&mdash;if I find myself distracted, I get up, wander away, and take a break, and come back when I can actually think straight.</p>

<p>I&rsquo;ve learned that the toughest part of any project tends to come right at the very beginning: the system set-up is always <a href="/blog/2014/10/22/reflections-on-my-first-open-source-contribution/">stupidly, grossly difficult</a>, and learning a new codebase (as I mentioned above) is <em>hard</em>! For the first month, <a href="/blog/2015/01/10/opw-1-month-in/">I felt like I&rsquo;d hardly accomplished anything</a>&mdash;I could barely write patches because I was still trying to figure out how everything worked.</p>

<p>And of course, I learned a bunch of concrete skills. I know a fair bit (though by no means everything) about how <a href="//git.gnome.org/gnome-music">GNOME Music</a> works, I know about Tracker and <a href="//code.maiamccormick.com/blog/2015/03/04/the-joys-of-sparql/">SPARQL</a>, I know a little something now about open-source workflow, bug reporting, and bugzilla, and I&rsquo;ve acquired some new git-fu by necessity (since I&rsquo;m working on a multi-contributor project, need to make my commits as self-contained as possible, etc.). I&rsquo;m so grateful to the GNOME Foundation and to OPW for this fabulous opportunity, and to <a href="//wiki.gnome.org/VadimRutkovsky">Vadim Rutkovsky</a> for being the most friendly, helpful, and laid-back mentor I could have hoped for!</p>

<p>What&rsquo;s next? At the end of the month, I&rsquo;ll be starting as a software engineer at <a href="//www.shopspring.com/">Spring</a>, a mobile shopping app startup based in NYC. I&rsquo;m beyond psyched to join their team, and to put to use all of the skills I&rsquo;ve gotten from OPW. And I&rsquo;ll certainly stick around GNOME Music/GNOME/the open-source community&mdash;you&rsquo;ll probably see me poking my head into various IRC channels from time to time (nick = <code>maiamcc</code>). If anyone wants to talk about GNOME Music, or OPW, or SPARQL, or anything, really: come say hi!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Joys of SPARQL: An RDF Query Language]]></title>
    <link href="http://maiamcc.github.io/blog/2015/03/04/the-joys-of-sparql/"/>
    <updated>2015-03-04T11:44:36-05:00</updated>
    <id>http://maiamcc.github.io/blog/2015/03/04/the-joys-of-sparql</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been working with SPARQL a bunch for <a href="//git.gnome.org/browse/gnome-music">my OPW project</a>, and found it very slow going at first. SPARQL is apparently one of those little-loved languages that doesn&rsquo;t have much in the way of tutorials or lay-speak-explanations online&mdash;pretty much all I could find were the language&rsquo;s official docs, where were super technical and near-impossible for a beginner to slog through. Hell, I didn&rsquo;t even understand what the language <em>did</em>&mdash;how could I read the technical specs?<!--more--></p>

<p>So, I decided to take a step towards remedying this problem. This post won&rsquo;t actually teach you how to <em>use</em> SPARQL&mdash;others do that better than I, and I provide some links at the bottom of the post&mdash;but it&rsquo;s intended to be a primer on how SPARQL works, and what the data you might use it on looks like. (This is a blog-ified version of a Hacker School Thursday Talk presentation given on 2/5/15.)</p>

<h3>What is SPARQL?</h3>

<p>It&rsquo;s like SQL, but with extra unicorns.
<img src="/images/sparkly_unicorn.gif" alt="Sparkly Unicorn" /></p>

<h3>No really, what is SPARQL?</h3>

<p>Besides a query language with a really ridiculous name?</p>

<p>SPARQL is a (recursive) acronym standing for: <strong>S</strong>PARQL <strong>P</strong>rotocol <strong>a</strong>nd <strong>R</strong>DF <strong>Q</strong>uery <strong>L</strong>anguage.</p>

<p>It&rsquo;s a query language, like SQL, that you use to poke around in your data and find the bits of it that you want. Unlike SQL, which queries tables, SPARQL queries data stored in a different way: a <strong>Resource Description Framework</strong> (or <strong>RDF</strong>).</p>

<h3>What is RDF?</h3>

<p>SQL expects data to be in tables, like this:
<img src="/images/sql_table.png" alt="SQL Table" /></p>

<p>But SPARQL works with data organized like this:
<img src="/images/rdf_web.png" alt="RDF Web" /></p>

<p>A single row in the SQL table is a collection of bits of information about that one entity (in this case, a person); the web below is another way of visualizing that information. Each bit of information is contained in a <em>subject/predicate/object triple</em>.</p>

<h3>Subject/Predicate/Object Triples</h3>

<p><span class="red">SUBJECT</span> &ndash; <span class="green">PREDICATE</span> &ndash; <span class="cyan">OBJECT</span></p>

<p>This convention plays off of English grammar constructs [fn: and probably lots of other languages too, but I don&rsquo;t know enough linguistics to make any sort of comprehensive claim] grammar constructs. In English, we can make a sentence like this:</p>

<p><span class="red">The human</span> &ndash; <span class="green">throws</span> &ndash; <span class="cyan">the ball</span>.</p>

<p><code>The human</code> is the subject, <code>throws</code> is the predicate (verb-like thing), and <code>the ball</code> is the object. Likewise, we can express any cell from a SQL table in the same way:</p>

<p><span class="red">Maia</span> &ndash; <span class="green">has favorite color equal to</span> &ndash; <span class="cyan">rainbow</span>.</p>

<p>Where <code>Maia</code> (the thing we&rsquo;re referring to&mdash;the row in the SQL table representing an entity) is the subject, <code>has favorite color equal to</code> is the predicate (think of this as the property name, or put another way, the column header), and <code>rainbow</code> is the object (the value of that property for the given entity). In diagram form, it would sort of look like this:</p>

<p><img src="/images/colordiagram1.png" alt="RDF in color #1" /></p>

<p>Only, this is not quite accurate. <code>Maia</code> is not its own entity; it&rsquo;s a human-readable identifier (what we mortals call a first name) for some entity stored in your computer. This entity hasFirstName Maia just like it hasFavoriteColor Rainbow. So in reality, the visual representation would look more like this:</p>

<p><img src="/images/colordiagram2.png" alt="RDF in color #2" /></p>

<p><code>&lt;aabbcc&gt;</code>&mdash;the alphanumeric string we give to our entity to represent it and so we can track all of its associated properties and value&mdash;is called a <strong>Uniform Resource Identifier</strong>, or <strong>URI</strong>. (Not to be confused with <strong>Uniform Resource Locators</strong>, or <strong>URLs</strong>. A URL tells you the location of the entity in question, where as the URI is the name the computer has given to our entity; think of a URI as a name and a URL as an address.)</p>

<h3>What Does a Query Look Like, Anyway?</h3>

<p>The first thing to know is that SPARQL objects and properties aren&rsquo;t invented at random. When you&rsquo;re using SPARQL, you work with a predefined set of classes (e.g. <code>contact</code>, <code>email address</code>, etc.) and properties (e.g. <code>hasFirstName</code>, <code>dateAdded</code>, etc.), collectively called an <em>ontology</em>. Generally, systems will use a combination of the standard ontologies floating around the web (GNOME Tracker, for instance uses <a href="//developer.gnome.org/ontology/stable/index.html">this collection of ontologies</a>, someone putting together a contacts list might use <a href="//xmlns.com/foaf/spec/">foaf</a>). I also assume you can make your own, though I&rsquo;ve never experimented with this. Ontologies are identified by a prefix (and if you&rsquo;re writing your own queries from scratch, you&rsquo;ll have to set the prefixes with a link to the ontology on the interwebs)&hellip; The point being, in English, you might get confused between &ldquo;has first name&rdquo; and &ldquo;has name&rdquo; and &ldquo;is named&rdquo; and &ldquo;has given name&rdquo;&hellip; but in SPARQL, there will be only one name for that property (presumably something like <code>foaf:givenName</code>).</p>

<p>Anyway, what does a query look like? It looks something like this:</p>

<pre><code class="SPARQL">SELECT ?a ?b ?c
WHERE {
    ...
}
ORDER BY ?a
LIMIT X
</code></pre>

<p>Basically, you select some stuff (<code>SELECT ?a ?b ?c</code> as specified by the conditions in your <code>WHERE</code> clause&mdash;possibly including some <code>FILTER</code> statements) which you can then do a handful of operations on: ordering by one or more of the values, capping the number of results you want, etc.</p>

<p>But that was (obviously) an extremely sketchy description, and as I warned you, I&rsquo;m not going to go into any more detail in this post. Others have tackled this material better than I&mdash;I learned most of what I knew about SPARQL at the very beginning from <a href="//www.youtube.com/watch?v=r7N7s1yejFQ&amp;list=PLea0WJq13cnA6k4B6Tr1ljj2nleUl9dZt">Dr. Noureddin Sadawi&rsquo;s Simple SPARQL Tutorial</a>, in which he plays around with <a href="//learningsparql.com/2ndeditionexamples/index.html">Bob DuCharme&rsquo;s sample code</a>. Check out their stuff to learn what queries actually look like, and all the cool stuff you can do with them. I hope this has been at least somewhat enlightening; thanks for tuning in!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OPW: 1 Month In]]></title>
    <link href="http://maiamcc.github.io/blog/2015/01/10/opw-1-month-in/"/>
    <updated>2015-01-10T11:01:33-05:00</updated>
    <id>http://maiamcc.github.io/blog/2015/01/10/opw-1-month-in</id>
    <content type="html"><![CDATA[<p>For anyone who doesn&rsquo;t know, this past December I started an internship with <a href="//www.gnome.org/">GNOME</a> as part of OPW, the <a href="//wiki.gnome.org/OutreachProgramForWomen">Outreach Program for Women</a>. The point of this program is to get more women (by which they really mean cis woman <em>and</em> trans folks <em>and</em> genderqueer/genderfluid/agender folks&hellip; so basically, people who aren&rsquo;t cis <strong><a href="//www.mandleco.com/Default.asp">MEN</a></strong>) involved in the FOSS world. In my particular case, it certainly succeeded! I&rsquo;d been meaning to do some open source contributing for a while, but had always been too intimidated and overwhelmed to start.<!--more--> When it came time for OPW applications, however, I <em>had</em> to: had to pick a project, delve into the codebase, and submit a preliminary bugfix for my <em>application</em>. Which, at least for me, was fabulous, because my very application process convinced me that FOSS contribution was something that I could do, and even something that I enjoyed!</p>

<p>So, here I am, one month into my three months of OPW. I&rsquo;ve been working on <a href="//wiki.gnome.org/Apps/Music">GNOME Music</a>, the new music player for GNOME, and specifically on implementing smart playlists (like Most Played, Recently Played, and maybe someday something as ambitious as Favorites).</p>

<p>In some ways, it feels like I&rsquo;ve done remarkably little work in a month. Part of this is because of timing&mdash;I started the internship, worked for a week at the very bottom of the steepest part of the learning curve getting very little done, then went off for a previously scheduled vacation, then holidays happened, then Vadim was away&hellip; so time-wise, the first few weeks were fragmented and disorganized. Also, I had to set up a development environment&mdash;installing Fedora 21, getting all my dependences in order, and getting GNOME Music to build properly&mdash;which is an experience akin to having teeth pulled, without drugs, while lying on a bed of needles and listening to the Numa Numa song on an endless loop. And I had to do that TWICE, because I started out on this adorable little computer lent to me by a friend which had only 1GB of RAM and I wanted to punch myself in the face whenever I tried to do anything, so I tried again on a much newer, nicer, faster machine. This whole dev. env. set-up took WAY more time than I had anticipated.</p>

<p>But also, it&rsquo;s disconcerting to be in the dark all over again, when I&rsquo;d just gotten used to feeling like I knew what was up. I had to learn a whole new (essentially docs- and comment-free) codebase, and a whole new language&mdash;<a href="//en.wikipedia.org/wiki/SPARQL">SPARQL</a>, a query language that&rsquo;s super powerful but for some reason no one has written accessible tutorials or how-to&rsquo;s on the interwebs, so basically my only resource was the incredibly dense, not at all beginner-friendly <a href="//www.w3.org/TR/rdf-sparql-query/">technical specs</a>. Somehow, I didn&rsquo;t quite expect or remember how slowly work goes when you&rsquo;re just starting out, when you&rsquo;re just learning your tools.</p>

<p>However, recently, I&rsquo;ve started writing actual code. I feel like I have a handle (well, more of a handle, anyway) on how this program actually works, how to write in SPARQL, and the tools at my disposal for testing things. (I don&rsquo;t know how I could do any of this, for instance, if I couldn&rsquo;t tool around with querying my database directly from the command line with <code>tracker-sparql --query</code>.)</p>

<p>It&rsquo;s also occurred to me that I&rsquo;ve been blogging remarkably little about this whole experience. Which is odd, because I actually do really enjoy writing blog posts, and generally jump at the opportunity to talk loudly into the internet, even if no one is listening. But somehow OPW feels different&mdash;more serious, more adult, less happy-fun-play-time&mdash;than Hacker School. At Hacker School I kept a blog mostly for myself, as a journal and archive, a sounding board for my own ideas and a check on myself that I actually understood [concept X], which I could tell by whether or not I could coherently explain it to someone else. Now that I&rsquo;m actually doing a Job (okay, Internship) in the Real World, somehow everything seems higher-stakes. I&rsquo;m now reluctant to post those messy &ldquo;why am I failing?&rdquo; blog posts, or get really excited about this cool new thing I learned but everyone else has known for years. I want my posts to demonstrate the Excellent Things I have done, and be insightful and ground-breaking. And I realize that I&rsquo;ve essentially been kicking my own blogging repeatedly in the shins.</p>

<p>So, I&rsquo;m a month into OPW, finally out of holiday madness and ready to settle down into a consistent schedule. I&rsquo;m past the worst of the learning curve and have a pretty decent handle on SPARQL, the architecture of GNOME Music, and what needs to happen next in this project. I&rsquo;m going to revisit my <a href="/blog/2014/12/29/rules-for-opw/">Rules for Myself During OPW</a> so (hopefully) I can successfully work from home without accidentally shutting off my brain and spending the whole day staring at cat pictures because I&rsquo;m too dehydrated to work. I&rsquo;m going to document my code as I go, to make things easier on the next person who has to dive head-first into this codebase. And I&rsquo;m going to blog more, the impressiveness of said blog posts be damned. (Future posts I have in mind: &ldquo;What is SPARQL, Anyway?&rdquo;; &ldquo;How I Chose My First FOSS Project&rdquo;; &ldquo;How to (Start) Figur(ing) Out an Alien Codebase&rdquo;; &ldquo;How Does GNOME Music Work?&rdquo;) And mostly, I&rsquo;m gonna spend the next two months writing some cool code! I encourage you to do the same! (And if you want to contribute to GNOME Music, I am MORE than happy to explain how everything works!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rules for OPW]]></title>
    <link href="http://maiamcc.github.io/blog/2014/12/29/rules-for-opw/"/>
    <updated>2014-12-29T14:29:39-05:00</updated>
    <id>http://maiamcc.github.io/blog/2014/12/29/rules-for-opw</id>
    <content type="html"><![CDATA[<p>Rules and resolutions for myself during OPW:</p>

<ul>
<li>wake up at the same time every day.</li>
<li>eat breakfast every day.</li>
<li>eat lunch. Seriously, eat lunch. <!--more--></li>
<li>drink liquids. Getting dehydrated is an easy to make your brain not work good and takes surprisingly long to register with your conscious mind.</li>
<li>check in with the inimitable Rose Ames via email every day with 1&ndash;3 problem/plan/deliverable result triples, and follow up at the end of the workday to see how well I did. If I don&rsquo;t, she will attack me with angry animals.</li>
<li>have goals for the day, and plans for how to achieve them. Goals shouldn&rsquo;t be vague, like, &ldquo;Learn SPARQL&rdquo;; they should be actionable (&ldquo;deliverable result,&rdquo; above), like, &ldquo;Learn enough SPARQL to understand the queries in <code>query.py</code>, and as proof, give a line-by-line translation of one of the queries into English.&rdquo;</li>
<li>at the end of the day, figure out what I did today, what still needs going, and what I&rsquo;m going to do tomorrow.</li>
<li>take good notes in my notebook: write down things that I need to understand so that I process them better, write down errors I get and fixes I make so I can replicate, write down bugs and questions and future to-do&rsquo;s, write down reflections and noticings about my working style</li>
<li>ask questions on IRC rather than banging my head against a wall</li>
<li>but bang my head against a wall a <em>little</em>, because it builds character, and more often than not I can figure out what&rsquo;s actually going on.</li>
<li>Facebook is BLOCKED on my work computer, and on my personal computer during the workday (with the possible exception of lunch hour and clearly defined breaks). NO FACEBOOK. NONE. Seriously, I am enabling parental controls on my work computer right now.</li>
<li>there are lots of ways to waste time besides Facebook. If I feel myself getting into that zoned-out place where I flip back and forth between tabs pretending I&rsquo;m doing productive stuff but not getting anything done, I will stand up, walk away, get a drink, etc., and figure out what I&rsquo;m going to do when I sit back down at my computer.</li>
<li>switch up work spaces regularly, try to get out of my apartment.</li>
<li>make sure to see people, if just for side-by-side working, lunch breaks, etc.&mdash;I need social interaction in my life, or else I get sad.</li>
<li>this isn&rsquo;t a rule so much as a neat idea that I may try to incorporate into my work routine: (from Pablo Torres, via Maja Frydrychowicz): &ldquo;a trick I learned from @Maja Frydrychowicz is to take a walk at the beginning of the work day in one direction and to take the same walk in the opposite direction when you are done, which is what you do if you commute to an office.&rdquo; Not sure if I&rsquo;ll do exactly this, but getting outside and walking around is definitely important.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflections on my First Open-Source Contribution]]></title>
    <link href="http://maiamcc.github.io/blog/2014/10/22/reflections-on-my-first-open-source-contribution/"/>
    <updated>2014-10-22T15:52:38-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/10/22/reflections-on-my-first-open-source-contribution</id>
    <content type="html"><![CDATA[<p>Having successfully submitted my <a href="//gnome.org/opw/">OPW</a> application, and in the process submitting my first open-source contribution, I have lots of thoughts and feelings.</p>

<h3>Part 1: Setting up the environment</h3>

<p>Setting up your environment is <em>awful</em>. You think, &ldquo;how long can it take to set up a virtual machine and install this software?&rdquo; The answer? <em>Longer than you could ever imagine.</em> Especially if your project is on a platform you&rsquo;re not familiar with, ask for advice early and often&mdash;because inevitably, something will go wrong and you&rsquo;ll need to ask someone wiser for help anyway, and you might as well not a bunch of junk to undo by the time you do. (Like when I tried to install VirtualBox Guest Additions and it destroyed by VM&rsquo;s video driver, and in fact all video drivers on any VMs I later installed. I had to wipe VirtualBox and start over. No fun.)<!--more--></p>

<p>For those curious, my long and arduous process involved several buggy installations of Ubuntu and much wrestling with VirtualBox; eventually installing Fedora 21 on the recommendation of the project mentor. (Fedora 21, incidentally, is still in alpha and thus moderately scary.) I &ldquo;quick&amp;dirty&rdquo; built GNOME Music, the program I intended to work on, and it <em>worked</em>&hellip; sort of. None of my music files would play, and none of the metadata/durations were showing up&mdash;all of them were by Unknown Artist on Unknown Album and had duration 0:00.</p>

<p>Turns out I was missing lots of GStreamer plugins. I installed various plugins, until I quite literally installed <em>all of the GStreamer plugins</em> (<code>sudo yum install gstreamer1-plugins-*</code>, I kid you not), and mp3&rsquo;s would still not play. I eventually figured out what was wrong by taking a step back from the application and attempting to play the file directly from Terminal, with <code>gst-launch-1.0 playbin uri=file:///home/joe/random-media-file.mp3</code>. The error message I got told me I needed a MPEG-1 Layer 3 Decoder, but more importantly, this step reminded me how debugging works. When in doubt, take away as many of the confounding variables as possible&mdash;like for instance, the borked program install&mdash;and see how much you can accomplish in its barest form, ideally from Terminal because then you will likely get useful error messages.</p>

<p>Oh, and another important thing? Making sure you have valid media. When in doubt, always check the validity of the files you&rsquo;re trying to do stuff to&mdash;can save you a lot of time! Like when I got mp3&rsquo;s working but then spent an hour tearing my hair out about the ogg&rsquo;s that weren&rsquo;t working? Turns out they were just somehow messed up because I&rsquo;d converted them from mp3 myself with VLC on my machine. At least, I can only assume that something was funky about those files, because opening <a href="//www.gnu.org/music/FreeSWSong.ogg">an ogg file off the interwebs</a> worked just fine!</p>

<p>So now, the only problem was that GNOME Music wasn&rsquo;t showing me any metadata about the tracks (including their duration). Having learned my lesson, I checked on my input&mdash;did the files actually have metadata? According to <a href="https://wiki.gnome.org/Apps/EasyTAG">EasyTAG</a>, yes they did. Vadim helped me decipher some error message gibberish and concluded that the problem was something with Tracker. In my limited understanding, indexes the files on your machine and stores all of that data in a database&mdash;GNOME Music looks at that database, using SPARQL queries, to get data about the songs. If that database is all messed up, then so is the data (or lack thereof) that GNOME Music shows.</p>

<p>After wrestling with all manner of resets and diagnostics, I ended up resetting to one of my VM snapshots from the beginning of this whole process and just building the thing via <a href="//wiki.gnome.org/HowDoI/Jhbuild">JHBuild</a>. Hit some snags, but ultimately it worked. It was more of a pain than the &ldquo;quick&amp;dirty&rdquo; build would have been, had it actually worked&hellip; but given the amount of pain that the &ldquo;quick&amp;dirty&rdquo; way brought me, JHBuild was <em>infinitely</em> preferable in the end. I don&rsquo;t know what went on in my JHBuild build that mitigated my Tracker problem, but there was something, and it meant that (exactly a week after I&rsquo;d started this process) I <em>finally</em> had a working, hackable version of GNOME Music!</p>

<p>So, lessons?</p>

<ul>
<li>Write it down or you will forget it (which is what I&rsquo;m doing here!)</li>
<li>Check your input media</li>
<li>IRC doesn&rsquo;t automatically keep logs!</li>
<li>Back up early and often. (VirtualBox lets you take snapshots of the state of your VM. DO THIS LOTS!)</li>
<li>There are lots of very friendly, knowledgeable folks on IRC, and nearly every thing you run into in the FOSS world has its own IRC channel. So <em>ask for help</em>!</li>
<li>Test things as piecemeal as you can. The more components are involved, the more likely it is that one of them is broken and the harder it is to pinpoint the error. When possible, do things directly from Terminal.</li>
<li>VMs are baffling because they shortcut keys are totally different. My brain is bent. I keep wondering why shortcuts on OSX aren&rsquo;t doing anything, only to realize that I&rsquo;m hitting <code>ctrl</code> instead of <code>cmd</code>. Oops.</li>
<li>Sometimes the &ldquo;easy&rdquo; way is easier. Sometimes it&rsquo;s much, much harder.</li>
<li>Sometimes the best thing to do is to reset and start over with another tack.</li>
</ul>


<p>What about writing the actual code, you say? That is, I believe, a post for another day!</p>
]]></content>
  </entry>
  
</feed>
