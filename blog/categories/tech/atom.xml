<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | Maia McCormick]]></title>
  <link href="http://maiamcc.github.io/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://maiamcc.github.io/"/>
  <updated>2018-06-27T21:11:43-04:00</updated>
  <id>http://maiamcc.github.io/</id>
  <author>
    <name><![CDATA[Maia Remez McCormick]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Preparing for Technical Interviews]]></title>
    <link href="http://maiamcc.github.io/blog/2018/03/25/interview-prep/"/>
    <updated>2018-03-25T15:17:41-04:00</updated>
    <id>http://maiamcc.github.io/blog/2018/03/25/interview-prep</id>
    <content type="html"><![CDATA[<p>Life update time! After three great years at <a href="https://engineering.shopspring.com/">Spring</a>, I&rsquo;m moving on to my next adventure; in April, I&rsquo;ll be joining <a href="https://windmill.engineering/">Windmill</a> as their fifth engineer, where I&rsquo;ll be building cloud-based developer tools, as well as company culture.</p>

<p>The most frequent question I&rsquo;ve got from people upon telling them this news (after &ldquo;what the heck is Windmill?!&rdquo;) is, &ldquo;How did you prepare for your interviews?&rdquo; (And all the related questions: &ldquo;How long did you prep for?&rdquo;, &ldquo;What were your on-sites like?&rdquo;, etc.)</p>

<p>This post aims to answer those questions. Here&rsquo;s some detail on my own personal interview prep and interview process. Of course, everything here should be taken with a grain of salt, as all of this will vary widely based on you and your skills, the sorts of companies you&rsquo;re interviewing for, etc.</p>

<!-- more -->


<h1>How did you prep?</h1>

<h2>Resume/Soft Skills</h2>

<p>The first thing I did (because it felt like the least intimidating way to ease into the job search process) was to update my resume. I made a big list of all the things I&rsquo;d done at work since I last updated my resume, then went back over that list, pulled out the most compelling and impressive items, and wrote bullets for them. I also got several rounds of feedback from friends and collegues in the tech industry. You can never have too many eyes on your resume.</p>

<p>I also practiced talking about my work and my projects, and answering so-called &ldquo;soft skills&rdquo; questions. Cracking the Coding Interview has a handy grid to help you organize your thoughts about your projects:</p>

<p><img src="/images/ctci-interview-prep-matrix.png" alt="From Cracking the Coding Interview (4th ed.), p. 23" /></p>

<p>I <em>didn&rsquo;t</em> physically fill this out, because I&rsquo;m lazy&mdash;but I <em>did</em> go over all of this in my head, making sure I had an idea of the interesting, challenging, and conversation-worthy bits of the major bullet points on my resume.</p>

<p>I&rsquo;ve been interviewing candidates at work for 2ish years now, so I have some idea of the questions that get asked in interviews and could think ahead about my answers to those<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>: but by far the most useful prep I did here was to have people mock-interview me. Having to answer these questions <em>out loud</em> forced me to think about them more concretely, and I could also get feedback on the things that I was saying that were more or less impressive, red-flag-y, etc. (&ldquo;If they ask you about conflicts with coworkers, tell story A, not story B, cuz in story A you resolved your disagreement, and in story B you were right and your coworker wrong and the system broke because of it, but even though you were right, it still resulted in the system breaking.&rdquo;)</p>

<h3>Preparing YOUR Interview Qs</h3>

<p>Another thing worth doing is preparing a list of questions that <em>you</em> want to ask <em>of your interviewers</em> to get a better idea about the company you may possibly work for. The better your questions for them, the more insight you can get into their workplace&mdash;and the more prepared you are with these questions, the less dumb you look in front of your interviewer.</p>

<p>I read a bunch of &ldquo;questions to ask in job interviews&rdquo; articles, grilled my friends, and put together a big doc of the questions I thought were the most informative. Some useful blog posts on the topic:
* <a href="https://jvns.ca/blog/2013/12/30/questions-im-asking-in-interviews/">https://jvns.ca/blog/2013/12/30/questions-im-asking-in-interviews/</a>
* <a href="http://juliepagano.com/blog/2015/08/15/job-search-retrospective/#interview-questions">http://juliepagano.com/blog/2015/08/15/job-search-retrospective/#interview-questions</a>
* <a href="http://lizabinante.com/blog/getting-hired-without-getting-burned/">http://lizabinante.com/blog/getting-hired-without-getting-burned/</a></p>

<h2>Algorithms</h2>

<p>To brush up on my algos, I worked through <a href="http://interactivepython.org/runestone/static/pythonds/index.html">Problem Solving with Algorithms and Data Structures using Python</a>, making sure to ask questions about/dig deeper into anything I didn&rsquo;t understand. Most of this I skimmed b/c I was already familiar with it, but I made sure to note the architypal problems for each data type (&ldquo;oh, it&rsquo;s an X problem? You should use data structure Y!&rdquo;), and paid special attention to trees and graphs cuz they&rsquo;re my weak spot.</p>

<p>And then it was just looots of practice problems. Some from Cracking the Coding Interview, some from <a href="https://leetcode.com/">LeetCode</a>, and as much practicing with friends as I could get. The best is to get friends who actually interview developers, because they know the ins and outs of their questions better, but even just having a friend mock-interview you with CtCI or LeetCode questions will do.</p>

<p>Practicing algos Qs on your own just thinking through the solution, or writing the solution on a computer, is good. Writing it out on paper/a whiteboard is better. Practicing with a person (in a mock interview sort of capacity, where you&rsquo;re timed, they&rsquo;re giving you hints where necessary but pushing you to explain yourself) is best.</p>

<h2>System Design</h2>

<p>Like with algos, mostly this was a matter of practice&mdash;getting friends to mock interview me with system design quesitons. I also went over some of the systems I built at work and made sure that I understood the technical choices and trade-offs there, so I could talk intelligently about it in interviews.</p>

<p>A piece of advice I got here (which I didn&rsquo;t end up taking, and it all turned out okay, but I probably should have done this anyway) was to talk to folks at other companies about their system architecture. My Achilles&#8217; heel in system design interviews has always been that I&rsquo;m only really familiar with the one or two paradigms I&rsquo;ve worked in&mdash;talking to others&#8217; about <em>their</em> paradigms would have been super useful, and given me a lot more ideas to draw on.</p>

<h1>How long did you prep for?</h1>

<p>I took two weeks off of work around Christmas/New Years, and was doing a bit of prep work every day&mdash;sometimes several hours of reading or practice interviews, sometimes 15 minutes researching a company or brushing up my resume, but I tried to do <em>something</em> every day. After that, I went back to my day job and I did a bit whenever I could&mdash;some problems on LeetCode in the evening, or a practice problem coffee date with a friend over the weekend. After a few weeks of occasional practice interviews, I felt pretty prepped. My process was pretty drawn out cuz I took my time to find companies I wanted to interview for, set up those interviews, etc., so I would keep doing the occasional practice problem during that to keep in shape, but mostly I felt pretty well prepared.</p>

<h1>What was your interview schedule like?</h1>

<p>Like I said, I took a while at the beginning of this process to get my resume in order, do some research on companies and write up a big list, brush up on algos, etc.</p>

<p>I lined up a couple of phone screens early to get them out of the way (staggering them so that I wasn&rsquo;t too absent at work), and punted on the on-sites so I could cluster those around the same time.</p>

<p>I highly recommend having your first on-site (or two) be a &ldquo;warm-up&rdquo;: <em>not</em> your dream job, but either one you don&rsquo;t feel too strongly about, or one that is a real long shot and you&rsquo;re not really banking on. The idea is to have your first interview or two be a little lower stress and lower stakes. Best case scenario, you get an offer and have more leverage or a fab opportunity you didn&rsquo;t count on; worst case, you get to ease yourself back into the sometimes-grueling world of on-site technical interviews.</p>

<h1>How did you decide where to interview?</h1>

<p>The way I decide many other things: I made a big ol&#8217; doc where I kept track of recommendations from friends, collegues, the Internet, etc. I brainstormed products I&rsquo;d be interested to work on, and places friends had worked or places I&rsquo;d seen on the internet with cultures that I liked. I looked up the companies of people I enjoy on Twitter and elsewhere on the interwebs. I took suggestions from the amaaazing jobs team at <a href="https://www.recurse.com/">RC</a>.</p>

<p>And then I dug into those companies. Looked for articles on company culture, their approach to tech problems, their thoughts on diversity and whether they had women and PoC on their engineering team/in management, how many blog posts they had by women/PoC, etc. I looked on Glassdoor. If I had friends there, or friends of friends, I reached out to them to ask them if they liked it there. I hit up people in my network (esp. women) for word-on-the-street. And from all that, sortakinda got a picture of these companies and which I was or wasn&rsquo;t interested in moving forward with.</p>

<p>(I should note that an important part of this process was being clear on what I wanted out of my next company. Having a concrete idea of my own values helped me know what things to look for, which questions to ask, and which things were dealbreakers. It&rsquo;s worth spending a good chunk of time on this step, as it will inform the rest of your search. In particular, I found Key Values&#8217; <a href="https://www.keyvalues.com/culture-queries/">Culture Queries</a> a useful place to start.)</p>

<h1>Then what?</h1>

<p>Well hopefully, the offers start rolling in! Be transparent with everyone in your interview process about where you&rsquo;re at (esp. with other companies), what your concerns are, and what you need from them. Stating your needs going in sets a good precedent!</p>

<p>When you start thinking about switching jobs, be prepared for lots of last minute insurance submissions and affair-getting-in-order, and remember to take any relevant documents off your computer/email/google drive, any relevant passwords off your password manager, etc. (Pro tip: if you know you&rsquo;ll be leaving early-ish in the year, max out your Flex Spending Account and you&rsquo;ll end up with free money! It&rsquo;s a good time to buy those prescription sunglasses you don&rsquo;t reaaally need, but heck, they&rsquo;re free!)</p>

<p>As for me, I&rsquo;m taking a month off and chilling, and so very excited about it. And thennnnn&hellip; I start my new job!</p>

<p>I&rsquo;m pretty psyched about this next chapter in my life, and I hope that some of the thoughts above are of use to someone. Best of luck, y&#8217;all!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Things like: &ldquo;How do you learn a new language or framework?&rdquo;; &ldquo;Tell me about a time that you failed&rdquo;; etc.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[F***in' Decorators, How Do THEY Work?!]]></title>
    <link href="http://maiamcc.github.io/blog/2018/02/01/python-decorators/"/>
    <updated>2018-02-01T13:16:46-05:00</updated>
    <id>http://maiamcc.github.io/blog/2018/02/01/python-decorators</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve been in Python-land for long, you&rsquo;ve probably seen some <code>@</code>-sign thingies hovering (often mysteriously) above functions and class definitions, saying things like <code>@patch</code> or <code>@classmethod</code> or perhaps something even more obscure. Maybe you already know that these are called &ldquo;decorators&rdquo;. Maybe you&rsquo;ve even used them, or written your own!</p>

<p>Even if you&rsquo;ve done all that and still don&rsquo;t quiiiite get what&rsquo;s going on under the hood with decorators&hellip; don&rsquo;t worry, my friend, you are not alone. Heck, <em>I&rsquo;m</em> still not quite sure what goes on under the hood with decorators, but after a very productive afternoon of fiddling, I have a much better idea, and I&rsquo;m here to share the fruits of that fiddling with you. Ready? Here we go:</p>

<p><strong>Decorators are callables called on callables that return a callable which then replaces the original callable.</strong></p>

<p>Got it?</p>

<p>&hellip;No?</p>

<p>&hellip;Yeah, okay, that&rsquo;s fair. Let me try that again.</p>

<!--more-->


<h1>A Temporary Oversimplification</h1>

<p>I know I said “callable” up there before, but just for now, I’m going to simplify and instead of talking about “callables”, I’ll talk about “functions”. All functions are callables&mdash;i.e. “functions” are a subset of “callables”&mdash;and they tend to be the easiest case for people to wrap their heads around.</p>

<p><img src="/images/callables_venn_diagram.png" alt="Functions are a subset of callables" /></p>

<p>“Callables” can also be classes, or heck, most any object, if it’s got the appropriate set of behaviors. We’ll dig into that in a bit, but for now, let’s talk about decorators in terms of “functions”. With this simplification in mind, let me amend my definition above to make it maaarginally less confusing:</p>

<p><strong>A decorator is a function (<code>dec(…)</code>) called on a function (<code>fn(…)</code>) returning a function (<code>fn_decorated(…)</code>) which then replaces the original function:</strong></p>

<pre><code class="python">@dec
def fn(...):
    ...

# Is approximately equal to:
fn = dec(fn)
</code></pre>

<p><img src="/images/decorators_flow_function.png" alt="Decorators are functions that modify functions" /></p>

<h1>How Decorators are Applied</h1>

<p>Say we&rsquo;ve got this function. It doesn&rsquo;t do much, but it&rsquo;s a nice little function:</p>

<pre><code class="python">def times_two(x):
    return 2*x
</code></pre>

<p>But say that we&rsquo;re so excited about that function that we want everyone to know when we call it, so we&rsquo;re gonna sound a klaxon every time we do:</p>

<pre><code class="python">def times_two_with_alarm(x):
    print("WOOP! WOOP! WOOP!")
    return times_two(x)
</code></pre>

<p>Sure, that works. But what if we&rsquo;ve got a BUNCH of functions that we&rsquo;re really excited about, and we want to add this big &lsquo;ol alarm (by which I mean &ldquo;print statement&rdquo;) to all of them? It&rsquo;ll get repetitive to add that code everywhere; what if we just wrote a function to stick that print statement into our functions for us?</p>

<pre><code class="python">def add_alarm(fn):
    def fn_with_alarm(*args, **kwargs):
        print("WOOP! WOOP! WOOP!")
        return fn(*args, **kwargs)
    return fn_with_alarm
</code></pre>

<p><code>add_alarm</code> is a function that takes an argument <code>fn</code>, the function we want to add an alarm to: it then returns us a NEW function which does the following:
a) sound the alarm
b) invoke the original function we passed to it</p>

<p>In practice, then, we can achieve the same thing we achieved above like so:</p>

<pre><code class="python">times_two_with_alarm = add_alarm(times_two)
</code></pre>

<p>Because, remember, in Python, functions are first class objects; they can be passed around, passed as arguments, assigned, etc. In this case, <code>add_alarm</code> takes a function as an argument, and it <em>returns</em> a function (one that does whatever the original func. does, but this time with an alarm). We can then assign the output of <code>add_alarm</code>; so now, <code>times_two_with_alarm</code> is that new, modified function:</p>

<pre><code class="python">&gt; times_two_with_alarm(5)
WOOP! WOOP! WOOP!
&lt; 10
</code></pre>

<p>Heck, maybe we don&rsquo;t want to keep track of a whole different function name, we just want that alarm to be baked into our <code>times_two</code> function. Well, we can do that too:</p>

<pre><code class="python"># In case you forgot, here's how we defined this function...
def times_two(x):
    return 2*x

# Add the alarm to it!
times_two = add_alarm(times_two)

&gt; times_two(4)
WOOP! WOOP! WOOP!
&lt; 8
</code></pre>

<h2>Okay, But Like… You Haven’t Used a Decorator Yet…?</h2>

<p>Geez, I’m getting there! In fact, THIS is where decorators come in! If the above seems a little tiresome, we can use this shortcut:</p>

<pre><code class="python">@add_alarm
def times_two(x):
    return 2*x
</code></pre>

<p>The <code>@decorator</code> syntax means basically what we said above: &ldquo;define this function, but then run it through this other <code>decorator</code> function, and assign the result of that call (which, again, ought to be a function) back to the function I just defined.&rdquo; This way, you can easily modify multiple functions in predictable<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> ways, and moreover, modify them <em>in place</em>; no need to keep track of both <code>times_two</code> and <code>times_two_with_alarm</code>, just update <code>times_two</code> to do the new thing.</p>

<h1>Back to “Callables”</h1>

<p>So remember earlier when I waved a hand and said that we’d talk about decorators as “functions that manipulate functions”? Well it’s actually a bit gnarlier than that. Properly speaking, decorators are <strong>callables that manipulate callables</strong>, and as such, both decorators and the things they decorate <em>may</em> be functions, or they may be <em>random other stuff.</em></p>

<h2>What&rsquo;s a &ldquo;Callable&rdquo;?</h2>

<p>A <strong>callable</strong> is <strong>anything that you can</strong> <strong><em>call</em></strong>&mdash;i.e. anything that you can stick a <code>()</code> after (with maybe some arguments inside) and have something happen. A callable may be a <strong>function</strong> (<code>my_func(...)</code>) or a <strong>class</strong> (<code>MyClass(...)</code><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>), or (as helpful as this definition is) any <strong>object</strong>, as long as it can be… well, called. Some things that are NOT callable include strings, ints, lists, etc.:</p>

<pre><code class="python">&gt; "hello"()
&lt; TypeError: 'str' object is not callable
</code></pre>

<p>So then, to re-visit our original definition of a decorator, taking away our initial oversimplification: <strong>decorators are callables that manipulate callables (and then replace the original thing with the modified thing).</strong></p>

<p><img src="/images/decorators_flow_callable.png" alt="Decorators are callables that modify callables" /></p>

<p>We’ve already talked about decorators as functions being used to modify functions. But since callables can be either functions or classes (…or objects, but we’ll ignore that for now), let’s talk about some other cases.</p>

<h2>Decorating a Class with a Function</h2>

<p>What if we just got really excited about a bunch of classes, and wanted to announce to the world whenever we made a new instance of one? It might look something like this:</p>

<pre><code class="python">def announce_new_instance(cls):
    def make_new_instance_with_announcement(*args, **kwargs):
        print("Making a thing!")
        return cls(*args, **kwargs)
    return make_new_instance_with_announcement

@announce_new_instance
class MyClass():
    def __init__(self, foo):
        self.foo = foo

&gt; MyClass('bar')
Making a thing!
&lt; &lt;__main__.MyClass at 0x10fd84b70&gt;
</code></pre>

<p>Recall that <code>MyClass</code> is a <em>callable</em>&mdash;<code>MyClass()</code> means, &ldquo;make me a new MyClass instance!&rdquo;&mdash;and so we can treat it just like any other thing that can be called, and even treat it like the function from our first example. In this case, under the hood, we&rsquo;re replacing <code>MyClass</code> (the function-like thing that, when called, makes a new instance) with <code>make_new_instance_with_announcement</code>, which makes its announcement and <em>then</em> kicks off making a new instance. (In the context of the decorator above, <code>cls</code> represents the class you passed in, i.e. the class you&rsquo;re decorating; so here, it&rsquo;s <code>MyClass</code>, thus <code>cls()</code> is the same as <code>MyClass()</code>.<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<h2>Classes as Decorators</h2>

<p>This one bends my brain, but you can totally use a class as a decorator! Because as we discusssed (say it with me), <em>classes are callables too</em>. A call to <code>MyClass(*args, **kwargs)</code> eventually calls out to <code>MyClass.__init__(self, *args, **kwargs)</code> (and does some other magic such that at the end of it all, an instance is returned back). There are probably other rad things you can do with classes-as-decorators, but the pattern I&rsquo;ve seen most often (in all three hours of looking into this) is this one:</p>

<pre><code class="python">class DecoratorClass():
    def __init__(self, fn):
        self.fn = fn
    def __call__(self, *args, **kwargs):
        print("Look how decorated!")
        return self.fn(*args, **kwargs)

@DecoratorClass
def times_two(x):
    return 2*x

&gt; times_two(41)
Look how decorated!
&lt; 82
</code></pre>

<p>Oh man, weird, right? <code>DecoratorClass</code> is a class that takes a function (<code>fn</code>) as an initialization argument and hangs onto it. And recall that we replace the function-to-be-decorated with the result of a call to <code>decorator</code>, thus the above is equivalent to:</p>

<pre><code class="python">def times_two(x):
    return 2*x

times_two = DecoratorClass(times_two)
</code></pre>

<p>That is, the new <code>times_two</code> is an <em>instance</em> of <code>DecoratorClass</code>?! What?!</p>

<pre><code class="python">&gt; times_two
&lt; &lt;__main__.DecoratorClass at 0x109b867b8&gt;
</code></pre>

<p>But the point of decorators is that we don’t really <em>care</em> what <code>times_two</code> is, we just want it to do what we expect when we call it. Thus, we need an instance of <code>DecoratorClass</code> to actually DO stuff when you stick <code>(…)</code> at the end. That’s where the <code>__call__</code> method we defined earlier comes in.</p>

<h3>Tangent: <code>__call__</code></h3>

<p>We can make an object (i.e. an instance of a class) callable using the magic <code>__call__</code> method, like so:</p>

<pre><code class="python">class Callable():
    # defining the __call__ method on an INSTANCE of this class
    def __call__(self):
        return "you called me!"

&gt; c = Callable()

&gt; c()
&lt; "you called me!"

# Contrast with...
class NotCallable():
    pass

&gt; nc = NotCallable()

&gt; nc()
&lt; TypeError: 'NotCallable' object is not callable
</code></pre>

<h3>Back to <code>DecoratorClass</code></h3>

<p>So we&rsquo;ve got a <code>DecoratorClass</code> that takes in a function and hangs onto it, and when we define the magic method  <code>__call__</code>, we&rsquo;re defining what happens when we stick <code>(...)</code> on the end of an instance of this class&mdash;we call the function that we passed in in the first place:</p>

<pre><code class="python">&gt; instance = DecoratorClass(times_two)
&gt; instance(5) # i.e. DecoratorClass.__call__(5)
Look how decorated!
&lt; 10
</code></pre>

<p>So after all that decorator magic, we’ve replaced <code>times_two</code> with an instance of <code>DecoratorClass</code>, right? But as we just saw above, we can call that instance like we would call any other function; thus <code>times_two</code> can still be called like normal, and in all respects treated as a normal function—but now it has some shiny extra functionality added via our decorator.</p>

<h2>Okay, But Why Would You WANT to Use a Class as a Decorator?</h2>

<p>That&rsquo;s a great question. There are probably lots of fascinating answers. At this present moment, I only have two: &ldquo;to store state&rdquo; and &ldquo;because you can&rdquo;. Since I&rsquo;ve already covered the latter in quite a bit of detail, let&rsquo;s turn to the former, i.e., a halfway plausible case in which you might want to use a class as a decorator. (I’m sure there are other reasonable ways to store state on a function, as well as other compelling reasons to use classes as decorators, but let’s just go with this for now.)</p>

<p>Unlike functions, which are (generally) one-and-done, classes allow you to store state.<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> How might you use this in a decorator context? Consider something like this:</p>

<pre><code class="python">class countcalls():
    def __init__(self, fn):
        self.fn = fn
        self.CALLS = 0
    def __call__(self, *args, **kwargs):
        self.CALLS += 1
        print("This func. has been called {} time(s)".
            format(self.CALLS))
        return self.fn(*args, **kwargs)

@countcalls
def foo():
    return "hello world"

&gt; foo()
This func. has been called 1 time(s)
&lt; "hello world"

&gt; foo()
This func. has been called 2 time(s)
&lt; "hello world"
</code></pre>

<p>And heck, why not go for broke and use a class to decorate a class?!</p>

<pre><code class="python">class countinits():
    def __init__(self, cls):
        self.cls = cls
        self.INITS = 0
    def __call__(self, *args, **kwargs):
        self.INITS += 1
        print("You've made {} of this class".format(self.INITS))
        return self.cls(*args, **kwargs)

@countinits
class MyClass():
    pass

&gt; inst1 = MyClass()
You've made 1 of this class

&gt; inst2 = MyClass()
You've made 2 of this class
</code></pre>

<p>The above example looks a little gnarly, but remember that <code>cls</code> here is <code>MyClass</code> which is a callable (that makes and returns a new <code>MyClass</code> instance), and remember how the <code>@decorator</code> syntax is applied, and you can piece together precisely what dark magic is happening here.</p>

<h1>Awesome! …Wait, What?</h1>

<p>Yeah, I know, a lot of things just went down. To summarize:</p>

<ol>
<li>you can <em>decorate</em> any callable—be it a function, a class, or any callable object.</li>
<li>a <em>decorator</em>—the <code>@something</code> thing—is a callable (function, class, etc.) that takes as an argument the thing you’re decorating and returns another callable that preserves the original functionality but adding something new</li>
<li>the type of callable is irrelevant. Functions can decorate functions, or classes, or objects. Classes can decorate functions, or classes, or objects. Basically, anything goes.</li>
</ol>


<p>There are lots of other resources on the interwebs about what sort of stuff you might want to use decorators for—and heck, I might write a blogpost about some of them in future—but I hope this is an illuminating overview of just what the heck decorators <em>are</em> and how they work. As always, feel free to reach out with any questions! A big thank you to all the excellent folks who beta-read/edited this post: <a href="http://happyspork.com/">Ben Anderman</a>, <a href="https://github.com/cappachu">Codanda Appachu</a>, <a href="http://antha.site/">Sam Auciello</a>, and <a href="https://alexburka.com/">Alex Burka</a>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>…except that decorators as described here can potentially do weird things to doc strings and other function attributes. This is one of the reasons that many folks use <a href="https://docs.python.org/3/library/functools.html#functools.wraps"><code>functools.wraps</code></a> when decorating things: it copies over most (though not all 😞) of the original functions&#8217;     hidden attributes to the new, wrapped function. Hat tip to <a href="https://github.com/cappachu">Codanda Appachu</a> for reminding me of this.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><code>MyClass(...)</code>, of course, being shorthand for <code>MyClass.__init__(...)</code>. (That&rsquo;s totally an oversimplification; <code>MyClass(...)</code> is <em>actually</em> shorthand for <code>MyClass.__new__(cls)</code>, which does a bunch of stuff, including call <code>__init__</code> on the newly made <code>MyClass</code> instance&hellip; but sufice it to say that when I call <code>MyClass(...)</code> I expect some stuff to happen, including a call to <code>MyClass.__init__</code>, and to eventually get back a new instance of that class.)<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Note that since <code>MyClass(...)</code> is baaasically shorthand for <code>MyClass.__init__(...)</code> (see above), and so you can achieve a pretty similar effect by decorating the <code>__init__</code>  method. The thing passed into <code>announce_new_instance</code> to be transformed will be different, but the new function will execute in just about the same way.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Hat tip to <a href="http://jayantj.github.io/">Jayant Jain</a>, who pointed out an error I made in the original version of this blogpost. (Yes, if you really wanted to, you could store state on a function as well, cuz it&rsquo;s Python and everything is an object, including functions. For instance, I could totally set <code>my_func.some_value = "hello"</code>. However, it&rsquo;s awkward and unidiomatic. So like, go ahead and do that if you want, but it&rsquo;s kinda weird, and really it just makes more sense to use classes.)<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Are Interfaces?]]></title>
    <link href="http://maiamcc.github.io/blog/2017/06/17/what-are-interfaces/"/>
    <updated>2017-06-17T13:04:02-04:00</updated>
    <id>http://maiamcc.github.io/blog/2017/06/17/what-are-interfaces</id>
    <content type="html"><![CDATA[<p>This is a blog post about interfaces in Go. I wanted to write about a headscratcher that cost me several hours of work when I first started learning Go, and I figured I might as well start from the beginning and write the article on interfaces that I wish I had read back then. The story of my encounter with nil interfaces is coming soon, but for now, here&rsquo;s a brief and hopefully accessible piece on interfaces in Go.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> So, without further ado, I give you&hellip;</p>

<h3>What Is an Interface?</h3>

<p>Coming from the dynamically-typed wild west of Python, one of the bits of Go that took the most getting used to was the idea of <em>interfaces</em>. An interface is a way of typing things according to their methods. If I want a function that can take any number of different types, so long as they have a given method (or two, or five) in common, I’ll want to use an interface to accomplish this (since I can’t pass in any old thing because of Go’s type safety rules). To give a concrete example, say I’ve got these classes: <!--more--></p>

<pre><code class="go">type octopus struct {
    numTentacles int
}

func (octopus) ooze() string {
    return "ink"
}

type slug struct {
    salted bool
}

func (slug) ooze() string {
    return "slime"
}
</code></pre>

<p><code>slug</code> and <code>octopus</code> are their own types, but both have <code>ooze()</code> methods. If I wanted a function to make use of the <code>ooze</code> method, and didn’t know how to make effective use of interfaces, I might write something like this. Note that <code>interface{}</code> is a wild card and I&rsquo;ll explain why in a minute&hellip; but for now, just accept that this is the way we can allow this function to take either a slug OR an octopus (&hellip;or anything else, unfortunately) without Go complaining at us.</p>

<pre><code class="go">func oozeAttack(slugOrOctopus interface{}) string {
    switch oozingThing := slugOrOctopus.(type) {
        case slug:
            // cast oozingThing as a slug
            return fmt.Sprintf("You got %s’d!", oozingThing.ooze())
        case octopus:
            // cast oozingThing as an octopus
            return fmt.Sprintf("You got %s’d!", oozingThing.ooze())
        default:
            panic(```This thing doesn't know how to ooze!
            ...It sucks that you were able to pass this in
            without the compiler complaining at you, but
            here we are.```)
    }
}
</code></pre>

<p>Ugh. Awkward, right? And it has repeated code, and it can potentially panic b/c we have no guarantees of the type of the thing we passed, and… ugh. No good. But luckily, I can use interfaces as they were meant to be used, and suddenly my code is a lot prettier:</p>

<pre><code class="go">type oozer interface{
    // the signature of a function called "ooze",
    // which takes no args and returns a string
    ooze() string
}

func oozeAttack(o oozer) string {
    return fmt.Sprintf("You got %s’d!", o.ooze())
}
</code></pre>

<p>If an object has all of the methods required for an interface, we say that that object <em>implements</em> (or satisfies) that interface. In this case, both <code>octopus</code> and <code>slug</code> implement <code>oozer</code> because they both have <code>ooze()</code> methods. The compiler can check this for us, so we know that anything we pass into <code>oozeAttack</code> has an <code>ooze()</code> method and won’t break out code—in stark contrast to the example above, where we could pass in <em>literally anything</em> and just had to pray that it wouldn’t cause a panic.</p>

<h3>Okay, But What Is an <code>interface{}</code>?</h3>

<p>If you’ve been using Go for more than a couple of days, you’ve probably stumbled across <code>interface{}</code>, the mythical and mysterious empty interface (<a href="https://www.youtube.com/watch?v=bW7Op86ox9g">click here for dramatic effect</a>). (I even used it in the example above.) The empty interface baffled me for a long time. I understood that practically, it was a type wildcard—you used it anywhere you weren’t sure of the type of a thing. If I have a function that’s going to get passed <em>some thing</em> but I don’t know what the type of that thing is, I’ll use <code>interface{}</code> so nothing breaks:</p>

<pre><code class="go">func printMysteryObject(thing interface{}) {
        fmt.Printf("Your mystery thing is: %v", thing)
}
</code></pre>

<p>But it was only after I started thinking about what interfaces actually are, and reading some blog posts, that I figured out why this works. <code>interface{}</code> is this:</p>

<pre><code class="go">type BoringInterface interface {
        // … nothing to see here …
}
</code></pre>

<p>It’s an interface that requires no methods! And so any object at all will satisfy this interface, because any object in Go has 0+ methods. I finally understand what the flip this thing is. So exciting.</p>

<p>Stay tuned for part 2 in this series, &ldquo;When Interfaces Go Nil (dun dun dunnn)&rdquo;.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I need to make the disclaimer that lots of other folks have written about this, and the <a href="https://blog.golang.org/laws-of-reflection">Go blogpost on <em>The Laws of Reflection</em></a> probably explains this stuff better than I do. That said, I hope this blog post is more to the point, and perhaps more entertaining. (Mad props to <a href="http://aoeu.github.io/">Travis McDemus</a> for inspiration for this excellent example of how interfaces work, which I find 100% more accessible than the <code>io.Reader/Writer</code> examples that get used in all the canonical Go blogposts about interfaces.)<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dig Yourself Out of a 'Git Commit Amend' Hole With Reflog]]></title>
    <link href="http://maiamcc.github.io/blog/2016/04/29/dig-yourself-out-of-a-git-commit-amend-hole/"/>
    <updated>2016-04-29T22:59:25-04:00</updated>
    <id>http://maiamcc.github.io/blog/2016/04/29/dig-yourself-out-of-a-git-commit-amend-hole</id>
    <content type="html"><![CDATA[<p>Raise your hand if you’ve ever <code>git commit</code>’d something you shouldn’t have. (It’s okay, this is a judgement-free space.)</p>

<p>And raise your hand if you’ve ever used <code>git commit --amend --no-edit</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> to try and hide your terrible, terrible shame. (We’re not even gonna <em>talk</em> about <code>git push -f origin master</code>. Don’t do it, kids.)</p>

<p>And raise your hand one last time if you’ve ever <code>git commit --amend --no-edit</code>’d and then paused and looked at your computer and were suddenly struck by the realization that you’d ruined everything.</p>

<p>That last one might be just me, but I’m going to pretend it happens to other people to make myself feel better. (Like all of those times I thought I was fixing a slightly incorrect commit, only to realize I had instead wiped out all of my latest work. Whoooops.) <!-- more --></p>

<p>Well, I put in an appearance at <a href="http://git-merge.com">Git Merge 2016</a> (an all-around delightful event), and this gem was among the many things I learned there. This gem, friends, is the <code>reflog</code> and <code>HEAD@{x}</code>.</p>

<p>The reflog is… well, it’s a log of your refs. Refs being references to commits, which might be things like branch names (because recall that branch names are just human-readable references to commits) or this <code>HEAD</code> thing, which is a pointer to <em>the commit you’re on right now</em>. In fact, if you went into a folder that was a git repo and looked at <code>.git/refs/heads/master</code>, you’d see a file with a single commit hash in it&ndash;that’s the current tip of <code>master</code>, i.e. <em>the commit that your “master” ref is pointing to</em>.</p>

<p>Now, refs in and of themselves aren’t gonna solve your <code>git commit --amend</code> debacle, but it turns out that git is really smart sometimes. In this particular case, the smart thing that git does is keep track of everywhere your <code>HEAD</code> has been pointing. This info is stored in <code>.git/logs/HEAD</code>, and looks something like this:</p>

<pre><code>0000000000000000000000000000000000000000 5a90f86dbb681f914790fbe494cbc5680ce372cc Maia &lt;maia.mcc@gmail.com&gt; 1461979447 -0400    commit (initial): add a file with some stuff
5a90f86dbb681f914790fbe494cbc5680ce372cc fdaec86d18b70bf8b9f87e74b473dcdb53d5b814 Maia &lt;maia.mcc@gmail.com&gt; 1461979493 -0400    commit: totally innocuous change
fdaec86d18b70bf8b9f87e74b473dcdb53d5b814 d77508cfe5df412158ad8a19540aca0ba195348f Maia &lt;maia.mcc@gmail.com&gt; 1461979518 -0400    commit (amend): totally innocuous change
d77508cfe5df412158ad8a19540aca0ba195348f fdaec86d18b70bf8b9f87e74b473dcdb53d5b814 Maia &lt;maia.mcc@gmail.com&gt; 1461979572 -0400    reset: moving to HEAD@{1}
fdaec86d18b70bf8b9f87e74b473dcdb53d5b814 514dd505826ddc1276823506e7682b33b64547b6 Maia &lt;maia.mcc@gmail.com&gt; 1461980303 -0400    commit (merge): Merge commit 'd77508c'
</code></pre>

<p>If you find that a little hard to parse (and you probably do), you can (and should) get at it in a more human-readable form with the command <code>git reflog show</code>:</p>

<pre><code>fdaec86 HEAD@{2}: commit (merge): Merge commit 'd77508c'514dd505826ddc1276823506e7682b33b64547b6 fdaec86d18b70bf8b9f87e74b473dcdb53d5b814 Maia &lt;maia.mcc@gmail.com&gt; 1461982854 -0400    checkout: moving from master to head^
fdaec86 HEAD@{3}: checkout: moving from d77508cfe5df412158ad8a19540aca0ba195348f to master
d77508c HEAD@{4}: checkout: moving from master to HEAD@{3}
fdaec86 HEAD@{5}: reset: moving to HEAD@{1}
d77508c HEAD@{6}: checkout: moving from fdaec86d18b70bf8b9f87e74b473dcdb53d5b814 to master
fdaec86 HEAD@{7}: checkout: moving from master to fdaec86d18b70bf8b9f87e74b473dcdb53d5b814
d77508c HEAD@{8}: commit (amend): totally innocuous change
fdaec86 HEAD@{9}: commit: totally innocuous change
5a90f86 HEAD@{10}: commit (initial): add a file with some stuff
</code></pre>

<p>So I had always thought that <code>git commit --amend</code> <em>amended your current commit</em>&ndash;wrote all of your changes onto the same commit and called it a day. But it turns out that it doesn’t; rather, it creates a <em>whole new commit</em> in which to store your amended changes. Like, look, you can see it right there in the reflog: the same commit message, before and after amend, with two different hashes, whoadamn! So Whatever my commit looked liked before I mistakenly amended is still out there somewhere in the void, and with reflog, I can get that hash! From here, getting back your lost work is simple: <code>git checkout [lost-commit-hash]</code>, <code>git reset --hard [lost-commit-hash]</code>, what have you.</p>

<p>But there’s one more nifty thing here: all the <code>HEAD@{x}</code> numbers in the reflog are shortcuts to those commits. Much the same way that you can use <code>HEAD^^^</code> to point to the commit three generations up from your current head, you can use <code>HEAD@{3}</code> to point to the commit <em>from three movements of <code>HEAD</code> ago</em>. That makes “oh crap, I need  to get back to the last commit I was on before I did [stupid thing]” even easier&ndash;instead of having to go to the reflog and find the commit, you can just <code>git checkout HEAD@{1}</code> to get to whatever commit your head was previously on. (The commit your head is currently on, of course, being <code>HEAD@{0}</code>.)</p>

<p>So, there you go: a cool git thing I learned recently. Nothing earth-shattering, but hopefully a useful tip for someone out there. Happy gitting!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>For those of you who don’t know, this is <code>git commit --amend</code>’s older and better-looking cousin: it’s <code>git commit --amend</code> except that it automatically reuses the commit message of the commit you’re amending, rather than prompting you for a new one.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Truthiness]]></title>
    <link href="http://maiamcc.github.io/blog/2015/04/16/truthiness/"/>
    <updated>2015-04-16T21:13:19-04:00</updated>
    <id>http://maiamcc.github.io/blog/2015/04/16/truthiness</id>
    <content type="html"><![CDATA[<p>Truthiness in Python is occasionally confusing. Obviously, <code>False</code> is false and <code>True</code> is true, but beyond that, what then?</p>

<p><code>None</code> is always false&ndash;though this doesn&rsquo;t mean that <code>False == None</code>, which is a mistake I made early in my Python career. I was confused by how a nonexistant list and an empty list were both falsey, and somewhere in my mind I thought that they were both <code>None</code> as well. Not so much.<!--more--></p>

<pre><code class="python">&gt;&gt;&gt; a = None
&gt;&gt;&gt; bool(a)
False
&gt;&gt;&gt; b = []
&gt;&gt;&gt; bool(b)
False
&gt;&gt;&gt; bool(a is None)
True
&gt;&gt;&gt; bool(b is None)
False
</code></pre>

<p>A stylistic note here: since <code>None</code> is a singleton (i.e. there exists only one instance of it), the proper syntax is <code>foo is None</code>, rather than <code>foo == None</code>. But I digress.</p>

<p>The empty values of data structures are always falsey. Hence:</p>

<pre><code class="python">&gt;&gt;&gt; bool([])
False
&gt;&gt;&gt; bool("")
False
&gt;&gt;&gt; bool({})
False
</code></pre>

<p>And perhaps most confusingly:</p>

<pre><code class="python">&gt;&gt;&gt; bool(0)
False
&gt;&gt;&gt; bool(1)
True
&gt;&gt;&gt; bool(2)
True
&gt;&gt;&gt; bool(-31.4)
True
</code></pre>

<p>I mean, this makes sense because we know that 0 is false and 1 is true&hellip; but if you think about it, this also means that <code>0</code> is the empty value of an <code>int</code> (which means that <code>0</code> is false, but every other value of <code>int</code> or <code>float</code> is true) This doesn&rsquo;t mean much in Python, of course, but I&rsquo;ve been playing with Go lately, in which you have to initialize your variables before you can do anything with them, and suddenly the idea of an empty value makes a lot more sense (and the empty value for an int is indeed zero).</p>

<p>Conversely, every non-zero value of a data structure is true. That means that a string with stuff in it, a dict. with stuff in it, a list with stuff in it, etc. is true no matter what the stuff is. And so:</p>

<pre><code class="python">&gt;&gt;&gt; hip = False
&gt;&gt;&gt; bool(hip)
False
&gt;&gt;&gt; bool([hip, hip])
True
</code></pre>

<p>Proving conclusively, as we all knew, that <em>hips don&rsquo;t lie</em>.</p>

<p>(<a href="//instantrimshot.com/index.php?sound=rimshot&amp;play=true">Ba-bm-psh</a>.)</p>

<p>Extra credit: do you know what <code>["hip", "hip"]</code> is?</p>

<p>&hellip;(wait for it)&hellip;</p>

<p>It&rsquo;s a <em>hip hip array</em>.</p>

<p>(<a href="//wompwompwomp.com/">Womp womp</a>.)</p>
]]></content>
  </entry>
  
</feed>
