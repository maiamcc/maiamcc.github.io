<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Maia McCormick]]></title>
  <link href="http://maiamcc.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://maiamcc.github.io/"/>
  <updated>2021-02-01T12:08:54-05:00</updated>
  <id>http://maiamcc.github.io/</id>
  <author>
    <name><![CDATA[Maia Remez McCormick]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dig Yourself Out of a 'Git Commit Amend' Hole With Reflog]]></title>
    <link href="http://maiamcc.github.io/blog/2016/04/29/dig-yourself-out-of-a-git-commit-amend-hole/"/>
    <updated>2016-04-29T22:59:25-04:00</updated>
    <id>http://maiamcc.github.io/blog/2016/04/29/dig-yourself-out-of-a-git-commit-amend-hole</id>
    <content type="html"><![CDATA[<p>Raise your hand if you’ve ever <code>git commit</code>’d something you shouldn’t have. (It’s okay, this is a judgement-free space.)</p>

<p>And raise your hand if you’ve ever used <code>git commit --amend --no-edit</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> to try and hide your terrible, terrible shame. (We’re not even gonna <em>talk</em> about <code>git push -f origin master</code>. Don’t do it, kids.)</p>

<p>And raise your hand one last time if you’ve ever <code>git commit --amend --no-edit</code>’d and then paused and looked at your computer and were suddenly struck by the realization that you’d ruined everything.</p>

<p>That last one might be just me, but I’m going to pretend it happens to other people to make myself feel better. (Like all of those times I thought I was fixing a slightly incorrect commit, only to realize I had instead wiped out all of my latest work. Whoooops.) <!-- more --></p>

<p>Well, I put in an appearance at <a href="http://git-merge.com">Git Merge 2016</a> (an all-around delightful event), and this gem was among the many things I learned there. This gem, friends, is the <code>reflog</code> and <code>HEAD@{x}</code>.</p>

<p>The reflog is… well, it’s a log of your refs. Refs being references to commits, which might be things like branch names (because recall that branch names are just human-readable references to commits) or this <code>HEAD</code> thing, which is a pointer to <em>the commit you’re on right now</em>. In fact, if you went into a folder that was a git repo and looked at <code>.git/refs/heads/master</code>, you’d see a file with a single commit hash in it&ndash;that’s the current tip of <code>master</code>, i.e. <em>the commit that your “master” ref is pointing to</em>.</p>

<p>Now, refs in and of themselves aren’t gonna solve your <code>git commit --amend</code> debacle, but it turns out that git is really smart sometimes. In this particular case, the smart thing that git does is keep track of everywhere your <code>HEAD</code> has been pointing. This info is stored in <code>.git/logs/HEAD</code>, and looks something like this:</p>

<pre><code>0000000000000000000000000000000000000000 5a90f86dbb681f914790fbe494cbc5680ce372cc Maia &lt;maia.mcc@gmail.com&gt; 1461979447 -0400    commit (initial): add a file with some stuff
5a90f86dbb681f914790fbe494cbc5680ce372cc fdaec86d18b70bf8b9f87e74b473dcdb53d5b814 Maia &lt;maia.mcc@gmail.com&gt; 1461979493 -0400    commit: totally innocuous change
fdaec86d18b70bf8b9f87e74b473dcdb53d5b814 d77508cfe5df412158ad8a19540aca0ba195348f Maia &lt;maia.mcc@gmail.com&gt; 1461979518 -0400    commit (amend): totally innocuous change
d77508cfe5df412158ad8a19540aca0ba195348f fdaec86d18b70bf8b9f87e74b473dcdb53d5b814 Maia &lt;maia.mcc@gmail.com&gt; 1461979572 -0400    reset: moving to HEAD@{1}
fdaec86d18b70bf8b9f87e74b473dcdb53d5b814 514dd505826ddc1276823506e7682b33b64547b6 Maia &lt;maia.mcc@gmail.com&gt; 1461980303 -0400    commit (merge): Merge commit 'd77508c'
</code></pre>

<p>If you find that a little hard to parse (and you probably do), you can (and should) get at it in a more human-readable form with the command <code>git reflog show</code>:</p>

<pre><code>fdaec86 HEAD@{2}: commit (merge): Merge commit 'd77508c'514dd505826ddc1276823506e7682b33b64547b6 fdaec86d18b70bf8b9f87e74b473dcdb53d5b814 Maia &lt;maia.mcc@gmail.com&gt; 1461982854 -0400    checkout: moving from master to head^
fdaec86 HEAD@{3}: checkout: moving from d77508cfe5df412158ad8a19540aca0ba195348f to master
d77508c HEAD@{4}: checkout: moving from master to HEAD@{3}
fdaec86 HEAD@{5}: reset: moving to HEAD@{1}
d77508c HEAD@{6}: checkout: moving from fdaec86d18b70bf8b9f87e74b473dcdb53d5b814 to master
fdaec86 HEAD@{7}: checkout: moving from master to fdaec86d18b70bf8b9f87e74b473dcdb53d5b814
d77508c HEAD@{8}: commit (amend): totally innocuous change
fdaec86 HEAD@{9}: commit: totally innocuous change
5a90f86 HEAD@{10}: commit (initial): add a file with some stuff
</code></pre>

<p>So I had always thought that <code>git commit --amend</code> <em>amended your current commit</em>&ndash;wrote all of your changes onto the same commit and called it a day. But it turns out that it doesn’t; rather, it creates a <em>whole new commit</em> in which to store your amended changes. Like, look, you can see it right there in the reflog: the same commit message, before and after amend, with two different hashes, whoadamn! So Whatever my commit looked liked before I mistakenly amended is still out there somewhere in the void, and with reflog, I can get that hash! From here, getting back your lost work is simple: <code>git checkout [lost-commit-hash]</code>, <code>git reset --hard [lost-commit-hash]</code>, what have you.</p>

<p>But there’s one more nifty thing here: all the <code>HEAD@{x}</code> numbers in the reflog are shortcuts to those commits. Much the same way that you can use <code>HEAD^^^</code> to point to the commit three generations up from your current head, you can use <code>HEAD@{3}</code> to point to the commit <em>from three movements of <code>HEAD</code> ago</em>. That makes “oh crap, I need  to get back to the last commit I was on before I did [stupid thing]” even easier&ndash;instead of having to go to the reflog and find the commit, you can just <code>git checkout HEAD@{1}</code> to get to whatever commit your head was previously on. (The commit your head is currently on, of course, being <code>HEAD@{0}</code>.)</p>

<p>So, there you go: a cool git thing I learned recently. Nothing earth-shattering, but hopefully a useful tip for someone out there. Happy gitting!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>For those of you who don’t know, this is <code>git commit --amend</code>’s older and better-looking cousin: it’s <code>git commit --amend</code> except that it automatically reuses the commit message of the commit you’re amending, rather than prompting you for a new one.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git 301: Changing History]]></title>
    <link href="http://maiamcc.github.io/blog/2015/01/23/git-301-changing-history/"/>
    <updated>2015-01-23T23:53:50-05:00</updated>
    <id>http://maiamcc.github.io/blog/2015/01/23/git-301-changing-history</id>
    <content type="html"><![CDATA[<p>Congratulations, you&rsquo;ve made it through Git 101 (<code>init</code>, <code>add</code>, <code>commit</code>, <code>log</code>, <code>status</code>) and its slightly more difficult companion course, Git 201 (<code>branch</code>, <code>checkout</code>, <code>pull</code>).<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> Are you ready to pull out the big guns? Here are a handful of commands I&rsquo;ve been using lately, which I will now write about on the off-chance that they&rsquo;re useful to someone else. Welcome to Git 301.</p>

<h4>Selective Checkouts with <code>checkout -p</code></h4>

<p>Okay, this isn&rsquo;t really changing history. But it IS a fancy bit of next-level gittery that I&rsquo;ve found useful as I try to make my git history useful to others and actually move in a logical feature-by-feature progression, instead of reflecting my all-over-the-place, distracted workflow.<!--more--></p>

<p><code>git commit -p</code> (for <code>--patch</code>) takes you chunk by chunk through all of your unstaged changes and asks, &ldquo;Do you want to commit this piece?&rdquo; So if you&rsquo;ve changed 3 things in <code>foo.py</code> but they&rsquo;re all part of different features, you can commit them all separately!</p>

<h4>Change the Past with <code>rebase -i</code></h4>

<p>Remember when you learned that you could revise the commit you’d just made with <code>git commit --amend</code> (as long as you hadn’t pushed anything to your remote repo yet cuz then stuff would get borked and you’d probably have to force push), and it was super cool? Rebase is like that, but 50x cooler.</p>

<p>Rebase is the git tool that allows you to rewrite the past. You can use it to pull together commits from different branches, change commit orders, keep some and ignore others, modify messages, modify content… it’s crazy! I won’t bore you here with the plain ‘ol <code>rebase</code> command and how you might use it to smoothly interweave multiple branches’ worth of commits into a single branch of commit history. I totally could if I wanted to because I totally know the details of how rebasing works off the top of my head and don&rsquo;t just blindly run commands whenever I need to rebase stuff. Totally for sure.</p>

<p>But even better than <code>rebase</code> is this excellent new thing I learned about today, <code>git rebase -i</code> (for <code>--interactive</code>)! <code>git rebase -i [hash]</code> will pop up your text editor with a bunch<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> of your commits in it, all preceded by the word <code>pick</code>. And… y’know, it’s actually pretty pointless for me to explain this here, because interactive rebase explains it all to you in the text file! (Yay easy-to-read documentation! Unlike most of the git man pages, but oh well…) Here you can change the order of the commits if you want, delete commits you want to get rid of, and do a couple of other neat things.</p>

<p>In particular, the feature that I’ve found to be a lifesaver is the ability to revise a past commit (not just the message, but the content as well).<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> Change <code>pick</code> to <code>edit</code> next to the commit(s) you want to revise, then save and close the text file. Git will drop you in your project directory just after the time of the first commit marked with <code>edit</code>. Make any changes you want to make, commit them with <code>git commit --amend</code>, and then go ahead with your rebase with <code>git rebase —continue</code>. Magically, the commit has been revised to include any changes you just made! Huzzah!</p>

<h4>Fix Your Mistakes the <em>Responsible</em> Way with <code>revert</code></h4>

<p>Rebasing and fixup-ing and pretending you never made any boo-boos in your commits&mdash;and then probably force pushing (<code>git push origin master -f</code>) to your remote repo&mdash;is all well and good, but if anyone else is working in the same remote repo as you, your tampering with the past will cause a terrible time paradox that will result in you never being born. Okay, not really, but it <em>will</em> royally mess things up for anyone else pulling from this repo. Good version control etiquette demands that you <em>not</em> actually change your commit history, but sometimes you look at your last commit and go &ldquo;&hellip;crap, I need to totally change my approach to this feature and <em>none</em> of this code is valid anymore.&rdquo;</p>

<p>While it would be easy to <code>git reset --hard [hash-of-commit-to-return-to]</code> and <code>git push origin master -f</code> and pretend that last commit never happened, the responsible thing to do is <code>git revert [hash-of-commit-to-get-rid-of]</code>&mdash;which makes a <em>new</em> commit that just undoes everything your mistake-commit did. (The two commits are inverses of each other.) Now your repo is back in the state you want it to be in, but you haven&rsquo;t tinkered with timeline at all, leaving all of your collaborators safe from time paradoxes for another day. Good job.</p>

<p>Tune in for the next episode of Git 301<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> (and possibly some retroactive episodes of Git 201 and Git 101). Possible topics to cover (read: things Maia just learned and got excited about): <code>git stash</code> and <code>git stash pop</code>, <code>git cherrypick</code>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Unfortunately, these courses are not currently being offered at the University of Maia. However, you may still enroll in <a href="/blog/2014/09/02/all-about-git/">Theory of Git pt. 1</a>. The University of Maia accepts deposits at all times, regardless of enrollment status<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>The <code>[hash]</code> in <code>git rebase -i [hash]</code> is the commit after which git will start showing you commits. To put it another way, you should give the hash of <em>the newest commit you want to leave as-is</em>. (Instead of finding the exact hash, you can use <code>HEAD^^^…</code> to go back a handful of commits from your most recent one&mdash;assuming that’s where your HEAD is located at the moment. # of ^’s = # of commits that will be shown to you in the rebase.)<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>(There are whispered rumors that you can achieve the same thing even more fastly by making the changes in HEAD that you wanted to have made a few commits ago, adding them and committing with <code>git commit --fixup [hash of commit these changes should have belonged to]</code> and then running <code>git rebase -i [starting hash]</code> (or possibly <code>git rebase -i --autosquash [starting hash]</code>&mdash;<a href="//fle.github.io/git-tip-keep-your-branch-clean-with-fixup-and-autosquash.html">see this post</a>, for instance, for details). But I’ve been playing with this and am finding it more complicated than I’d hoped. Everything goes to pot, for instance, if the edits you wanted to make to a previous commit happen within a line, instead of being a clean line addition or subtraction… So, I’ll figure that one out on a later date and report back!)<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Mixed metaphor alert! Danger, Will Robinson! Abort, abort!!<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taming the Octopress]]></title>
    <link href="http://maiamcc.github.io/blog/2014/09/02/taming-the-octopress/"/>
    <updated>2014-09-02T17:59:40-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/09/02/taming-the-octopress</id>
    <content type="html"><![CDATA[<p>I was messing around with my website yesterday, and trying to make two sub-websites for my &lsquo;Music&rsquo; and &lsquo;Programming&rsquo; hats in a single Octopress install, and I <em>really was going to be on time to my dinner plans</em> except once my website experiment was borked and I tried to restore my previous site&hellip; well, long story short, it was the borked-est, and I spent an hour then and an hour today hunting around with <a href="http://akaptur.github.io/">Allison</a> trying to fix the problem. Turns out that in trying to roll back my changes, I&rsquo;d introduced some discrepancy between my <code>master</code> and <code>gh-pages</code> branches, and I could get around all of this on github with force pushes (<code>-f</code>), but not so easily with actually deploying my site (<code>rake deploy</code>). In the end, I had to go into my Rakefile and add a plus sign somewhere that tells Octopress not to worry whether it&rsquo;s doing fast-forward commits<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> and just commit anyway.<!--more--></p>

<p>So, my website is alive, I have lost hours of my life to the jaws of the Octopress, and I may be switching to Jekyll or Pelican soon. But in the meantime, all of this made me intensely curious about git! I hit up <a href="http://maryrosecook.com/">Mary</a> for a mini-seminar, and I wrote it all out on my blog to make sure I understood it. See: <a href="/blog/2014/09/02/all-about-git/">my post on the inner workings of git</a>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>To quote from the Git docs: &ldquo;When you try to merge one commit with a commit that can be reached by following the first commit’s history, Git simplifies things by moving the pointer forward because there is no divergent work to merge together — this is called a &lsquo;fast forward&rsquo;.&rdquo; Or, look at this <a href="https://sandofsky.com/images/fast_forward.pdf">explanation in pretty pictures</a>. By default, Octopress will only deploy (which includes a commit) on a fast-forward, to avoid accidentally messing up any intermediate branched stuff.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All About Git]]></title>
    <link href="http://maiamcc.github.io/blog/2014/09/02/all-about-git/"/>
    <updated>2014-09-02T17:59:40-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/09/02/all-about-git</id>
    <content type="html"><![CDATA[<p>Here are the fruits of a mini-seminar on git from the inimitable <a href="http://maryrosecook.com/">Mary</a>&mdash;a sketchy portrait of the inner workings of git.</p>

<h3>Git: The Bestest Version Control System with the Worstest UI</h3>

<h4>All of your Git-age lives in the .git folder</h4>

<p>When you run <code>git init</code>, all it does is create a <code>.git</code> folder. That&rsquo;s it! Your machine knows what folders are and aren&rsquo;t git repos by the presence or absence of a <code>.git</code> directory. <code>.git</code> is a hidden folder, so to see it, type <code>ls -a</code>. Whenever you add or commit things to your git repo, they&rsquo;ll get stored in here.<!-- more --></p>

<p>I&rsquo;m now in the directory of my new project, <code>gittest</code>. It contains two files, <code>a</code> and <code>b</code>, and isn&rsquo;t yet a git repo. When I look at what&rsquo;s inside it, it looks like this:</p>

<pre><code>maia$ ls -a
.   ..  a   b
</code></pre>

<p>Let&rsquo;s make it a git repo:</p>

<pre><code>maia$ git init
Initialized empty Git repository in [stuff]/gittest/.git/
maia$ ls -a
.   ..  .git    a   b
</code></pre>

<p>We can see the <code>.git</code> folder! Success! Here&rsquo;s the stuff inside it:</p>

<pre><code>maia$ ls -a
.       HEAD        description info        refs
..      config      hooks       objects
</code></pre>

<h4>Anatomy of a commit: blobs, trees, commits</h4>

<p>The git magic happens largely in the <code>/objects</code> folder. Right now it&rsquo;s got two folders in it that we don&rsquo;t care about, <code>info</code> and <code>pack</code>, which have to do with misc. git magic. But this is where stuff goes when we add/commit it. So let&rsquo;s do that.</p>

<pre><code>maia$ git add -A
maia$ ls .git/objects/
31  e9  info    pack
</code></pre>

<p>31 and e9 are both folders, and each has only one object in it, files with big long gibberish names: <code>31/e9dce72edaeb87f2b007b09230bfd5008da63e</code> and <code>e9/1ace6ef46e2244fc3588bdead8f66b35b20d12</code>. They contain gibberish, which is fancy git compression/encoding of the contents of file a and b. The folder name and file name, taken together, make a big long hash that you can use to recover the original file contents<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> (<code>xx/yyyyyy</code> &mdash;> the hash <code>xxyyyyyy</code>):</p>

<pre><code>maia$ glook e91ace6ef46e2244fc3588bdead8f66b35b20d12
stuff inside file a
</code></pre>

<p>These big long hashes point to files, known in git-land as <code>blobs</code>. Right now these are staged. After we commit them, <code>.git/objects</code> looks like this:</p>

<pre><code>maia$ ls .git/objects/
31  81  a7  e9  info    pack
</code></pre>

<p>We have two new directories in here since our commit, both in the same <code>xx/yyyyyy</code> format where <code>xxyyyyyy</code> is a big long hash thing we can use to access the thing inside. Here&rsquo;s the stuff inside the two new things:</p>

<pre><code>maia$ glook 81ad97f6d112d96081fffc3d3b729828917eff5e
tree a720b6d097b88601c3647be863269539ccc7f64d
author maianess &lt;maia.mcc@gmail.com&gt; 1409698376 -0400
committer maianess &lt;maia.mcc@gmail.com&gt; 1409698376 -0400

first commit
maia$ glook a720b6d097b88601c3647be863269539ccc7f64d
100644 blob e91ace6ef46e2244fc3588bdead8f66b35b20d12    a
100644 blob 31e9dce72edaeb87f2b007b09230bfd5008da63e    b
</code></pre>

<p>The first thing is a <code>commit</code> object. It lists a <code>tree</code> object, author, committer, and commit message (which here is &ldquo;first commit&rdquo;). The second thing is a <code>tree</code> object: it contains references to all files or folders (which would also be tree objects) in the given commit. This tree points to our files a and b (identified by their magic git hashes).</p>

<p>OH, but also, from the second commit onward, commit objects look a little different. They have one additional line that provides the hash of the parent, or the commit directly before that one. I added a file <code>c</code> in directory <code>foo</code>. Here&rsquo;s what my second commit looks like:</p>

<pre><code>maia$ glook 33380bb5dfd152bf72dad49c3e388bccee1a4dfb
tree 0d656c0ff73ea5315ec498acf144df9958e48819
parent 81ad97f6d112d96081fffc3d3b729828917eff5e
author maianess &lt;maia.mcc@gmail.com&gt; 1409709920 -0400
committer maianess &lt;maia.mcc@gmail.com&gt; 1409709920 -0400

second: added directory 'foo'
</code></pre>

<p>To sumarize, the three kinds of objects you&rsquo;ll find in <code>.git/objects</code> look like this.</p>

<h5>Blob, aka file:</h5>

<p><em>[encoded contents of the file]</em></p>

<h5>Commit:</h5>

<p><em>tree: [hash of tree pointing to the files of this commit]<br>
author: [name]<br>
[commit message]</em></p>

<h5>Tree:</h5>

<p><em>[hash of a blog (file)]<br>
[hash of a blog (file)]<br>
[hash of a blog (file)]<br>
&hellip;as many times as you want<br>
[hash of a tree (folder)]<br>
[hash of a tree (folder)]<br>
&hellip;as many times as you want</em></p>

<h4>How a few commits might look</h4>

<p>Git objects contain the hashes of other git objects, which is how the files keep track of each other. Given a commit, you can find the tree representing the root, and from there all of the files and/or folders (represented by trees) that it contains. From that same commit, you can also find it&rsquo;s parent commit, and then <em>its</em> parent, each with their attendant file-states, and so can trace your history back. Let&rsquo;s look at fun diagrams!</p>

<p>Here&rsquo;s my initial commit, when the file tree looks like this, and my git looks like this:</p>

<pre><code>.
├── a
├── b
</code></pre>

<p><img src="/images/git1.png" alt="Git diagram" /></p>

<p>Now let&rsquo;s say I add a directory <code>foo</code>, and a file in foo <code>c</code>, and make changes to <code>a</code> and <code>b</code>. The file tree now looks like this, and my git looks like this:</p>

<pre><code>.
├── a
├── b
└── foo
    └── c
</code></pre>

<p><img src="/images/git2.png" alt="Git guts" /></p>

<p>You see that the main tree, <code>tree2</code>, is pointing directly to <code>a</code> and <code>b</code> but not to <code>c</code>&mdash;rather, it points to <code>tree2.1</code>, which points to <code>c</code>. It looks this way because git uses trees to represent directories; it references files living in subdirectories via trees (representing those directories) referencing those files.</p>

<p>Note that git is still storing (in super-compact encoded form) all previous versions of the files, and given this network of things-that-contain-hashes-of-other-things, we know exactly where to look for any version of any file we want to find. And git only makes the necessary changes. Look what happens if we change <code>a</code> and <code>c</code> but leave <code>b</code> the same:</p>

<p><img src="/images/git3.png" alt="Git guts" /></p>

<p>There&rsquo;s no need to make another representation of <code>b</code>, since <code>b</code> hasn&rsquo;t been changed this commit. Instead, where the tree has to point to <code>b</code>, it points to the hash of the <em>existing</em> version of <code>b</code>.</p>

<p>So, now I understand a biiiiit more about the whacky world of git and just what these cryptic commands are doing! I even understand pointers and branching and detached head state and all that a bit better, but that is perhaps another post for another day. Cheers!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><code>glook</code> is a shortcut I made; the full command to get file contents from one of these hashes is <code>git cat-file -p</code>.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
