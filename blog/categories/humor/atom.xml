<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: humor | Maia McCormick]]></title>
  <link href="http://maiamcc.github.io/blog/categories/humor/atom.xml" rel="self"/>
  <link href="http://maiamcc.github.io/"/>
  <updated>2020-09-27T11:56:24-04:00</updated>
  <id>http://maiamcc.github.io/</id>
  <author>
    <name><![CDATA[Maia Remez McCormick]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Truthiness]]></title>
    <link href="http://maiamcc.github.io/blog/2015/04/16/truthiness/"/>
    <updated>2015-04-16T21:13:19-04:00</updated>
    <id>http://maiamcc.github.io/blog/2015/04/16/truthiness</id>
    <content type="html"><![CDATA[<p>Truthiness in Python is occasionally confusing. Obviously, <code>False</code> is false and <code>True</code> is true, but beyond that, what then?</p>

<p><code>None</code> is always false&ndash;though this doesn&rsquo;t mean that <code>False == None</code>, which is a mistake I made early in my Python career. I was confused by how a nonexistant list and an empty list were both falsey, and somewhere in my mind I thought that they were both <code>None</code> as well. Not so much.<!--more--></p>

<pre><code class="python">&gt;&gt;&gt; a = None
&gt;&gt;&gt; bool(a)
False
&gt;&gt;&gt; b = []
&gt;&gt;&gt; bool(b)
False
&gt;&gt;&gt; bool(a is None)
True
&gt;&gt;&gt; bool(b is None)
False
</code></pre>

<p>A stylistic note here: since <code>None</code> is a singleton (i.e. there exists only one instance of it), the proper syntax is <code>foo is None</code>, rather than <code>foo == None</code>. But I digress.</p>

<p>The empty values of data structures are always falsey. Hence:</p>

<pre><code class="python">&gt;&gt;&gt; bool([])
False
&gt;&gt;&gt; bool("")
False
&gt;&gt;&gt; bool({})
False
</code></pre>

<p>And perhaps most confusingly:</p>

<pre><code class="python">&gt;&gt;&gt; bool(0)
False
&gt;&gt;&gt; bool(1)
True
&gt;&gt;&gt; bool(2)
True
&gt;&gt;&gt; bool(-31.4)
True
</code></pre>

<p>I mean, this makes sense because we know that 0 is false and 1 is true&hellip; but if you think about it, this also means that <code>0</code> is the empty value of an <code>int</code> (which means that <code>0</code> is false, but every other value of <code>int</code> or <code>float</code> is true) This doesn&rsquo;t mean much in Python, of course, but I&rsquo;ve been playing with Go lately, in which you have to initialize your variables before you can do anything with them, and suddenly the idea of an empty value makes a lot more sense (and the empty value for an int is indeed zero).</p>

<p>Conversely, every non-zero value of a data structure is true. That means that a string with stuff in it, a dict. with stuff in it, a list with stuff in it, etc. is true no matter what the stuff is. And so:</p>

<pre><code class="python">&gt;&gt;&gt; hip = False
&gt;&gt;&gt; bool(hip)
False
&gt;&gt;&gt; bool([hip, hip])
True
</code></pre>

<p>Proving conclusively, as we all knew, that <em>hips don&rsquo;t lie</em>.</p>

<p>(<a href="//instantrimshot.com/index.php?sound=rimshot&amp;play=true">Ba-bm-psh</a>.)</p>

<p>Extra credit: do you know what <code>["hip", "hip"]</code> is?</p>

<p>&hellip;(wait for it)&hellip;</p>

<p>It&rsquo;s a <em>hip hip array</em>.</p>

<p>(<a href="//wompwompwomp.com/">Womp womp</a>.)</p>
]]></content>
  </entry>
  
</feed>
