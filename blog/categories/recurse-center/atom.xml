<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: recurse center | Maia McCormick]]></title>
  <link href="http://maiamcc.github.io/blog/categories/recurse-center/atom.xml" rel="self"/>
  <link href="http://maiamcc.github.io/"/>
  <updated>2018-12-06T14:42:20-05:00</updated>
  <id>http://maiamcc.github.io/</id>
  <author>
    <name><![CDATA[Maia Remez McCormick]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Design Principles from Liz]]></title>
    <link href="http://maiamcc.github.io/blog/2014/12/01/design-principles-from-liz/"/>
    <updated>2014-12-01T12:17:19-05:00</updated>
    <id>http://maiamcc.github.io/blog/2014/12/01/design-principles-from-liz</id>
    <content type="html"><![CDATA[<p>The other week, I chatted with the fabulous <a href="//lizstarin.com">Liz Starin</a> and picked her aesthetically-enabled brain about fonts and layouts for websites. Below is some stuff I learned from our design adventures, both wisdom straight from her and stuff I picked up from my experience overhauling fonts and layout: <!-- more --></p>

<ul>
<li>x-height is a unit referring to how tall the letter ‘x’ is in a given font. The larger the x-height, the easier to read on-screen. (Some fonts with small x-heights include Garamond and Futura.)</li>
</ul>


<p><img src="/images/xheight.gif" alt="A shiny graphic about x-height" />
Graphic found in PAPress’s <a href="//www.papress.com/thinkingwithtype/index.htm">Thinking with Type</a> project.</p>

<ul>
<li>serifs are generally the best choice for body text—they tend to be more readable on-screen.</li>
<li>in CSS, you can set <code>line-height</code>, which controls the space between lines of text. Increasing line spacing just a bit can improve readability a <em>lot</em>.</li>
<li>when picking a font, it’s helpful to have some adjectives in mind, rather than blindly scanning around for a font that you like. At the very least, it will give you a place to start.</li>
<li><a href="//www.google.com/fonts">Google Fonts</a> is an incredible thing.</li>
<li>a surprisingly good way to gauge whether a font has the intended effect: imagine you got a wedding invitation written in that font, and think of what that invitation would say about the people getting married. Is that the image you want your website/blog/pony-rental business to convey?</li>
<li>rounded fonts tend to be more playful. Or is it that playful fonts tend to be more rounded? In any case, if you’re looking for something with a “playful” vibe (like I was), rounded-ness is a good feature to start looking for.</li>
<li>you can achieve a lot of variety with the same font. (In fact, you WANT to achieve a lot of variety with the same font—if no variety, your site looks boring, and if variety achieved by different fonts, your site looks like it got sloppy-drunk and made a bunch of poor decisions at the font bar.) Some ways to achieve variety within the same font: varying font weight (CSS: <code>font-weight</code>), case (upper/lower/title—CSS: <code>text-transform</code>), and letter spacing (CSS: <code>letter-spacing</code>), to name a few.</li>
<li>I had (and still have) massive struggles with making favicons that look like anything besides a blob. A feature I hadn’t consciously thought to look at was <em>light/dark contrast</em>. As a quick way of checking, Liz suggests putting the image in grayscale and seeing if it looks decent like that.</li>
<li>some fonting resources: <a href="//alistapart.com/">A List Apart</a> and <a href="//www.smashingmagazine.com/">Smashing Magazine</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Revisiting My First Python Program]]></title>
    <link href="http://maiamcc.github.io/blog/2014/11/20/revisiting-my-first-python-program/"/>
    <updated>2014-11-20T20:36:26-05:00</updated>
    <id>http://maiamcc.github.io/blog/2014/11/20/revisiting-my-first-python-program</id>
    <content type="html"><![CDATA[<p>Back in mid-July, I started at Hacker School, wide-eyed and green and totally freaked out. With only a little bit of Javascript under my belt (and a basically negligible amount of Java, so we&rsquo;re not even counting that), I decided to teach myself Python, slogged halfway through Zed Shaw&rsquo;s <em>Learn Python the Hard Way</em>, then went off to go build something, because I work best by getting my hands dirty. For my first Python project, I wrote <a href="//github.com/maiamcc/studentchooser">studentchooser</a>, a little command-line app requested by a teacher friend of mine, who wanted a fair way to call on her students at random (for putting homework problems on the board, etc.). The idea was that, once a student had been selected, it was <em>less</em> likely that they would be selected again, but not impossible&mdash;the chance of them being picked subsequently would go down, but they would still be in the running.</p>

<p>So, I made a program to do that! You store a list of students for a given class period in what I called the <code>roster</code> (just a dictionary of students). Each <code>Student</code> object keeps track of the number of times it has been selected and its probability of being selected in the next round, as well as whether or not the student is absent.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> It took me a little more than a week to finish, as I was still muddling through Python as I went, and at the end, I had a working final product! A rough one, but a working one! And then I went off on my merry way, doing more and varied projects and slowly building up my Python chops, getting code review, etc. Somewhere along the way, so gradually I didn&rsquo;t even realize it, I began to feel competent, like with enough time to think and maybe a little Googling, I could Python my way out of most problems that were thrown at me. And so today, back at Hacker School for Alumni Thursday and itching to write some code (because I&rsquo;ve been up to my neck in web work for the past few weeks), I opted for a blast from the past, and dived into my very first Python project to poke around, refactor, clean up, and chronicle what I found and what I had learned in the past four months. Here are some findings, accomplishments, and reflections.<!--more--></p>

<h4>Little things I changed</h4>

<p>There were a handful of little things that now strike me as really silly that I changed straight off. Stuff like the realization that text files don&rsquo;t actually need an extension (<code>.txt</code> or otherwise), or that instead of <code>myfile = open("foo.txt", "r"); contents = myfile.read(); myfile.close()</code> I could do the whole thing more cleanly and more efficiently with <code>with open("foo.txt") as myfile:</code>. Similarly, I found loads of places where a little more specificity in variable naming would have made the code hugely easier to read. So given something like, say, <code>for item in roster_list</code>, I changed it to <code>for roster_name in roster_list</code>.</p>

<h4>Gratuitous, &ldquo;useless&rdquo; comments</h4>

<p>There were comments EVERYWHERE. Like seriously, look at the code sample below.</p>

<pre><code class="python">"""Load a roster from file."""

# Boolean saying that this is NOT a new roster
    # i.e. when the program saves data, it will NOT edit the "config" file
global new_roster
new_roster = False

# make list of all rosters in config file
roster_list = get_all_rosters()

if len(roster_list) == 0: # if list is empty, make a new roster instead
    print "No rosters available to load. Make a new one instead."
    make_new_roster()
else: # if config file contains at least one roster to load...
    print "Which roster would you like to load? Enter a number."

    # print a list of available rosters from config file
    for item in roster_list:
        item_index = roster_list.index(item) + 1
        pretty_name = get_pretty_name(item) # (name of the file w/o the file extension)
        print "\t%d. %s" % (item_index, pretty_name)

    while True:
        answer = ask()

        # if possible, turn answer from a string into an int.
        try:
            answer_int = int(answer)
        except ValueError:
            answer_int = None

        # if the answer is an int. in the range of # items in the list...
        if answer_int in range(1, len(roster_list) + 1):
            index = answer_int - 1 # (b/c list as displayed is 1-indexed)

            # save the given filename as the 'current file'
            global current_file
            current_file = roster_list[index]
            print "File to load:", current_file

            # populate the roster using the data in the selected file
            populate_roster(current_file)

            # returns name of the class (= name of the file) for display
            return get_pretty_name(current_file)
        else: # if user input isn't in range or isn't an integer
            print "Sorry, I didn't get that. Try again." # run the loop again
</code></pre>

<p>This comments-every-step-of-the-way thing pops up again and again in studentchooser, and looking at the code now, it seems pretty silly, because I can tell just by looking what most of these lines do&mdash;or at least, I can after rewriting it a bit so that variable names are intuitive, code is readable, etc. So I took a lot of these comments out of the refactored version, but I think it&rsquo;s really important to remember why I put them in in the first place. When I was first writing this code, it wasn&rsquo;t gratuitous, it was <em>super helpful</em> to know step by step exactly what was happening in my code, and to write it down so I couldn&rsquo;t get away with fudging that understanding. This is actually one of the few things I really took with me from <em>Learn Python the Hard Way</em> (see for instance <a href="//learnpythonthehardway.org/book/ex6.html#study-drills">these study drills</a>&mdash;that explaining your code in English line by line is a <em>great</em> tool for understanding and internalizing it! This is something I still keep in my toolbox for unknown/particularly tricky bits of code.</p>

<h4>Now I know better&hellip;</h4>

<p>This project has a) no tests, which make it a giant pain to refactor; b) haphazard architecture, because I was adding features as they occurred to me and I didn&rsquo;t go in with an overarching plan, and so variable names are unclear, patterns of work are inconsistent, bits of the code are held together with tape and bubble gum, etc., and c) poor readability, due in part to the inconsistent naming schemes, in part to the fact that I wasn&rsquo;t prioritizing readability and didn&rsquo;t know how to code for it, and in part to the fact that I thought gratuitous commenting would make up for hard-to-read code. Now I know better, or at least I hope I do. (When I&rsquo;m not lazy,) I write tests for my projects; I outline my projects ahead of time and plan for the features I may add in the future so the architecture stays coherent and I don&rsquo;t have to refactor halfway through (hopefully); and I strive for readability in my code itself (and don&rsquo;t rely on gratuitous commenting to do that work for me).</p>

<h4>New tools, new sensibilities</h4>

<p>I first learned about list comprehensions when <a href="//ballingt.com/">Tom</a> code-reviewed this project for me, though I didn&rsquo;t really understand what they were until much later&mdash;I initially thought they were something cool you could do in a return statement, which now makes me laugh. But now that I actually understand list comprehensions and a bunch of other handy tricks, I can write much tighter, more efficient code. What used to be this:</p>

<pre><code class="python">def get_all_rosters():
    """"Return a list of all of the roster filenames in the config file."""
    all_rosters_file = open(config_file)
    all_rosters_list = []
    for line in all_rosters_file:
        all_rosters_list.append(line.strip())
    all_rosters_list.sort(key=string.lower)
    all_rosters_file.close()
    return all_rosters_list
</code></pre>

<p>&hellip;is now this:</p>

<pre><code class="python">def get_all_rosters():
    """"Return a list of all of the roster filenames in the config file."""
    with open(config_file) as all_rosters_file:
        return sorted([line.strip() for line in all_rosters_file], key=string.lower)
</code></pre>

<p>This code is more compact not only because of the list comprehension (did I mention that list comprehensions are <em>awesome</em>?) but also because I smooshed the sorting into the same line as the list-making. There are other cases where before, I make a list, joined it into a string, and returned the string, but now, I return-a-join-this-list-into-a-string-please-thx-bai, all in one line. The more comfortable I get with Python, the less I need to separate things out and the more able I am to smush things together into fewer lines while still knowing what&rsquo;s going on.</p>

<h4>Global variables, global variables everywhere!</h4>

<p>By far the biggest pain in the neck about this whole program was keeping track of the global variables. I had a few of them floating around: a roster where I stored all of my students, a list of the students (because for some reason I needed to keep a separate list instead of just extracting it from the roster), the filename under which this roster was stored, a boolean telling me whether this was a new roster or not&hellip; And so every time there was a function that needed to interact with and modify, say, the roster, it had to go look for this global variable called <code>roster</code> (I guess because I didn&rsquo;t think to pass in the roster as an argument).</p>

<p>The solution to my dilemna? Classes!</p>

<p><img src="/images/stayclassy.jpg" alt="&quot;Stay classy, San Diego!&quot;" /></p>

<p>I made a <code>Roster</code> class so that methods like <code>choose()</code>, instead of finding the global variable <code>roster</code>, accessing it, changing it, and sending it back into the ether to live its global-variable life, would instead be called as <code>myroster.choose()</code> and act on that specific instance of <code>Roster</code>, and there would be no confusion as to what the method was accessing/modifying. This refactoring solved another handful of problems, because I could decree that file names would be the same as roster names, and so <code>myroster.name</code> would also keep track of our current file name; similarly, <code>myroster.new</code><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> would keep track of whether or not this was a newly created roster. Basically, the <code>Roster</code> class let me get rid of all of my global variables, and now all I have to keep track of is the <code>current_roster</code> object. (Also, now I know better than to make it a global variable; if there are functions that need to access it&mdash;which I have tried to minimize&mdash;I pass it to that function as an argument.) Check out a high-level view of my <code>Roster</code> class to see all the functions contained therein:</p>

<p><img src="/images/roster_class.png" alt="Can't see this? Bummer, I guess you have to go check out my github." /></p>

<h4>In conclusion</h4>

<p>I refactored some code and had a total blast from the past. I decided to see what I could improve without changing any of the functionality, just the code, and I cut my program from 536 lines down to 432, and to 399 if we remove vestigial testing functions. That&rsquo;s about a 20% reduction in length! I also convinced myself that I <em>do</em>, in fact, know how to write Python, and checked in with myself about how far I&rsquo;ve come in the last four months. I obviously have loads more to learn&mdash;and this exercise reminded me of some of the helpful strategies in my toolbox, like temporarily over-commenting to wrap my head around whacky and confusing code.</p>

<p>So, after reflection, my advice to new programmers who are jumping in the deep end like I did? Get your hands dirty. Write lots of code, without necessarily caring about what the finished product looks like&mdash;you&rsquo;ll learn so much more from finishing it and fixing it later than you will from agonizing over it. Get code review and pair with people who know more than you do&mdash;it&rsquo;s how you pick up the stuff that makes you a better programmer. But mostly, don&rsquo;t panic!</p>

<p>(This is a blog-ified version of a Hacker School Thursday Talk presentation given on 11/20/14.)</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>There are some slightly more finicky mechanics going on that you can read about in the README on github if you&rsquo;re really curious, but this is all that&rsquo;s relevant for this post.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>No, that&rsquo;s not a typo; yes, it&rsquo;s a boolean, not a function.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markov Madness, part 2]]></title>
    <link href="http://maiamcc.github.io/blog/2014/10/23/markov-madness-2/"/>
    <updated>2014-10-23T16:13:34-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/10/23/markov-madness-2</id>
    <content type="html"><![CDATA[<p>(If you&rsquo;re confused, see <a href="/blog/2014/10/23/markov-madness/">my previous post on my Markov generator adventures</a>.)</p>

<p>The other thing I got up to today was implementing some sort of (questionable) part-of-speech-based intelligence. The idea was to have a dictionary for parts of speech, in addition to a dictionary of words. Then the work flow would go something like this:</p>

<ol>
<li>start with a random seed</li>
<li>what part of speech should come next? Given the POS&rsquo;s we already have, pick at random one that might follow it.</li>
<li>given the words we have, pick a word that might follow <em>of the correct part of speech</em>. If none exists, repeat from step 2.</li>
</ol>


<p>Now, using word trigrams and POS trigrams, the above process doesn&rsquo;t really add much beyond what using plain &lsquo;ol word trigrams gets you. Could I make something better, though, by using, say, 4-grams or 5-grams of parts of speech?<!--more--></p>

<p>Well&hellip; I&rsquo;ll leave that to you to decide. Here are a bunch of different sample texts from Pride and Prejudice. All are word-gram-3. Some have no POS support, some are POS-gram-3, and some are POS-gram-4. (POS-gram-5, incidentally, doesn&rsquo;t really work&mdash;the requirements on what word you need to come next get so specific that there generally isn&rsquo;t one and the program crashes.) Which of these seem the most sensical? Can you guess which are no-POS, POS-gram-3, and POS-gram-4? (There are three of each.) Make your guesses&mdash;and then, if you want to check yourself, look at the HTML source for answers.</p>

<blockquote><p>1) &lsquo;into a marriage with Miss Bennet. Miss Bingley&rsquo;s pretended regard.&ldquo; &#8220;Would you believe it, Lizzy, that is the most uncomfortable in her favour. Bingley was then disclosed in the same house with the length of his going away when I tell you, Miss Bennet. I send no compliments to Mr. Darcy:&mdash;but let me shift for myself; and, perhaps, if I were agreeing that we should all be there by Mrs. Hurst and Miss Bingley in a prudential light it places Mr. Darcy, by the awkwardness of the letter nor its writer were at the gate in the discharge of his&rsquo;<!--POS-gram = 4--></p>

<p>2) &lsquo;difference of situation and temper. Consider Mr. Collins&rsquo;s picture of a sort of man; and of late it has not time to reply, but hurrying instantly to her so expressively, and shook hands with great enjoyment; and the mere ceremonious salutation attending his entrance. Anxious and uneasy, the period to which you have pleasure,&ldquo; said Bingley; &#8220;and I am in earnest. I speak plainer? Do not wish me such an assurance of it, that the match with a bow of superior society; but I know very well able to do it, she turned suddenly towards him and Mr. Darcy, &#8220;There&rsquo;<!--POS-gram = 3--></p>

<p>3) &lsquo;from my thoughts.&ldquo; &#8220;When they all are.&rdquo; &ldquo;All young ladies were ready enough to determine her feelings in the time. Good gracious! when I have always seen a great deal more than I might have sufficient charms; and though the probability of error, and seek to recommend them,&rdquo; replied he; &ldquo;they are married!&rdquo; Elizabeth read on: &ldquo;I have no wish of seeing him almost for the felicity which a pair of fine eyes in amazement, but was too happy, however, and if he sees enough of Bingley&rsquo;s being withheld from seeing Jane, she seriously hoped he might change his mind&rsquo; <!--no POS support--></p>

<p>4) &lsquo;ever have courage to shew Mrs. Gardiner&rsquo;s former residence, and where she had listened to her eyes, envied everyone to whom they would have been impossible for us to Miss Darcy, who had only set that down as soon as they used to be privileged to whisper to Elizabeth, &ldquo;I hope not so. Painful recollections will not have forgotten where she was ready enough to make her resigned. As for my impertinence?&rdquo; &ldquo;For the liveliness of your own. But we are better acquainted&mdash;&rdquo; He was resolutely silent, however, and, from a circulating, he started back, and begging pardon, protested&rsquo; <!--no POS support--></p>

<p>5) &lsquo;months. Of having another daughter married to Mr. Bingley. It was at length return home; and she was to bring it in my own doing, and I thought only of the peace of the world, must make Hunsford extremely dull to a real, strong attachment. Pray, how violent was Mr. Bingley&rsquo;s chaise to go with him; and unwilling, for her sister&rsquo;s sake, to provoke him. Elizabeth was the son of old Wickham, the late perverse occurrences had thrown on many of the largest folios in the neighbourhood.&ldquo; &#8220;Oh! no&mdash;it is not so handsome as Wickham; or, rather, he has not&rsquo;<!--POS-gram = 4--></p>

<p>6) &lsquo;Darcy&rsquo;s praise occupied the chief of it. Can I speak plainer? Do not let your fancy run away with you. You will be an object of it, but Colonel Fitzwilliam was no more than she knew it myself, as it had not yet been able to enter the &mdash;shire. She had no other reply to this effect: &ldquo;I have been to persuade him against returning into Hertfordshire, anxiously renewing them at any time, etc. etc.; and if not, it would be gone in five minutes, you meant it to another, not to an end by exclamations and inquiries about the&rsquo;<!--POS-gram = 3--></p>

<p>7) &lsquo;but tell Lydia she shall have as much a debt of gratitude cannot enough acknowledge. By this time have been too pleasantly engaged to my fair cousins, though my brother left us yesterday, he imagined that we have found some resemblance of character to love each other in large mixed parties, it is the man! Now, Lizzy, I hardly know myself what it is no occasion for such a man would satisfy me. We will settle so quietly, and live in my power, I am very far from suspecting that she was discontented, she fancied that praise of himself, of&rsquo; <!--no POS support--></p>

<p>8) &lsquo;the opportunity of saying: &ldquo;Is your sister make such an evil. Human nature is particularly prone to it, and sometimes with playful gaiety, replied to her housekeeping, her parish and her uncle had been her firmest opinion. Her keenest attention was suddenly roused by the middle of June, Kitty was too much sense to recommend myself to hope the best, in accepting a man on the subject. This will never be in want of money. Younger sons cannot marry where they were grieved, how shocking it was to distribute her presents and describe the newest fashions. When this information was&rsquo;<!--POS-gram = 3--></p>

<p>9) &lsquo;the pleasantness of the park,&ldquo; he replied, &#8220;it has been my profession&mdash;I was brought up by him alone, was such as did think, than such a way.&rdquo; &ldquo;I can readily believe,&rdquo; answered he gravely, &ldquo;that reports may vary greatly with respect to me; and as she had not by any particular person, for though the uncomfortable feelings arising from all restraint, his life that, instead of a man of five-and-twenty. His air was grave and stately, and his relation of my nephew! Unfeeling, selfish girl! Do you think of themselves before anybody and everybody! If my vanity had taken on&rsquo;<!--POS-gram = 4--></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markov Madness, part 1]]></title>
    <link href="http://maiamcc.github.io/blog/2014/10/23/markov-madness/"/>
    <updated>2014-10-23T15:52:47-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/10/23/markov-madness</id>
    <content type="html"><![CDATA[<p>Man, I&rsquo;ve hardly written code in <em>three whole weeks!</em> Such a strange feelings, after 3 solid months of coding. Anyway, back at Hacker School for the day, and with my OPW application in, I&rsquo;ve been itching to actually <em>write some code</em>, so I revisited my old <a href="https://github.com/maiamcc/markovgen">Markov generator</a> project, which takes a training corpus and generates psuedo-random texts in the style of that corpus.<!--more--></p>

<p>I&rsquo;ve tried a few different tacks today for getting texts that actually resembled English and not just word-soup. The first was using n-grams of varying n&rsquo;s when generating my texts[^1]. n = 1 is just random words and not worth testing. n = 2 is very nearly gibberish. n = 3 and n = 4 are the sweet spot of sensical-yet-random text; when we get to n = 5, it tends to be several verbatim sentences from the corpus patched together in odd ways, and at n = 6, it is almost consistently exact quotes from the text. At a guess, in more quote-unquote complex texts (i.e., those with more unique words) n = 5 will be closer to verbatim, and in texts with more common words, there will be more room for deviation from any pattern that the generator falls into, and thus n = 5 will be distinct from the original text. Here are generated texts using n-grams of increasing n, from <em>Pride and Prejudice</em>.</p>

<p>n = 2:</p>

<blockquote><p>&lsquo;to-morrow; and as she could not do. He looked towards clearing him, Charlotte Lucas, when you an admiration will afford, and the establishment were said Miss Darcy was at no reason away, where Mr. Bingley was meant by me. I am sure,&ldquo; she had scarcely ever mentioned to her, &#8220;these offenses might have the temptation, added, &#8220;that my manner in the walk to Mr. Darcy liked him.&rdquo; &ldquo;But it was diffuse in money which had ended only could listen, therefore, pardon for having very day confirms my dear,&rdquo; said by their present party; but their separation. To these three or&rsquo;</p></blockquote>

<p>n = 3:</p>

<blockquote><p>&lsquo;been used to want to speak with composure when she ceased speaking, &ldquo;I have just received from Mr. Collins.&rdquo; &ldquo;From Mr. Collins! and what can he mean by apologising for being simply dressed. She likes to have on the instrument, Eliza, and you ought to have on the length of his description of Jane. She felt it incumbent on her side. But I am in such awe of her wishes. Their sister&rsquo;s wedding day arrived; and Jane seem so wholly unconnected with any other man it would go. But he found, in reply to his ideas of happiness! But it&rsquo;</p></blockquote>

<p>n = 4:</p>

<blockquote><p>&lsquo;was his conviction of its being heard. Elizabeth soon saw that she was not very differently engaged. &ldquo;There is also one other person in the room. Colonel Fitzwilliam seemed really glad to see them; he had felt the smallest interest, and from none received either attention or pleasure. Miss Bennet he acknowledged to be pretty, but she smiled too much. Mrs. Hurst and Miss Bingley was uncivil to her, and she felt how little would be gained by her attempting to pursue them. Calling back the servant, therefore, she commissioned him, though in so breathless an accent as made her&rsquo;</p></blockquote>

<p>n = 5</p>

<blockquote><p>&lsquo;some manner connected with the letter he held. It suddenly struck her that it might be from Lady Catherine; and she anticipated with dismay all the consequent explanations. She followed her father to the fire place, and they both sat down. He then said, &ldquo;I have received a letter this morning that has astonished me exceedingly. As it principally concerns yourself, you ought to know its contents. I did not know what to think.&rdquo; &ldquo;She is a very good kind of woman, not too clever to be a valuable neighbour to Mrs. Bennet. They had several children. The eldest of&rsquo;</p></blockquote>

<p>Compare that to n-grams of increasing n from <em>Harry Potter and the Chamber of Secrets</em>. There&rsquo;s the same pattern of higher n&rsquo;s both making more sense and being closer to the original text, but we don&rsquo;t start getting verbatim text excerpts until n = 6.</p>

<p>n = 2:</p>

<blockquote><p>&lsquo;knock people knew what Ginny out, reflecting the train harder than his hand- picked it into a nobody heard him - three of that your fault,&ldquo; retorted Draco. &#8220;The diary,&rdquo; said in the stairs. &ldquo;Remember, boy was always top Ron had in Transfiguration. &#8220;I don&rsquo;t care, he saw the clouds and George must&rsquo;ve opened the elf came back in the pitch - the wiser -&rdquo; &ldquo;But, Professor,&rdquo; said Harry had never touched Harry&rsquo;s own free rein from his feet climbing through the full of whom were trickling down to turn up off the ground with a beacon of excitement gripped&rsquo;</p></blockquote>

<p>n = 3</p>

<blockquote><p>&lsquo;Near sunset, Fred and George were now crammed into boxes on the side road where the photographer had stepped on what to do. &ldquo;Not lost are you, Myrtle?&rdquo; said Hermione as the Weasleys slouched outside with Harry behind them. &ldquo;No, he was doing something and I, um, I asked her not to smile. And Lockhart was looking furious, and as he tried to put himself under arrest. It drives Mum mad.&rdquo; &ldquo;That&rsquo;s the main road ahead, but their street was empty. &#8220;Okay,&rdquo; he said. &ldquo;Id better get going, Hagrid, it&rsquo;s Transfiguration next and I&rsquo;ve got -well, I think he did,&rdquo;&rsquo;</p></blockquote>

<p>n = 4</p>

<blockquote><p>&lsquo;say no to a large bottle of something labeled Skele-Gro. &ldquo;You&rsquo;re in for a rough night,&rdquo; she said, pouring out a steaming beakerful and handing it to them. &ldquo;I told your dad how to use a telephone last summer - he&rsquo;ll know. Call me at the orphanage she lived just long enough to copy down a name or date, then falling asleep again. He had made up his mind what he was going to tear it. While Ron kept watch he tugged and twisted, and at last, after several tense minutes, the paper came free. It was a nightmare -&rsquo;</p></blockquote>

<p>n = 5</p>

<blockquote><p>&lsquo;side of the field. &ldquo;They love it here &hellip;. Dad&rsquo;s too soft with them; he thinks they&rsquo;re funny &hellip; .&rdquo; He swept off his plumed hat and bowed them inside. It was an incredible sight. The dungeon was full of hundreds of pearly-white, translucent people, mostly drifting around a crowded dance floor, waltzing to the dreadful, quavering sound of thirty musical saws, played by an orchestra on a raised, black-draped platform. A chandelier overhead blazed midnight-blue with a thousand more black candles. Their breath rose in a mist before them; it was like stepping into a freezer. &ldquo;Shall&rsquo;</p></blockquote>

<p>n = 6</p>

<blockquote><p>&lsquo;into the station. Harry had caught the Hogwarts Express the previous year. The tricky part was getting onto platform nine and three-quarters, which wasn&rsquo;t visible to the Muggle eye. What you had to do was walk through the solid barrier dividing platforms nine and ten. It didn&rsquo;t hurt, but it had to be done carefully so that none of the Muggles noticed you vanishing. &ldquo;Percy first,&rdquo; said Mrs. Weasley, looking nervously at the clock overhead, which showed they had only five minutes to disappear casually through the barrier. Percy strode briskly forward and vanished. Mr. Weasley went next; Fred and&rsquo;</p></blockquote>

<p>Fun bonus: infinite loop!</p>

<blockquote><p>&ldquo;as much as possible prevented her husband from pressing her; but Mr. Collins could not conceal his apprehension of Lady Catherine&rsquo;s being rather displeased by her staying at home. When they were gone, Elizabeth, as if intending to exasperate herself as much as possible prevented her husband from pressing her; but Mr. Collins could not conceal his apprehension of Lady Catherine&rsquo;s being rather displeased by her staying at home. When they were gone, Elizabeth, as if intending to exasperate herself as much as possible prevented her husband from pressing her; but Mr. Collins could not conceal his apprehension of Lady&rdquo;</p></blockquote>

<p>[^1] an ngram is a group of n words considered at a time, where the first n-1 words key to the last word. So for instance, if I&rsquo;m working with tri-grams (n = 3) and the phrases &ldquo;it is a,&rdquo; &ldquo;it is silly&rdquo;, and &ldquo;it is Frank&rdquo; appear in my corpus, when my corpus gets loaded into a big dictionary, <code>[('it', 'is')]</code> will key to <code>['a', 'silly', 'Frank']</code>. Then, when I&rsquo;m generating random text and I already have &ldquo;it is&rdquo;, I can look in <code>mydict[('it', 'is')]</code> for words that might possibly follow that phrase. I then pick one at random, stick it onto the end of my text (say, &ldquo;it is Frank&rdquo;) and repeat (`mydict[(&lsquo;is&rsquo;, &lsquo;Frank&rsquo;)] &mdash;> [&lsquo;sick&rsquo;, &lsquo;angry&rsquo;,&lsquo;the&rsquo;]).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lessons in Default Function Arguments]]></title>
    <link href="http://maiamcc.github.io/blog/2014/09/29/lessons-in-default-function-arguments/"/>
    <updated>2014-09-29T18:16:56-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/09/29/lessons-in-default-function-arguments</id>
    <content type="html"><![CDATA[<p>Today on &ldquo;Bugs that everyone already knew about but Maia found out about for the first time so will write up anyway&rdquo;, we&rsquo;re going to talk about the perils and pitfalls of using mutable objects as default arguments for functions in Python. (This episode brought to you by Maia&rsquo;s contradance database and the letter Y.)</p>

<p>No, nothing went wrong in my code that caused me to learn this lesson, but multiple code reviewers raised red flags about this line in my code: <code>def resolve_query_dict(d, moves_list=Move.objects.all())</code>. <code>Move.objects.all()</code>, by the way, is a fancy Django function that returns a list of all of the <code>Move</code> objects in your database, and since I would likely never be running this code over an extended period of time while things were added to the database, accidentally freezing the value of &ldquo;all of the moves in my database&rdquo; wouldn&rsquo;t have really been an issue, but the dangers of writing code like the above are still whacky and interesting. Basically, odd things happen when you use mutable objects or called functions as default variables in your functions.<!-- more --></p>

<p>Let&rsquo;s define a helper function:</p>

<pre><code class="python">&gt;&gt;&gt; def make_a_list():
    ... print "Making a list..."
    ... return [1,2,3]
</code></pre>

<p>and then some random function that takes a (called) function as a default value:</p>

<pre><code class="python">&gt;&gt;&gt; def list_length(mylist = make_a_list()):
...     return len(mylist)
Making a list...
</code></pre>

<p>The thing that&rsquo;s odd about the code that we just ran is that it printed &ldquo;Making a list&hellip;&rdquo;, which implies that the <code>make_a_list</code> function got <em>called</em>, even though all we did was assign it as a default variable. Interesting. Now what happens if we run <code>list_length</code>?</p>

<pre><code class="python">&gt;&gt;&gt; list_length([1,2,3,4,5])
5
&gt;&gt;&gt; list_length()
3
</code></pre>

<p>If you pass it an argument, it runs just as you&rsquo;d expect it to. If you don&rsquo;t pass it arguments, it returns the value you&rsquo;d expect, but notice that it doesn&rsquo;t print &ldquo;Making a list&hellip;&rdquo;&mdash;which implies that it hasn&rsquo;t run the <code>make_a_list</code> function! The conclusion we draw here is that when you use a function as a default argument, that function is called (and the value bound) <em>at assignment</em>, <em>not</em> whenever you run its container function. So that means that if you want your default-value-function to run every time you call its container function&hellip; well, it won&rsquo;t! If you needed more convincing:</p>

<pre><code class="python">&gt;&gt;&gt; from random import randint
&gt;&gt;&gt; def plus_one(num=randint(1,1000)):
...     return num+1
&gt;&gt;&gt; plus_one(5)
6
&gt;&gt;&gt; # that worked as we expected it to
&gt;&gt;&gt; plus_one()
42
&gt;&gt;&gt; plus_one()
42
&gt;&gt;&gt; plus_one()
42
&gt;&gt;&gt; plus_one()
42
&gt;&gt;&gt; plus_one()
42
&gt;&gt;&gt; plus_one()
42
</code></pre>

<p>Hmm. It would appear that we aren&rsquo;t getting a new random number every time we run this function.</p>

<p>That&rsquo;s not the only weird thing about default arguments, though. Things can get messy even when you&rsquo;re not setting functions as default args&mdash;really, all it takes to break things is a mutable object.</p>

<pre><code class="python">&gt;&gt;&gt; def append_one(mylist = []):
...     mylist.append(1)
...     return mylist
&gt;&gt;&gt; append_one()
[1]
&gt;&gt;&gt; append_one()
[1, 1]
&gt;&gt;&gt; append_one()
[1, 1, 1]
&gt;&gt;&gt; append_one()
[1, 1, 1, 1]
&gt;&gt;&gt; append_one()
[1, 1, 1, 1, 1]
</code></pre>

<p>As with the function-as-default-arg example, your default argument binds <em>at definition</em>&mdash;and what&rsquo;s more, it binds to a specific object in memory. So every time you call <code>append_one</code>, you&rsquo;re not appending one to a new empty list, you&rsquo;re appending one to <em>that exact empty list that you created in memory, which now has more and more things in it</em>. It&rsquo;s the same as if you passed in an existing, named list as your default:</p>

<pre><code class="python">&gt;&gt;&gt; stuff = [1,3,5,7]
&gt;&gt;&gt; def append_one(mylist = stuff):
...     mylist.append(1)
...     return mylist
&gt;&gt;&gt; append_one()
[1, 3, 5, 7, 1]
&gt;&gt;&gt; append_one()
[1, 3, 5, 7, 1, 1]
&gt;&gt;&gt; append_one()
[1, 3, 5, 7, 1, 1, 1]
</code></pre>

<p>Perhaps it&rsquo;s a bit more intuitive this way, but the exact same thing is happening in the previous example; the function is modifying a distinct object in memory, whether it was named before it got passed as a default argument or not.</p>

<p>Whacky fun! And a valuable lesson learned: <em>don&rsquo;t use mutable objects or functions as default values in your functions</em> unless you want a whole lot of hilarious code hijinks. (Which, hey, maybe you do, no judgments here!)</p>
]]></content>
  </entry>
  
</feed>
