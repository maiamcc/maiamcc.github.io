<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Maia McCormick]]></title>
  <link href="http://maiamcc.github.io/atom.xml" rel="self"/>
  <link href="http://maiamcc.github.io/"/>
  <updated>2018-10-31T17:16:40-04:00</updated>
  <id>http://maiamcc.github.io/</id>
  <author>
    <name><![CDATA[Maia Remez McCormick]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How Windmill Prepped for GothamGo]]></title>
    <link href="http://maiamcc.github.io/blog/2018/05/29/how-windmill-prepped-for-gothamgo/"/>
    <updated>2018-05-29T20:29:12-04:00</updated>
    <id>http://maiamcc.github.io/blog/2018/05/29/how-windmill-prepped-for-gothamgo</id>
    <content type="html"><![CDATA[<p>(Cross-posted from <a href="//medium.com/windmill-engineering/how-windmill-prepped-for-gothamgo-3308020d70b">Windmill&rsquo;s blog</a>.)</p>

<p>At the end of April, Windmill (all five of us) trekked down to GothamGo to learn things, meet people, and pitch our product. As Silver Level sponsors, we had our very own little table on the first floor; it was the perfect chance to pitch our fledgling product, make connections, and figure out what developers might want from us. The only question was: how?</p>

<p>We’re a brand-new team, and GothamGo was a great excuse to do some important work. In preparation for the conference, we talked, we brainstormed, we aligned on our values and objectives and product goals; and then took the results of those conversations and ran with them, building our booth and our pitch from the bottom up.</p>

<h2>The Booth (Objectives and Values)</h2>

<p>The first order of business was: <em>what was our booth going to look like</em>? We asked this question of the team, and immediately realized that we first had to tackle our zeroth order of business: <em>what were our <strong>objectives</strong> for the conference</em>? In other words, what did we as a company hope to get out of GothamGo? Our answers would shape how we interacted with attendees, and how we decked out our booth to encourage those interactions.</p>

<!-- more -->


<p>We decided that the primary things we were looking to get out of this conference were:</p>

<ul>
<li><strong>A pulse on developer needs.</strong> (What are the pain points of people’s current dev tools? What do they want their magic dev tools solution to do for them?)</li>
<li><strong>Product feedback</strong>. (Is our current incarnation of Windmill the right product to be building?)</li>
<li><strong>Design partners.</strong> (These are larger organizations interested in adopting Windmill for their codebase, who will work with us to refine our product for them — and by extension, for other users.)</li>
</ul>


<p>Additionally, though not our primary focus, nice-to-have conference benefits included:</p>

<ul>
<li>Buzz around our product</li>
<li>Alpha users who would play with Windmill and give us feedback</li>
<li>Rad developers interested in joining our team</li>
</ul>


<p>With a framework in mind, we then turned to booth design.</p>

<p>Last year at GothamGo, our founders went full science fair, with great success.</p>

<div>
    <img src="https://cdn-images-1.medium.com/max/4000/0*M074ur4hu5eHFvxJ.jpg" alt="Nick and Dan at GothamGo ‘17">
    <p class="caption">Nick and Dan at GothamGo ‘17</p>
</div>


<p>This year we wanted something with a similar vibe — not a big fancy banner with our company name on it, but something more personal and more interesting.</p>

<p>Instead of throwing ideas out into the void, though, we decided to focus our thinking. What did we like about last year’s booth that we were trying to replicate? What did we want this year’s booth to communicate? We brainstormed, and came up with some <strong>values</strong> that we wanted our booth to reflect:</p>

<ul>
<li>DIY (&ldquo;we got our hands dirty making this booth instead of just buying a pretty banner&rdquo;)</li>
<li>Authentic (&ldquo;we’re being our excitable, nerdy selves and we’re <em>really psyched about dev tools, y’all!&rdquo;</em>)</li>
<li>Approachable</li>
<li>Sparks conversation</li>
<li>Communicates the stage of our startup (i.e. early. Very early.)</li>
<li>Empathetic</li>
</ul>


<p>We started tossing out ideas for booth themes in keeping with these values, but the breakthrough actually came when we took a slightly different tack: rather than &ldquo;what do we want our booth to <em>be</em>,&rdquo; we considered, &ldquo;how do we want our booth to hook passersby?&rdquo; The very first idea that got proposed was: &ldquo;let’s let people complain about their dev tools. People <em>love</em> complaining about their dev tools.&rdquo; The team loved it, and from there, it was jut a hop, skip, and a jump to Lucy’s &ldquo;Psychiatric Help 5¢&rdquo; stall from Peanuts.</p>

<div>
    <img src="https://cdn-images-1.medium.com/max/4000/0*Yq9VvVfMsajAS2z8.jpg" alt="The final product!">
    <p class="caption">The final product!</p>
</div>


<p>We spent some time spitballing ideas, and declared a sub-committee to come up with a more concrete proposal. (It turned out that this was a key move — brainstorming is great for generating high-level ideas, but trying to make specific decisions in a committee of 5+ is a recipe for disaster.) With the fruits of this meeting in mind, our sub-committee set out to decide exactly what the booth would look like, and what swag/shiny things/interactive bits we would have to spark conversation and move towards our objectives.</p>

<p><strong>Keeping It Lean</strong></p>

<p>Our sub-committee brought back a booth proposal with a bunch of neat stuff, including:</p>

<ul>
<li>a &ldquo;tip jar&rdquo; where people could optionally put their 5¢ for donation to Women Who Go</li>
<li>a monitor with a screencast of our alpha product in use</li>
<li>a &ldquo;make your own T-shirt&rdquo; station</li>
<li>an iPad and keyboard for folks to fill out a contact form (okay, maybe this one is par for the course)</li>
</ul>


<p>…and more! In the end though, we decided to strike almost all of their proposals.</p>

<div>
    <img src="https://cdn-images-1.medium.com/max/4000/0*hWp3mx7TMlqSWcug.jpg" alt="The initial booth proposal. Note a handful of things already crossed out.">
    <p class="caption">The initial booth proposal. Note a handful of things already crossed out.</p>
</div>


<p>Any of the things suggested would be great booth components and conversation starters in their own right; but all together, it was just too much! If someone came up to our booth, we <em>didn’t</em> want to overwhelm them with choice; instead, we wanted a booth that funneled visitors into our desired modes of interaction. In the end, we opted to keep our booth lean, with only three major components: the psychiatry booth sign itself (&ldquo;Dev Tools Help 5¢&rdquo;); the screencast of Windmill Alpha in action; and a handout asking people for dev tools horror stories and directing them to our contact form.</p>

<h2>The Pitch</h2>

<p>The product we’re trying to build is a little new and a little amorphous. Given that, and the fact that 40% of our team had joined within the previous months, we took GothamGo as an opportunity to align on our vision of Windmill and to practice pitching our product.</p>

<p>To kick off our practice session, our co-founders (by far our most experienced pitches) shared some of their one-sentence product hooks. (We don’t have a clean-cut &ldquo;<a href="//itsthisforthat.com/">Windmill is like {Uber} for {cats}</a>&rdquo;, but there are a handful of pithy phrases that work well to explain our product and spur further conversation.) Armed with these one-liners, we all role-played pitching Windmill to a conference attendee, with the rest of the team giving feedback. Here are some useful guideposts that emerged from this exercise:</p>

<ul>
<li><p><strong>Your opening line can be brief.</strong> I had previously bent over backwards trying to explain Windmill in one sentence, but to my surprise, the best pitch-starters were the shortest: say, &ldquo;Windmill makes development tools that give you faster answers to better questions.&rdquo; The purpose of the opening line was <em>not</em> to explain our entire product in one go; it was to catch interest and spark discussion.</p></li>
<li><p><strong>Let the pitch-ee steer the pitch.</strong> If you’re talking to a real containers nerd, of <em>course</em> you want to seize the opportunity to brag about your container magic. And conversely, if you’re talking to someone whose biggest pain point is iOS integration testing, if you spend 5 minutes talking to them about deploying to Kubernetes, you’re wasting their time. However, if you take their signals and talk about the things they seem most interested in, you hold their interest better and have a greater chance of getting their buy-in. And in order to customize your pitch, you probably want to…</p></li>
<li><p><strong>Ask your pitch-ee questions about their situation/use case</strong>. This is by far the best way to make sure you’re pitching <em>to</em> someone and holding their interest, instead of rambling about generic stuff that’s not of interest to them.</p></li>
<li><p>Corollary point: <strong>probe to get at their concerns and reservations, and address them directly</strong>. If you’re feeling resistance to your pitch, figure out <em>why — </em>either you can address your pitch-ee’s concerns and explain how your product is in fact right for them, or you come away with a new growth area for your product.</p></li>
</ul>


<p>We came away from our practice session more comfortable in our pitch, and more unified in our product vision. And because of our thorough prep work — for pitch, booth, and conference objectives alike — we were able to go into GothamGo prepared, aligned, and ready to make some new friends on behalf of Windmill.</p>

<p>Want to see the fruits of our pitch-practicing? Luckily, it’s easy to get a first-hand demonstration: hit us up at <a href="//twitter.com/windmill_eng">@windmill_eng</a> or <a href="mailto:hi@windmill.engineering">drop us an email</a>!</p>

<p><em>Thanks to <a href="https://twitter.com/geekygirlsarah">Sarah Withee</a> and <a href="https://twitter.com/rustbeltrae">Rae Krantz</a> for their feedback on this post!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Preparing for Technical Interviews]]></title>
    <link href="http://maiamcc.github.io/blog/2018/03/25/interview-prep/"/>
    <updated>2018-03-25T15:17:41-04:00</updated>
    <id>http://maiamcc.github.io/blog/2018/03/25/interview-prep</id>
    <content type="html"><![CDATA[<p>Life update time! After three great years at <a href="https://engineering.shopspring.com/">Spring</a>, I&rsquo;m moving on to my next adventure; in April, I&rsquo;ll be joining <a href="https://windmill.engineering/">Windmill</a> as their fifth engineer, where I&rsquo;ll be building cloud-based developer tools, as well as company culture.</p>

<p>The most frequent question I&rsquo;ve got from people upon telling them this news (after &ldquo;what the heck is Windmill?!&rdquo;) is, &ldquo;How did you prepare for your interviews?&rdquo; (And all the related questions: &ldquo;How long did you prep for?&rdquo;, &ldquo;What were your on-sites like?&rdquo;, etc.)</p>

<p>This post aims to answer those questions. Here&rsquo;s some detail on my own personal interview prep and interview process. Of course, everything here should be taken with a grain of salt, as all of this will vary widely based on you and your skills, the sorts of companies you&rsquo;re interviewing for, etc.</p>

<!-- more -->


<h1>How did you prep?</h1>

<h2>Resume/Soft Skills</h2>

<p>The first thing I did (because it felt like the least intimidating way to ease into the job search process) was to update my resume. I made a big list of all the things I&rsquo;d done at work since I last updated my resume, then went back over that list, pulled out the most compelling and impressive items, and wrote bullets for them. I also got several rounds of feedback from friends and collegues in the tech industry. You can never have too many eyes on your resume.</p>

<p>I also practiced talking about my work and my projects, and answering so-called &ldquo;soft skills&rdquo; questions. Cracking the Coding Interview has a handy grid to help you organize your thoughts about your projects:</p>

<p><img src="http://maiamcc.github.io/images/ctci-interview-prep-matrix.png" alt="From Cracking the Coding Interview (4th ed.), p. 23" /></p>

<p>I <em>didn&rsquo;t</em> physically fill this out, because I&rsquo;m lazy&mdash;but I <em>did</em> go over all of this in my head, making sure I had an idea of the interesting, challenging, and conversation-worthy bits of the major bullet points on my resume.</p>

<p>I&rsquo;ve been interviewing candidates at work for 2ish years now, so I have some idea of the questions that get asked in interviews and could think ahead about my answers to those<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>: but by far the most useful prep I did here was to have people mock-interview me. Having to answer these questions <em>out loud</em> forced me to think about them more concretely, and I could also get feedback on the things that I was saying that were more or less impressive, red-flag-y, etc. (&ldquo;If they ask you about conflicts with coworkers, tell story A, not story B, cuz in story A you resolved your disagreement, and in story B you were right and your coworker wrong and the system broke because of it, but even though you were right, it still resulted in the system breaking.&rdquo;)</p>

<h3>Preparing YOUR Interview Qs</h3>

<p>Another thing worth doing is preparing a list of questions that <em>you</em> want to ask <em>of your interviewers</em> to get a better idea about the company you may possibly work for. The better your questions for them, the more insight you can get into their workplace&mdash;and the more prepared you are with these questions, the less dumb you look in front of your interviewer.</p>

<p>I read a bunch of &ldquo;questions to ask in job interviews&rdquo; articles, grilled my friends, and put together a big doc of the questions I thought were the most informative. Some useful blog posts on the topic:
* <a href="https://jvns.ca/blog/2013/12/30/questions-im-asking-in-interviews/">https://jvns.ca/blog/2013/12/30/questions-im-asking-in-interviews/</a>
* <a href="http://juliepagano.com/blog/2015/08/15/job-search-retrospective/#interview-questions">http://juliepagano.com/blog/2015/08/15/job-search-retrospective/#interview-questions</a>
* <a href="http://lizabinante.com/blog/getting-hired-without-getting-burned/">http://lizabinante.com/blog/getting-hired-without-getting-burned/</a></p>

<h2>Algorithms</h2>

<p>To brush up on my algos, I worked through <a href="http://interactivepython.org/runestone/static/pythonds/index.html">Problem Solving with Algorithms and Data Structures using Python</a>, making sure to ask questions about/dig deeper into anything I didn&rsquo;t understand. Most of this I skimmed b/c I was already familiar with it, but I made sure to note the architypal problems for each data type (&ldquo;oh, it&rsquo;s an X problem? You should use data structure Y!&rdquo;), and paid special attention to trees and graphs cuz they&rsquo;re my weak spot.</p>

<p>And then it was just looots of practice problems. Some from Cracking the Coding Interview, some from <a href="https://leetcode.com/">LeetCode</a>, and as much practicing with friends as I could get. The best is to get friends who actually interview developers, because they know the ins and outs of their questions better, but even just having a friend mock-interview you with CtCI or LeetCode questions will do.</p>

<p>Practicing algos Qs on your own just thinking through the solution, or writing the solution on a computer, is good. Writing it out on paper/a whiteboard is better. Practicing with a person (in a mock interview sort of capacity, where you&rsquo;re timed, they&rsquo;re giving you hints where necessary but pushing you to explain yourself) is best.</p>

<h2>System Design</h2>

<p>Like with algos, mostly this was a matter of practice&mdash;getting friends to mock interview me with system design quesitons. I also went over some of the systems I built at work and made sure that I understood the technical choices and trade-offs there, so I could talk intelligently about it in interviews.</p>

<p>A piece of advice I got here (which I didn&rsquo;t end up taking, and it all turned out okay, but I probably should have done this anyway) was to talk to folks at other companies about their system architecture. My Achilles&#8217; heel in system design interviews has always been that I&rsquo;m only really familiar with the one or two paradigms I&rsquo;ve worked in&mdash;talking to others&#8217; about <em>their</em> paradigms would have been super useful, and given me a lot more ideas to draw on.</p>

<h1>How long did you prep for?</h1>

<p>I took two weeks off of work around Christmas/New Years, and was doing a bit of prep work every day&mdash;sometimes several hours of reading or practice interviews, sometimes 15 minutes researching a company or brushing up my resume, but I tried to do <em>something</em> every day. After that, I went back to my day job and I did a bit whenever I could&mdash;some problems on LeetCode in the evening, or a practice problem coffee date with a friend over the weekend. After a few weeks of occasional practice interviews, I felt pretty prepped. My process was pretty drawn out cuz I took my time to find companies I wanted to interview for, set up those interviews, etc., so I would keep doing the occasional practice problem during that to keep in shape, but mostly I felt pretty well prepared.</p>

<h1>What was your interview schedule like?</h1>

<p>Like I said, I took a while at the beginning of this process to get my resume in order, do some research on companies and write up a big list, brush up on algos, etc.</p>

<p>I lined up a couple of phone screens early to get them out of the way (staggering them so that I wasn&rsquo;t too absent at work), and punted on the on-sites so I could cluster those around the same time.</p>

<p>I highly recommend having your first on-site (or two) be a &ldquo;warm-up&rdquo;: <em>not</em> your dream job, but either one you don&rsquo;t feel too strongly about, or one that is a real long shot and you&rsquo;re not really banking on. The idea is to have your first interview or two be a little lower stress and lower stakes. Best case scenario, you get an offer and have more leverage or a fab opportunity you didn&rsquo;t count on; worst case, you get to ease yourself back into the sometimes-grueling world of on-site technical interviews.</p>

<h1>How did you decide where to interview?</h1>

<p>The way I decide many other things: I made a big ol&#8217; doc where I kept track of recommendations from friends, collegues, the Internet, etc. I brainstormed products I&rsquo;d be interested to work on, and places friends had worked or places I&rsquo;d seen on the internet with cultures that I liked. I looked up the companies of people I enjoy on Twitter and elsewhere on the interwebs. I took suggestions from the amaaazing jobs team at <a href="https://www.recurse.com/">RC</a>.</p>

<p>And then I dug into those companies. Looked for articles on company culture, their approach to tech problems, their thoughts on diversity and whether they had women and PoC on their engineering team/in management, how many blog posts they had by women/PoC, etc. I looked on Glassdoor. If I had friends there, or friends of friends, I reached out to them to ask them if they liked it there. I hit up people in my network (esp. women) for word-on-the-street. And from all that, sortakinda got a picture of these companies and which I was or wasn&rsquo;t interested in moving forward with.</p>

<p>(I should note that an important part of this process was being clear on what I wanted out of my next company. Having a concrete idea of my own values helped me know what things to look for, which questions to ask, and which things were dealbreakers. It&rsquo;s worth spending a good chunk of time on this step, as it will inform the rest of your search. In particular, I found Key Values&#8217; <a href="https://www.keyvalues.com/culture-queries/">Culture Queries</a> a useful place to start.)</p>

<h1>Then what?</h1>

<p>Well hopefully, the offers start rolling in! Be transparent with everyone in your interview process about where you&rsquo;re at (esp. with other companies), what your concerns are, and what you need from them. Stating your needs going in sets a good precedent!</p>

<p>When you start thinking about switching jobs, be prepared for lots of last minute insurance submissions and affair-getting-in-order, and remember to take any relevant documents off your computer/email/google drive, any relevant passwords off your password manager, etc. (Pro tip: if you know you&rsquo;ll be leaving early-ish in the year, max out your Flex Spending Account and you&rsquo;ll end up with free money! It&rsquo;s a good time to buy those prescription sunglasses you don&rsquo;t reaaally need, but heck, they&rsquo;re free!)</p>

<p>As for me, I&rsquo;m taking a month off and chilling, and so very excited about it. And thennnnn&hellip; I start my new job!</p>

<p>I&rsquo;m pretty psyched about this next chapter in my life, and I hope that some of the thoughts above are of use to someone. Best of luck, y&#8217;all!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Things like: &ldquo;How do you learn a new language or framework?&rdquo;; &ldquo;Tell me about a time that you failed&rdquo;; etc.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[F***in' Decorators, How Do THEY Work?!]]></title>
    <link href="http://maiamcc.github.io/blog/2018/02/01/python-decorators/"/>
    <updated>2018-02-01T13:16:46-05:00</updated>
    <id>http://maiamcc.github.io/blog/2018/02/01/python-decorators</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve been in Python-land for long, you&rsquo;ve probably seen some <code>@</code>-sign thingies hovering (often mysteriously) above functions and class definitions, saying things like <code>@patch</code> or <code>@classmethod</code> or perhaps something even more obscure. Maybe you already know that these are called &ldquo;decorators&rdquo;. Maybe you&rsquo;ve even used them, or written your own!</p>

<p>Even if you&rsquo;ve done all that and still don&rsquo;t quiiiite get what&rsquo;s going on under the hood with decorators&hellip; don&rsquo;t worry, my friend, you are not alone. Heck, <em>I&rsquo;m</em> still not quite sure what goes on under the hood with decorators, but after a very productive afternoon of fiddling, I have a much better idea, and I&rsquo;m here to share the fruits of that fiddling with you. Ready? Here we go:</p>

<p><strong>Decorators are callables called on callables that return a callable which then replaces the original callable.</strong></p>

<p>Got it?</p>

<p>&hellip;No?</p>

<p>&hellip;Yeah, okay, that&rsquo;s fair. Let me try that again.</p>

<!--more-->


<h1>A Temporary Oversimplification</h1>

<p>I know I said “callable” up there before, but just for now, I’m going to simplify and instead of talking about “callables”, I’ll talk about “functions”. All functions are callables&mdash;i.e. “functions” are a subset of “callables”&mdash;and they tend to be the easiest case for people to wrap their heads around.</p>

<p><img src="http://maiamcc.github.io/images/callables_venn_diagram.png" alt="Functions are a subset of callables" /></p>

<p>“Callables” can also be classes, or heck, most any object, if it’s got the appropriate set of behaviors. We’ll dig into that in a bit, but for now, let’s talk about decorators in terms of “functions”. With this simplification in mind, let me amend my definition above to make it maaarginally less confusing:</p>

<p><strong>A decorator is a function (<code>dec(…)</code>) called on a function (<code>fn(…)</code>) returning a function (<code>fn_decorated(…)</code>) which then replaces the original function:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@dec</span>
</span><span class='line'><span class="k">def</span> <span class="nf">fn</span><span class="p">(</span><span class="o">...</span><span class="p">):</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Is approximately equal to:</span>
</span><span class='line'><span class="n">fn</span> <span class="o">=</span> <span class="n">dec</span><span class="p">(</span><span class="n">fn</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://maiamcc.github.io/images/decorators_flow_function.png" alt="Decorators are functions that modify functions" /></p>

<h1>How Decorators are Applied</h1>

<p>Say we&rsquo;ve got this function. It doesn&rsquo;t do much, but it&rsquo;s a nice little function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">times_two</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>But say that we&rsquo;re so excited about that function that we want everyone to know when we call it, so we&rsquo;re gonna sound a klaxon every time we do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">times_two_with_alarm</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;WOOP! WOOP! WOOP!&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">times_two</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sure, that works. But what if we&rsquo;ve got a BUNCH of functions that we&rsquo;re really excited about, and we want to add this big &lsquo;ol alarm (by which I mean &ldquo;print statement&rdquo;) to all of them? It&rsquo;ll get repetitive to add that code everywhere; what if we just wrote a function to stick that print statement into our functions for us?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">add_alarm</span><span class="p">(</span><span class="n">fn</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">fn_with_alarm</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;WOOP! WOOP! WOOP!&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">fn</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">fn_with_alarm</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>add_alarm</code> is a function that takes an argument <code>fn</code>, the function we want to add an alarm to: it then returns us a NEW function which does the following:
a) sound the alarm
b) invoke the original function we passed to it</p>

<p>In practice, then, we can achieve the same thing we achieved above like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">times_two_with_alarm</span> <span class="o">=</span> <span class="n">add_alarm</span><span class="p">(</span><span class="n">times_two</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because, remember, in Python, functions are first class objects; they can be passed around, passed as arguments, assigned, etc. In this case, <code>add_alarm</code> takes a function as an argument, and it <em>returns</em> a function (one that does whatever the original func. does, but this time with an alarm). We can then assign the output of <code>add_alarm</code>; so now, <code>times_two_with_alarm</code> is that new, modified function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span> <span class="n">times_two_with_alarm</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="n">WOOP</span><span class="err">!</span> <span class="n">WOOP</span><span class="err">!</span> <span class="n">WOOP</span><span class="err">!</span>
</span><span class='line'><span class="o">&lt;</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>Heck, maybe we don&rsquo;t want to keep track of a whole different function name, we just want that alarm to be baked into our <code>times_two</code> function. Well, we can do that too:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># In case you forgot, here&#39;s how we defined this function...</span>
</span><span class='line'><span class="k">def</span> <span class="nf">times_two</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Add the alarm to it!</span>
</span><span class='line'><span class="n">times_two</span> <span class="o">=</span> <span class="n">add_alarm</span><span class="p">(</span><span class="n">times_two</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="n">times_two</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="n">WOOP</span><span class="err">!</span> <span class="n">WOOP</span><span class="err">!</span> <span class="n">WOOP</span><span class="err">!</span>
</span><span class='line'><span class="o">&lt;</span> <span class="mi">8</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Okay, But Like… You Haven’t Used a Decorator Yet…?</h2>

<p>Geez, I’m getting there! In fact, THIS is where decorators come in! If the above seems a little tiresome, we can use this shortcut:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@add_alarm</span>
</span><span class='line'><span class="k">def</span> <span class="nf">times_two</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>@decorator</code> syntax means basically what we said above: &ldquo;define this function, but then run it through this other <code>decorator</code> function, and assign the result of that call (which, again, ought to be a function) back to the function I just defined.&rdquo; This way, you can easily modify multiple functions in predictable<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> ways, and moreover, modify them <em>in place</em>; no need to keep track of both <code>times_two</code> and <code>times_two_with_alarm</code>, just update <code>times_two</code> to do the new thing.</p>

<h1>Back to “Callables”</h1>

<p>So remember earlier when I waved a hand and said that we’d talk about decorators as “functions that manipulate functions”? Well it’s actually a bit gnarlier than that. Properly speaking, decorators are <strong>callables that manipulate callables</strong>, and as such, both decorators and the things they decorate <em>may</em> be functions, or they may be <em>random other stuff.</em></p>

<h2>What&rsquo;s a &ldquo;Callable&rdquo;?</h2>

<p>A <strong>callable</strong> is <strong>anything that you can</strong> <strong><em>call</em></strong>&mdash;i.e. anything that you can stick a <code>()</code> after (with maybe some arguments inside) and have something happen. A callable may be a <strong>function</strong> (<code>my_func(...)</code>) or a <strong>class</strong> (<code>MyClass(...)</code><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>), or (as helpful as this definition is) any <strong>object</strong>, as long as it can be… well, called. Some things that are NOT callable include strings, ints, lists, etc.:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span> <span class="s">&quot;hello&quot;</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;</span> <span class="ne">TypeError</span><span class="p">:</span> <span class="s">&#39;str&#39;</span> <span class="nb">object</span> <span class="ow">is</span> <span class="ow">not</span> <span class="nb">callable</span>
</span></code></pre></td></tr></table></div></figure>


<p>So then, to re-visit our original definition of a decorator, taking away our initial oversimplification: <strong>decorators are callables that manipulate callables (and then replace the original thing with the modified thing).</strong></p>

<p><img src="http://maiamcc.github.io/images/decorators_flow_callable.png" alt="Decorators are callables that modify callables" /></p>

<p>We’ve already talked about decorators as functions being used to modify functions. But since callables can be either functions or classes (…or objects, but we’ll ignore that for now), let’s talk about some other cases.</p>

<h2>Decorating a Class with a Function</h2>

<p>What if we just got really excited about a bunch of classes, and wanted to announce to the world whenever we made a new instance of one? It might look something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">announce_new_instance</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">make_new_instance_with_announcement</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Making a thing!&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">cls</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">make_new_instance_with_announcement</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@announce_new_instance</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MyClass</span><span class="p">():</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">foo</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">foo</span> <span class="o">=</span> <span class="n">foo</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="n">MyClass</span><span class="p">(</span><span class="s">&#39;bar&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">Making</span> <span class="n">a</span> <span class="n">thing</span><span class="err">!</span>
</span><span class='line'><span class="o">&lt;</span> <span class="o">&lt;</span><span class="n">__main__</span><span class="o">.</span><span class="n">MyClass</span> <span class="n">at</span> <span class="mh">0x10fd84b70</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Recall that <code>MyClass</code> is a <em>callable</em>&mdash;<code>MyClass()</code> means, &ldquo;make me a new MyClass instance!&rdquo;&mdash;and so we can treat it just like any other thing that can be called, and even treat it like the function from our first example. In this case, under the hood, we&rsquo;re replacing <code>MyClass</code> (the function-like thing that, when called, makes a new instance) with <code>make_new_instance_with_announcement</code>, which makes its announcement and <em>then</em> kicks off making a new instance. (In the context of the decorator above, <code>cls</code> represents the class you passed in, i.e. the class you&rsquo;re decorating; so here, it&rsquo;s <code>MyClass</code>, thus <code>cls()</code> is the same as <code>MyClass()</code>.<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<h2>Classes as Decorators</h2>

<p>This one bends my brain, but you can totally use a class as a decorator! Because as we discusssed (say it with me), <em>classes are callables too</em>. A call to <code>MyClass(*args, **kwargs)</code> eventually calls out to <code>MyClass.__init__(self, *args, **kwargs)</code> (and does some other magic such that at the end of it all, an instance is returned back). There are probably other rad things you can do with classes-as-decorators, but the pattern I&rsquo;ve seen most often (in all three hours of looking into this) is this one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">DecoratorClass</span><span class="p">():</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">fn</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">fn</span> <span class="o">=</span> <span class="n">fn</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;Look how decorated!&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">fn</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@DecoratorClass</span>
</span><span class='line'><span class="k">def</span> <span class="nf">times_two</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="n">times_two</span><span class="p">(</span><span class="mi">41</span><span class="p">)</span>
</span><span class='line'><span class="n">Look</span> <span class="n">how</span> <span class="n">decorated</span><span class="err">!</span>
</span><span class='line'><span class="o">&lt;</span> <span class="mi">82</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oh man, weird, right? <code>DecoratorClass</code> is a class that takes a function (<code>fn</code>) as an initialization argument and hangs onto it. And recall that we replace the function-to-be-decorated with the result of a call to <code>decorator</code>, thus the above is equivalent to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">times_two</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span>
</span><span class='line'>
</span><span class='line'><span class="n">times_two</span> <span class="o">=</span> <span class="n">DecoratorClass</span><span class="p">(</span><span class="n">times_two</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>That is, the new <code>times_two</code> is an <em>instance</em> of <code>DecoratorClass</code>?! What?!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span> <span class="n">times_two</span>
</span><span class='line'><span class="o">&lt;</span> <span class="o">&lt;</span><span class="n">__main__</span><span class="o">.</span><span class="n">DecoratorClass</span> <span class="n">at</span> <span class="mh">0x109b867b8</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>But the point of decorators is that we don’t really <em>care</em> what <code>times_two</code> is, we just want it to do what we expect when we call it. Thus, we need an instance of <code>DecoratorClass</code> to actually DO stuff when you stick <code>(…)</code> at the end. That’s where the <code>__call__</code> method we defined earlier comes in.</p>

<h3>Tangent: <code>__call__</code></h3>

<p>We can make an object (i.e. an instance of a class) callable using the magic <code>__call__</code> method, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Callable</span><span class="p">():</span>
</span><span class='line'>    <span class="c"># defining the __call__ method on an INSTANCE of this class</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;you called me!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">Callable</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="n">c</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;</span> <span class="s">&quot;you called me!&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Contrast with...</span>
</span><span class='line'><span class="k">class</span> <span class="nc">NotCallable</span><span class="p">():</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="n">nc</span> <span class="o">=</span> <span class="n">NotCallable</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="n">nc</span><span class="p">()</span>
</span><span class='line'><span class="o">&lt;</span> <span class="ne">TypeError</span><span class="p">:</span> <span class="s">&#39;NotCallable&#39;</span> <span class="nb">object</span> <span class="ow">is</span> <span class="ow">not</span> <span class="nb">callable</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Back to <code>DecoratorClass</code></h3>

<p>So we&rsquo;ve got a <code>DecoratorClass</code> that takes in a function and hangs onto it, and when we define the magic method  <code>__call__</code>, we&rsquo;re defining what happens when we stick <code>(...)</code> on the end of an instance of this class&mdash;we call the function that we passed in in the first place:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;</span> <span class="n">instance</span> <span class="o">=</span> <span class="n">DecoratorClass</span><span class="p">(</span><span class="n">times_two</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">instance</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="c"># i.e. DecoratorClass.__call__(5)</span>
</span><span class='line'><span class="n">Look</span> <span class="n">how</span> <span class="n">decorated</span><span class="err">!</span>
</span><span class='line'><span class="o">&lt;</span> <span class="mi">10</span>
</span></code></pre></td></tr></table></div></figure>


<p>So after all that decorator magic, we’ve replaced <code>times_two</code> with an instance of <code>DecoratorClass</code>, right? But as we just saw above, we can call that instance like we would call any other function; thus <code>times_two</code> can still be called like normal, and in all respects treated as a normal function—but now it has some shiny extra functionality added via our decorator.</p>

<h2>Okay, But Why Would You WANT to Use a Class as a Decorator?</h2>

<p>That&rsquo;s a great question. There are probably lots of fascinating answers. At this present moment, I only have two: &ldquo;to store state&rdquo; and &ldquo;because you can&rdquo;. Since I&rsquo;ve already covered the latter in quite a bit of detail, let&rsquo;s turn to the former, i.e., a halfway plausible case in which you might want to use a class as a decorator. (I’m sure there are other reasonable ways to store state on a function, as well as other compelling reasons to use classes as decorators, but let’s just go with this for now.)</p>

<p>Unlike functions, which are (generally) one-and-done, classes allow you to store state.<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> How might you use this in a decorator context? Consider something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">countcalls</span><span class="p">():</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">fn</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">fn</span> <span class="o">=</span> <span class="n">fn</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">CALLS</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">CALLS</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;This func. has been called {} time(s)&quot;</span><span class="o">.</span>
</span><span class='line'>            <span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">CALLS</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">fn</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@countcalls</span>
</span><span class='line'><span class="k">def</span> <span class="nf">foo</span><span class="p">():</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;hello world&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="n">foo</span><span class="p">()</span>
</span><span class='line'><span class="n">This</span> <span class="n">func</span><span class="o">.</span> <span class="n">has</span> <span class="n">been</span> <span class="n">called</span> <span class="mi">1</span> <span class="n">time</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span> <span class="s">&quot;hello world&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="n">foo</span><span class="p">()</span>
</span><span class='line'><span class="n">This</span> <span class="n">func</span><span class="o">.</span> <span class="n">has</span> <span class="n">been</span> <span class="n">called</span> <span class="mi">2</span> <span class="n">time</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span> <span class="s">&quot;hello world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And heck, why not go for broke and use a class to decorate a class?!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">countinits</span><span class="p">():</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cls</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">cls</span> <span class="o">=</span> <span class="n">cls</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">INITS</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">INITS</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;You&#39;ve made {} of this class&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">INITS</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">cls</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@countinits</span>
</span><span class='line'><span class="k">class</span> <span class="nc">MyClass</span><span class="p">():</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="n">inst1</span> <span class="o">=</span> <span class="n">MyClass</span><span class="p">()</span>
</span><span class='line'><span class="n">You</span><span class="s">&#39;ve made 1 of this class</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="n">inst2</span> <span class="o">=</span> <span class="n">MyClass</span><span class="p">()</span>
</span><span class='line'><span class="n">You</span><span class="s">&#39;ve made 2 of this class</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above example looks a little gnarly, but remember that <code>cls</code> here is <code>MyClass</code> which is a callable (that makes and returns a new <code>MyClass</code> instance), and remember how the <code>@decorator</code> syntax is applied, and you can piece together precisely what dark magic is happening here.</p>

<h1>Awesome! …Wait, What?</h1>

<p>Yeah, I know, a lot of things just went down. To summarize:</p>

<ol>
<li>you can <em>decorate</em> any callable—be it a function, a class, or any callable object.</li>
<li>a <em>decorator</em>—the <code>@something</code> thing—is a callable (function, class, etc.) that takes as an argument the thing you’re decorating and returns another callable that preserves the original functionality but adding something new</li>
<li>the type of callable is irrelevant. Functions can decorate functions, or classes, or objects. Classes can decorate functions, or classes, or objects. Basically, anything goes.</li>
</ol>


<p>There are lots of other resources on the interwebs about what sort of stuff you might want to use decorators for—and heck, I might write a blogpost about some of them in future—but I hope this is an illuminating overview of just what the heck decorators <em>are</em> and how they work. As always, feel free to reach out with any questions! A big thank you to all the excellent folks who beta-read/edited this post: <a href="http://happyspork.com/">Ben Anderman</a>, <a href="https://github.com/cappachu">Codanda Appachu</a>, <a href="http://antha.site/">Sam Auciello</a>, and <a href="https://alexburka.com/">Alex Burka</a>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>…except that decorators as described here can potentially do weird things to doc strings and other function attributes. This is one of the reasons that many folks use <a href="https://docs.python.org/3/library/functools.html#functools.wraps"><code>functools.wraps</code></a> when decorating things: it copies over most (though not all 😞) of the original functions&#8217;     hidden attributes to the new, wrapped function. Hat tip to <a href="https://github.com/cappachu">Codanda Appachu</a> for reminding me of this.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><code>MyClass(...)</code>, of course, being shorthand for <code>MyClass.__init__(...)</code>. (That&rsquo;s totally an oversimplification; <code>MyClass(...)</code> is <em>actually</em> shorthand for <code>MyClass.__new__(cls)</code>, which does a bunch of stuff, including call <code>__init__</code> on the newly made <code>MyClass</code> instance&hellip; but sufice it to say that when I call <code>MyClass(...)</code> I expect some stuff to happen, including a call to <code>MyClass.__init__</code>, and to eventually get back a new instance of that class.)<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>Note that since <code>MyClass(...)</code> is baaasically shorthand for <code>MyClass.__init__(...)</code> (see above), and so you can achieve a pretty similar effect by decorating the <code>__init__</code>  method. The thing passed into <code>announce_new_instance</code> to be transformed will be different, but the new function will execute in just about the same way.<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Hat tip to <a href="http://jayantj.github.io/">Jayant Jain</a>, who pointed out an error I made in the original version of this blogpost. (Yes, if you really wanted to, you could store state on a function as well, cuz it&rsquo;s Python and everything is an object, including functions. For instance, I could totally set <code>my_func.some_value = "hello"</code>. However, it&rsquo;s awkward and unidiomatic. So like, go ahead and do that if you want, but it&rsquo;s kinda weird, and really it just makes more sense to use classes.)<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Are Interfaces?]]></title>
    <link href="http://maiamcc.github.io/blog/2017/06/17/what-are-interfaces/"/>
    <updated>2017-06-17T13:04:02-04:00</updated>
    <id>http://maiamcc.github.io/blog/2017/06/17/what-are-interfaces</id>
    <content type="html"><![CDATA[<p>This is a blog post about interfaces in Go. I wanted to write about a headscratcher that cost me several hours of work when I first started learning Go, and I figured I might as well start from the beginning and write the article on interfaces that I wish I had read back then. The story of my encounter with nil interfaces is coming soon, but for now, here&rsquo;s a brief and hopefully accessible piece on interfaces in Go.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> So, without further ado, I give you&hellip;</p>

<h3>What Is an Interface?</h3>

<p>Coming from the dynamically-typed wild west of Python, one of the bits of Go that took the most getting used to was the idea of <em>interfaces</em>. An interface is a way of typing things according to their methods. If I want a function that can take any number of different types, so long as they have a given method (or two, or five) in common, I’ll want to use an interface to accomplish this (since I can’t pass in any old thing because of Go’s type safety rules). To give a concrete example, say I’ve got these classes: <!--more--></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">octopus</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">numTentacles</span> <span class="kt">int</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">octopus</span><span class="p">)</span> <span class="nx">ooze</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;ink&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">type</span> <span class="nx">slug</span> <span class="kd">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">salted</span> <span class="kt">bool</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="p">(</span><span class="nx">slug</span><span class="p">)</span> <span class="nx">ooze</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;slime&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>slug</code> and <code>octopus</code> are their own types, but both have <code>ooze()</code> methods. If I wanted a function to make use of the <code>ooze</code> method, and didn’t know how to make effective use of interfaces, I might write something like this. Note that <code>interface{}</code> is a wild card and I&rsquo;ll explain why in a minute&hellip; but for now, just accept that this is the way we can allow this function to take either a slug OR an octopus (&hellip;or anything else, unfortunately) without Go complaining at us.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">oozeAttack</span><span class="p">(</span><span class="nx">slugOrOctopus</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span> <span class="nx">oozingThing</span> <span class="o">:=</span> <span class="nx">slugOrOctopus</span><span class="p">.(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nx">slug</span><span class="p">:</span>
</span><span class='line'>            <span class="c1">// cast oozingThing as a slug</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprintf</span><span class="p">(</span><span class="s">&quot;You got %s’d!&quot;</span><span class="p">,</span> <span class="nx">oozingThing</span><span class="p">.</span><span class="nx">ooze</span><span class="p">())</span>
</span><span class='line'>        <span class="k">case</span> <span class="nx">octopus</span><span class="p">:</span>
</span><span class='line'>            <span class="c1">// cast oozingThing as an octopus</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprintf</span><span class="p">(</span><span class="s">&quot;You got %s’d!&quot;</span><span class="p">,</span> <span class="nx">oozingThing</span><span class="p">.</span><span class="nx">ooze</span><span class="p">())</span>
</span><span class='line'>        <span class="k">default</span><span class="p">:</span>
</span><span class='line'>            <span class="nb">panic</span><span class="p">(</span><span class="s">```This thing doesn&#39;t know how to ooze!</span>
</span><span class='line'><span class="s">            ...It sucks that you were able to pass this in</span>
</span><span class='line'><span class="s">            without the compiler complaining at you, but</span>
</span><span class='line'><span class="s">            here we are.```</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ugh. Awkward, right? And it has repeated code, and it can potentially panic b/c we have no guarantees of the type of the thing we passed, and… ugh. No good. But luckily, I can use interfaces as they were meant to be used, and suddenly my code is a lot prettier:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">oozer</span> <span class="kd">interface</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// the signature of a function called &quot;ooze&quot;,</span>
</span><span class='line'>    <span class="c1">// which takes no args and returns a string</span>
</span><span class='line'>    <span class="nx">ooze</span><span class="p">()</span> <span class="kt">string</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">oozeAttack</span><span class="p">(</span><span class="nx">o</span> <span class="nx">oozer</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">fmt</span><span class="p">.</span><span class="nx">Sprintf</span><span class="p">(</span><span class="s">&quot;You got %s’d!&quot;</span><span class="p">,</span> <span class="nx">o</span><span class="p">.</span><span class="nx">ooze</span><span class="p">())</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If an object has all of the methods required for an interface, we say that that object <em>implements</em> (or satisfies) that interface. In this case, both <code>octopus</code> and <code>slug</code> implement <code>oozer</code> because they both have <code>ooze()</code> methods. The compiler can check this for us, so we know that anything we pass into <code>oozeAttack</code> has an <code>ooze()</code> method and won’t break out code—in stark contrast to the example above, where we could pass in <em>literally anything</em> and just had to pray that it wouldn’t cause a panic.</p>

<h3>Okay, But What Is an <code>interface{}</code>?</h3>

<p>If you’ve been using Go for more than a couple of days, you’ve probably stumbled across <code>interface{}</code>, the mythical and mysterious empty interface (<a href="https://www.youtube.com/watch?v=bW7Op86ox9g">click here for dramatic effect</a>). (I even used it in the example above.) The empty interface baffled me for a long time. I understood that practically, it was a type wildcard—you used it anywhere you weren’t sure of the type of a thing. If I have a function that’s going to get passed <em>some thing</em> but I don’t know what the type of that thing is, I’ll use <code>interface{}</code> so nothing breaks:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">func</span> <span class="nx">printMysteryObject</span><span class="p">(</span><span class="nx">thing</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">fmt</span><span class="p">.</span><span class="nx">Printf</span><span class="p">(</span><span class="s">&quot;Your mystery thing is: %v&quot;</span><span class="p">,</span> <span class="nx">thing</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But it was only after I started thinking about what interfaces actually are, and reading some blog posts, that I figured out why this works. <code>interface{}</code> is this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kd">type</span> <span class="nx">BoringInterface</span> <span class="kd">interface</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// … nothing to see here …</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It’s an interface that requires no methods! And so any object at all will satisfy this interface, because any object in Go has 0+ methods. I finally understand what the flip this thing is. So exciting.</p>

<p>Stay tuned for part 2 in this series, &ldquo;When Interfaces Go Nil (dun dun dunnn)&rdquo;.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I need to make the disclaimer that lots of other folks have written about this, and the <a href="https://blog.golang.org/laws-of-reflection">Go blogpost on <em>The Laws of Reflection</em></a> probably explains this stuff better than I do. That said, I hope this blog post is more to the point, and perhaps more entertaining. (Mad props to <a href="http://aoeu.github.io/">Travis McDemus</a> for inspiration for this excellent example of how interfaces work, which I find 100% more accessible than the <code>io.Reader/Writer</code> examples that get used in all the canonical Go blogposts about interfaces.)<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dig Yourself Out of a 'Git Commit Amend' Hole With Reflog]]></title>
    <link href="http://maiamcc.github.io/blog/2016/04/29/dig-yourself-out-of-a-git-commit-amend-hole/"/>
    <updated>2016-04-29T22:59:25-04:00</updated>
    <id>http://maiamcc.github.io/blog/2016/04/29/dig-yourself-out-of-a-git-commit-amend-hole</id>
    <content type="html"><![CDATA[<p>Raise your hand if you’ve ever <code>git commit</code>’d something you shouldn’t have. (It’s okay, this is a judgement-free space.)</p>

<p>And raise your hand if you’ve ever used <code>git commit --amend --no-edit</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> to try and hide your terrible, terrible shame. (We’re not even gonna <em>talk</em> about <code>git push -f origin master</code>. Don’t do it, kids.)</p>

<p>And raise your hand one last time if you’ve ever <code>git commit --amend --no-edit</code>’d and then paused and looked at your computer and were suddenly struck by the realization that you’d ruined everything.</p>

<p>That last one might be just me, but I’m going to pretend it happens to other people to make myself feel better. (Like all of those times I thought I was fixing a slightly incorrect commit, only to realize I had instead wiped out all of my latest work. Whoooops.) <!-- more --></p>

<p>Well, I put in an appearance at <a href="http://git-merge.com">Git Merge 2016</a> (an all-around delightful event), and this gem was among the many things I learned there. This gem, friends, is the <code>reflog</code> and <code>HEAD@{x}</code>.</p>

<p>The reflog is… well, it’s a log of your refs. Refs being references to commits, which might be things like branch names (because recall that branch names are just human-readable references to commits) or this <code>HEAD</code> thing, which is a pointer to <em>the commit you’re on right now</em>. In fact, if you went into a folder that was a git repo and looked at <code>.git/refs/heads/master</code>, you’d see a file with a single commit hash in it&ndash;that’s the current tip of <code>master</code>, i.e. <em>the commit that your “master” ref is pointing to</em>.</p>

<p>Now, refs in and of themselves aren’t gonna solve your <code>git commit --amend</code> debacle, but it turns out that git is really smart sometimes. In this particular case, the smart thing that git does is keep track of everywhere your <code>HEAD</code> has been pointing. This info is stored in <code>.git/logs/HEAD</code>, and looks something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0000000000000000000000000000000000000000 5a90f86dbb681f914790fbe494cbc5680ce372cc Maia &lt;maia.mcc@gmail.com&gt; 1461979447 -0400    commit (initial): add a file with some stuff
</span><span class='line'>5a90f86dbb681f914790fbe494cbc5680ce372cc fdaec86d18b70bf8b9f87e74b473dcdb53d5b814 Maia &lt;maia.mcc@gmail.com&gt; 1461979493 -0400    commit: totally innocuous change
</span><span class='line'>fdaec86d18b70bf8b9f87e74b473dcdb53d5b814 d77508cfe5df412158ad8a19540aca0ba195348f Maia &lt;maia.mcc@gmail.com&gt; 1461979518 -0400    commit (amend): totally innocuous change
</span><span class='line'>d77508cfe5df412158ad8a19540aca0ba195348f fdaec86d18b70bf8b9f87e74b473dcdb53d5b814 Maia &lt;maia.mcc@gmail.com&gt; 1461979572 -0400    reset: moving to HEAD@{1}
</span><span class='line'>fdaec86d18b70bf8b9f87e74b473dcdb53d5b814 514dd505826ddc1276823506e7682b33b64547b6 Maia &lt;maia.mcc@gmail.com&gt; 1461980303 -0400    commit (merge): Merge commit 'd77508c'</span></code></pre></td></tr></table></div></figure>


<p>If you find that a little hard to parse (and you probably do), you can (and should) get at it in a more human-readable form with the command <code>git reflog show</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fdaec86 HEAD@{2}: commit (merge): Merge commit 'd77508c'514dd505826ddc1276823506e7682b33b64547b6 fdaec86d18b70bf8b9f87e74b473dcdb53d5b814 Maia &lt;maia.mcc@gmail.com&gt; 1461982854 -0400    checkout: moving from master to head^
</span><span class='line'>fdaec86 HEAD@{3}: checkout: moving from d77508cfe5df412158ad8a19540aca0ba195348f to master
</span><span class='line'>d77508c HEAD@{4}: checkout: moving from master to HEAD@{3}
</span><span class='line'>fdaec86 HEAD@{5}: reset: moving to HEAD@{1}
</span><span class='line'>d77508c HEAD@{6}: checkout: moving from fdaec86d18b70bf8b9f87e74b473dcdb53d5b814 to master
</span><span class='line'>fdaec86 HEAD@{7}: checkout: moving from master to fdaec86d18b70bf8b9f87e74b473dcdb53d5b814
</span><span class='line'>d77508c HEAD@{8}: commit (amend): totally innocuous change
</span><span class='line'>fdaec86 HEAD@{9}: commit: totally innocuous change
</span><span class='line'>5a90f86 HEAD@{10}: commit (initial): add a file with some stuff</span></code></pre></td></tr></table></div></figure>


<p>So I had always thought that <code>git commit --amend</code> <em>amended your current commit</em>&ndash;wrote all of your changes onto the same commit and called it a day. But it turns out that it doesn’t; rather, it creates a <em>whole new commit</em> in which to store your amended changes. Like, look, you can see it right there in the reflog: the same commit message, before and after amend, with two different hashes, whoadamn! So Whatever my commit looked liked before I mistakenly amended is still out there somewhere in the void, and with reflog, I can get that hash! From here, getting back your lost work is simple: <code>git checkout [lost-commit-hash]</code>, <code>git reset --hard [lost-commit-hash]</code>, what have you.</p>

<p>But there’s one more nifty thing here: all the <code>HEAD@{x}</code> numbers in the reflog are shortcuts to those commits. Much the same way that you can use <code>HEAD^^^</code> to point to the commit three generations up from your current head, you can use <code>HEAD@{3}</code> to point to the commit <em>from three movements of <code>HEAD</code> ago</em>. That makes “oh crap, I need  to get back to the last commit I was on before I did [stupid thing]” even easier&ndash;instead of having to go to the reflog and find the commit, you can just <code>git checkout HEAD@{1}</code> to get to whatever commit your head was previously on. (The commit your head is currently on, of course, being <code>HEAD@{0}</code>.)</p>

<p>So, there you go: a cool git thing I learned recently. Nothing earth-shattering, but hopefully a useful tip for someone out there. Happy gitting!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>For those of you who don’t know, this is <code>git commit --amend</code>’s older and better-looking cousin: it’s <code>git commit --amend</code> except that it automatically reuses the commit message of the commit you’re amending, rather than prompting you for a new one.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[28 Days Later: My First Four Weeks as a Junior Engineer at Spring]]></title>
    <link href="http://maiamcc.github.io/blog/2015/06/11/28-days-later/"/>
    <updated>2015-06-11T22:47:20-04:00</updated>
    <id>http://maiamcc.github.io/blog/2015/06/11/28-days-later</id>
    <content type="html"><![CDATA[<p>I came out of school with a BA in music, tripped and fell, and landed in the tech world. The folks at Spring took a chance on me as an extremely junior developer and offered me a job. I’ve been here now for a little more than two months, and I couldn’t be happier. Going into my first day at Spring (which also happened to be my first day as a software engineer, full stop), I was understandably pretty nervous. But I was also excited for what lay ahead, and Spring has done a fabulous job of easing me into my new life here. Here are some reflections on that first month (posted, er, somewhat belatedly), to give you an idea of what it’s like to be a new junior engineer at Spring.</p>

<!-- more -->


<p><img src="http://maiamcc.github.io/images/28daysspring.jpg" alt="I promise, working at Spring does NOT actually involve deadly virus-plagues!" /></p>

<p>(I promise, working at Spring does NOT actually involve deadly virus-plagues!)</p>

<h3>Week One</h3>

<p>My first week at Spring was also my first week as a professional software engineer, and it was, as you might expect, a rollercoaster. When I got to my desk that first day, I found a shiny new Macbook, an ergonomic keyboard and mouse, and a pile of Spring swag (t-shirts, sweatshirts, tote bag, etc.). There was an all-hands meeting that morning, and so the entire team gathered in the kitchen to check in, and I got to introduce myself to everyone. (Of course, I also had to answer the obligatory icebreaker question, which I won’t reveal in case you join Spring one day and have to answer it for yourself, but rest assured, it gave everyone something to remember me by!) Thinking back on it now, that first day was a blur of new people, computer set-up nonsense, and free snacks (snacks which continue to be an integral part of my Spring experience).</p>

<p>Anyone who’s set up a dev environment recently knows it takes about 20 times longer than you think it should, no matter how good the onboarding guide is (and Spring’s is pretty comprehensive). My first two days were spent installing software, transferring over dotfiles, and getting our app to build on my machine. As far as I can tell, though, that’s pretty much par for the course; I daresay the whole process was much less painful than it could have been because of Spring’s excellent internal wiki and because the rest of the engineering team was so happy to help. With their support, I had everything up and running by midday on Wednesday, and could actually start looking through the code.</p>

<p>I entered the codebase gradually, starting on the back-end and working on a smallish and fairly contained bug. Still, even a simple bugfix has a lot of moving parts: I had to understand how the database, the various parts of our backend, and the iOS code all fit together. Sadly, Go doesn’t have a debugger, so my usual Python-oriented strategy&mdash;sticking break points around the code and stepping through until I know what&rsquo;s going on&mdash;was useless here. The next best thing was to scatter approximately a million print statements throughout the code, and, of course, to talk to my teammates. From giving me an impromptu high-level whiteboard overview of our system (thanks Vadim!) to answering my finicky detail questions on Slack, everyone on the engineering team seemed happy to help me out.</p>

<p>My brain was working overtime that first week as it processed new people, a new system, a new programming language, and a new way of doing things. But the good thing about starting from the bottom of the learning curve is that you’re learning <em>so much</em> all the time. What’s more, my new coworkers were super friendly and welcoming; they all went out of their way to say hi, and socializing was a welcome break from mile-a-minute code learning. As if I needed more proof that Spring knows how to have fun, my third day on the job was the anniversary of Spring&rsquo;s incorporation, and everyone left work early for BBQ and shuffleboard in Brooklyn. Although a lot was thrown at me that first week, I was meeting cool new people and learning cool new things, and by the time Friday rolled around I was exhausted, but also really excited about my new job.</p>

<h3>Week Two</h3>

<p>My second week was truncated because I was out sick, but I kept up my momentum from week one by fixing small bugs, poking around more the code base, and asking lots of questions&mdash;and by the end of the week, I could see definite improvements! I pushed some code and submitted some more for review, and felt myself settling in to Go. Before starting at Spring, I had only ever worked in Python, so this job has been both my first time using Go and my first time learning a new language<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. I had already worked through most of the <a href="//tour.golang.org/">Tour of Go</a>, but sitting down to read and write real code did wonders for my comprehension. Even though I was (and still am) scratching my head at times, by the end of the second week I could wrap my head around the syntax. I didn&rsquo;t really <em>know</em> Go, but I could fake it pretty well.</p>

<p>(The other exciting thing this week was that I was no longer the newest engineer at Spring. Alan Wang, another <a href="//www.recurse.com/">Recurse Center</a><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> alum, came on board as a software engineer. Seeing the environment setup process give someone else grief was strangely comforting!)</p>

<h3>Week Three</h3>

<p>During my third week, things started to move a little faster and get a little easier. My projects were still small in scope, but less self-contained, and I could get my hands dirty in sections of the codebase with more moving parts.</p>

<p>I also found myself expanding my mental model of the app, filling in some of the blanks in the whiteboard diagram that Vadim drew for me my first week. Granted, there were still a lot of blanks left, but I was getting a better sense of how things fit together. I was still asking loads of questions, but I also had more resources in my toolbox to answer them for myself before pinging someone on my team. I was also starting to feel the groove of Spring office life, and trying to build good habits for myself, such as: drinking lots of water; using <a href="//www.dejal.com/timeout/">Time Out</a> to give myself regular breaks; going outside on days when lunch was delivered to the office, significantly reducing the need to leave the building; and running up and down the stairs a few times to get my blood pumping. (Because if your blood isn’t pumping, you can’t code very effectively. Or do much at all, really. Try to avoid this.)</p>

<h3>Week Four and Beyond</h3>

<p>My fourth week at Spring had me writing my first test, embarking on my first actual project, and generally feeling like I sort of knew what was going on. Since then, I’ve been working on an integration with a new ecommerce API, and while I can still get help when I need it, I’ve gotten to take ownership of this project from the beginning. And that’s pretty excellent! I’m also finding that I know enough raw basics of Go to start picking up some stylistic things and code conventions.</p>

<h3>Some Final Summary-Type Thoughts</h3>

<p>During my first month at Spring, I felt in over my head and bewildered most of the time&mdash;but that’s okay, especially considering this is my first job as an engineer. Learning a lot of new things&mdash;code, tools, procedures, the names of other humans&mdash;is always going to be a bit overwhelming, but any company worth their salt (of which Spring is certainly one) will go out of their way to ease you into your new engineering life. In fact, I daresay that any new engineer who <em>doesn’t</em> feel a little overwhelmed first is probably being unreasonably coddled, or else no trying very hard.</p>

<p>To me, the two most useful things in my onboarding process were: a) the gradual ramping up of assignments; and b) Spring’s culture of question-asking and teammates who are excited to help. My tasks gradually increased in complexity and scope, allowing me to get familiar with the codebase incrementally and not overwhelm myself trying to jam it all into my brain at once. It was especially helpful to have a designated point person that I could go to even if my questions seemed embarrassingly trivial. Solid onboarding documentation, especially for dev environment setup, was also key! (Though not even the most comprehensive wiki pages can eliminate the pain of setting up a dev environment&mdash;they only make it slightly more tolerable.)</p>

<p>I’m still getting the hang of life at Spring, and very much still in the midst of my onboarding process. I certainly don’t know the whole system, and I’m sure I’ll be asking questions in a month or two (or five). But I’m okay with that. Spring has brought me on gently enough that I can really put to use what I <em>do</em> know, and I feel comfortable going to my team with questions about things I don’t yet understand. Thanks to Spring, my first engineering job has been pretty great so far, and I can’t wait to see how it develops!</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Go is the first language I’ve learned since I got serious about programming (which I did by way of Python). I don’t really count picking up Python as “learning a language,” since I was learning how to code in general. Now, though, I know how to code, and I need to fit my pre-existing knowledge into Go’s framework, which requires an entirely different set of mental acrobatics.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>Formerly Hacker School<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Truthiness]]></title>
    <link href="http://maiamcc.github.io/blog/2015/04/16/truthiness/"/>
    <updated>2015-04-16T21:13:19-04:00</updated>
    <id>http://maiamcc.github.io/blog/2015/04/16/truthiness</id>
    <content type="html"><![CDATA[<p>Truthiness in Python is occasionally confusing. Obviously, <code>False</code> is false and <code>True</code> is true, but beyond that, what then?</p>

<p><code>None</code> is always false&ndash;though this doesn&rsquo;t mean that <code>False == None</code>, which is a mistake I made early in my Python career. I was confused by how a nonexistant list and an empty list were both falsey, and somewhere in my mind I thought that they were both <code>None</code> as well. Not so much.<!--more--></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">bool</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">bool</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">bool</span><span class="p">(</span><span class="n">a</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">bool</span><span class="p">(</span><span class="n">b</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">)</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>A stylistic note here: since <code>None</code> is a singleton (i.e. there exists only one instance of it), the proper syntax is <code>foo is None</code>, rather than <code>foo == None</code>. But I digress.</p>

<p>The empty values of data structures are always falsey. Hence:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">bool</span><span class="p">([])</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">bool</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">bool</span><span class="p">({})</span>
</span><span class='line'><span class="bp">False</span>
</span></code></pre></td></tr></table></div></figure>


<p>And perhaps most confusingly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">bool</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">bool</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">bool</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">bool</span><span class="p">(</span><span class="o">-</span><span class="mf">31.4</span><span class="p">)</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>I mean, this makes sense because we know that 0 is false and 1 is true&hellip; but if you think about it, this also means that <code>0</code> is the empty value of an <code>int</code> (which means that <code>0</code> is false, but every other value of <code>int</code> or <code>float</code> is true) This doesn&rsquo;t mean much in Python, of course, but I&rsquo;ve been playing with Go lately, in which you have to initialize your variables before you can do anything with them, and suddenly the idea of an empty value makes a lot more sense (and the empty value for an int is indeed zero).</p>

<p>Conversely, every non-zero value of a data structure is true. That means that a string with stuff in it, a dict. with stuff in it, a list with stuff in it, etc. is true no matter what the stuff is. And so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">hip</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">bool</span><span class="p">(</span><span class="n">hip</span><span class="p">)</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="nb">bool</span><span class="p">([</span><span class="n">hip</span><span class="p">,</span> <span class="n">hip</span><span class="p">])</span>
</span><span class='line'><span class="bp">True</span>
</span></code></pre></td></tr></table></div></figure>


<p>Proving conclusively, as we all knew, that <em>hips don&rsquo;t lie</em>.</p>

<p>(<a href="//instantrimshot.com/index.php?sound=rimshot&amp;play=true">Ba-bm-psh</a>.)</p>

<p>Extra credit: do you know what <code>["hip", "hip"]</code> is?</p>

<p>&hellip;(wait for it)&hellip;</p>

<p>It&rsquo;s a <em>hip hip array</em>.</p>

<p>(<a href="//wompwompwomp.com/">Womp womp</a>.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OPW Retrospective]]></title>
    <link href="http://maiamcc.github.io/blog/2015/03/09/opw-retrospective/"/>
    <updated>2015-03-09T16:48:33-04:00</updated>
    <id>http://maiamcc.github.io/blog/2015/03/09/opw-retrospective</id>
    <content type="html"><![CDATA[<p>Three months later, I&rsquo;m done with my OPW internship with GNOME Music.</p>

<p>I&rsquo;ve learned that open-source contributing isn&rsquo;t as scary and impossible as it once seemed, and that IRC is full of nice people who are happy to help! But I&rsquo;ve also learned that diving into a new codebase is challenging, at best, and nearly impossible at worst. <code>pdb</code>, <code>for x in dir(foo): print(x)</code>, <code>traceback.print_stack()</code>, and <code>inspect.getargspec(myfunc)</code> have become good friends of mine in the past three months. Good documentation, it turns out, is essential&mdash;the project I was working on had very little, and the libraries it utilized (at least, the Python wrappers for those libraries) were similarly sketchily documented, and all this made learning the code waaaaay tougher than it needed to be.<!--more--></p>

<p>I&rsquo;ve learned how much I benefit from writing things down. I took notes when I was <a href="//www.youtube.com/watch?v=r7N7s1yejFQ&amp;list=PLea0WJq13cnA6k4B6Tr1ljj2nleUl9dZt">learning SPARQL</a>, and color-coded my questions so I could come back to them later. I kept track of all the weird dependency problems I ran into during my build&mdash;which turned out to be way more useful than I&rsquo;d even imagined when I ended up having to JHBuild my program all over again on a different machine. I made a to-do list at the beginning of every work day, with a macro-goal or two and manageable sub-steps that I could check off as I did them, to keep myself on-task and non-overwhelmed. I kept a list of bugs as I ran into them so I didn&rsquo;t get side-tracked&mdash;I could finish the task at hand, then go back and report all the intervening bugs at once. Similarly, I tried my best to jot down any real-world distractions&mdash;like that email I needed to send, that form I needed to mail&hellip;&mdash;so that they were out of my head and on paper, and I could come back to them whenever I was done with work.</p>

<p>I&rsquo;ve learned how important task-setting and accountability is to me. If I don&rsquo;t know <em>what</em> task I&rsquo;m doing at any given time, I have the potential to just mess around in the source code for a good few hours without really getting anything done. Having &ldquo;Bug X: Put Y in the Z&rdquo; written at the top of my notebook, or telling my mentor Vadim, &ldquo;Okay, I&rsquo;m gonna work on foo today,&rdquo; clarified my purpose and kept me from trying to do 5 things at once, or from doing nothing at all.</p>

<p>I&rsquo;ve learned that working from home is <em>hard</em>! I need to be pretty firm with myself to get out of bed in the morning, shower, eat a good breakfast, and sit down to work, instead of lazing around in bed with a book for ages and messing around on Facebook. But for the most part, I managed to stick to the <a href="http://maiamcc.github.io/blog/2014/12/29/rules-for-opw/">rules I laid out for myself</a> at the beginning of all of this, to great positive effect. (Having codified rules definitely helps!) (Disabling Facebook on my work machine, and <a href="http://maiamcc.github.io/blog/2015/02/25/the-best-thing-ive-done-for-my-productivity-lately/">disabling my Facebook newsfeed</a> on my personal machine, have both been very good choices as far as my productivity goes.) Having a space that is my <em>work space</em> (my desk, with an external monitor) helps a lot&mdash;if I find myself distracted, I get up, wander away, and take a break, and come back when I can actually think straight.</p>

<p>I&rsquo;ve learned that the toughest part of any project tends to come right at the very beginning: the system set-up is always <a href="http://maiamcc.github.io/blog/2014/10/22/reflections-on-my-first-open-source-contribution/">stupidly, grossly difficult</a>, and learning a new codebase (as I mentioned above) is <em>hard</em>! For the first month, <a href="http://maiamcc.github.io/blog/2015/01/10/opw-1-month-in/">I felt like I&rsquo;d hardly accomplished anything</a>&mdash;I could barely write patches because I was still trying to figure out how everything worked.</p>

<p>And of course, I learned a bunch of concrete skills. I know a fair bit (though by no means everything) about how <a href="//git.gnome.org/gnome-music">GNOME Music</a> works, I know about Tracker and <a href="//code.maiamccormick.com/blog/2015/03/04/the-joys-of-sparql/">SPARQL</a>, I know a little something now about open-source workflow, bug reporting, and bugzilla, and I&rsquo;ve acquired some new git-fu by necessity (since I&rsquo;m working on a multi-contributor project, need to make my commits as self-contained as possible, etc.). I&rsquo;m so grateful to the GNOME Foundation and to OPW for this fabulous opportunity, and to <a href="//wiki.gnome.org/VadimRutkovsky">Vadim Rutkovsky</a> for being the most friendly, helpful, and laid-back mentor I could have hoped for!</p>

<p>What&rsquo;s next? At the end of the month, I&rsquo;ll be starting as a software engineer at <a href="//www.shopspring.com/">Spring</a>, a mobile shopping app startup based in NYC. I&rsquo;m beyond psyched to join their team, and to put to use all of the skills I&rsquo;ve gotten from OPW. And I&rsquo;ll certainly stick around GNOME Music/GNOME/the open-source community&mdash;you&rsquo;ll probably see me poking my head into various IRC channels from time to time (nick = <code>maiamcc</code>). If anyone wants to talk about GNOME Music, or OPW, or SPARQL, or anything, really: come say hi!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Joys of SPARQL: An RDF Query Language]]></title>
    <link href="http://maiamcc.github.io/blog/2015/03/04/the-joys-of-sparql/"/>
    <updated>2015-03-04T11:44:36-05:00</updated>
    <id>http://maiamcc.github.io/blog/2015/03/04/the-joys-of-sparql</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been working with SPARQL a bunch for <a href="//git.gnome.org/browse/gnome-music">my OPW project</a>, and found it very slow going at first. SPARQL is apparently one of those little-loved languages that doesn&rsquo;t have much in the way of tutorials or lay-speak-explanations online&mdash;pretty much all I could find were the language&rsquo;s official docs, where were super technical and near-impossible for a beginner to slog through. Hell, I didn&rsquo;t even understand what the language <em>did</em>&mdash;how could I read the technical specs?<!--more--></p>

<p>So, I decided to take a step towards remedying this problem. This post won&rsquo;t actually teach you how to <em>use</em> SPARQL&mdash;others do that better than I, and I provide some links at the bottom of the post&mdash;but it&rsquo;s intended to be a primer on how SPARQL works, and what the data you might use it on looks like. (This is a blog-ified version of a Hacker School Thursday Talk presentation given on 2/5/15.)</p>

<h3>What is SPARQL?</h3>

<p>It&rsquo;s like SQL, but with extra unicorns.
<img src="http://maiamcc.github.io/images/sparkly_unicorn.gif" alt="Sparkly Unicorn" /></p>

<h3>No really, what is SPARQL?</h3>

<p>Besides a query language with a really ridiculous name?</p>

<p>SPARQL is a (recursive) acronym standing for: <strong>S</strong>PARQL <strong>P</strong>rotocol <strong>a</strong>nd <strong>R</strong>DF <strong>Q</strong>uery <strong>L</strong>anguage.</p>

<p>It&rsquo;s a query language, like SQL, that you use to poke around in your data and find the bits of it that you want. Unlike SQL, which queries tables, SPARQL queries data stored in a different way: a <strong>Resource Description Framework</strong> (or <strong>RDF</strong>).</p>

<h3>What is RDF?</h3>

<p>SQL expects data to be in tables, like this:
<img src="http://maiamcc.github.io/images/sql_table.png" alt="SQL Table" /></p>

<p>But SPARQL works with data organized like this:
<img src="http://maiamcc.github.io/images/rdf_web.png" alt="RDF Web" /></p>

<p>A single row in the SQL table is a collection of bits of information about that one entity (in this case, a person); the web below is another way of visualizing that information. Each bit of information is contained in a <em>subject/predicate/object triple</em>.</p>

<h3>Subject/Predicate/Object Triples</h3>

<p><span class="red">SUBJECT</span> &ndash; <span class="green">PREDICATE</span> &ndash; <span class="cyan">OBJECT</span></p>

<p>This convention plays off of English grammar constructs [fn: and probably lots of other languages too, but I don&rsquo;t know enough linguistics to make any sort of comprehensive claim] grammar constructs. In English, we can make a sentence like this:</p>

<p><span class="red">The human</span> &ndash; <span class="green">throws</span> &ndash; <span class="cyan">the ball</span>.</p>

<p><code>The human</code> is the subject, <code>throws</code> is the predicate (verb-like thing), and <code>the ball</code> is the object. Likewise, we can express any cell from a SQL table in the same way:</p>

<p><span class="red">Maia</span> &ndash; <span class="green">has favorite color equal to</span> &ndash; <span class="cyan">rainbow</span>.</p>

<p>Where <code>Maia</code> (the thing we&rsquo;re referring to&mdash;the row in the SQL table representing an entity) is the subject, <code>has favorite color equal to</code> is the predicate (think of this as the property name, or put another way, the column header), and <code>rainbow</code> is the object (the value of that property for the given entity). In diagram form, it would sort of look like this:</p>

<p><img src="http://maiamcc.github.io/images/colordiagram1.png" alt="RDF in color #1" /></p>

<p>Only, this is not quite accurate. <code>Maia</code> is not its own entity; it&rsquo;s a human-readable identifier (what we mortals call a first name) for some entity stored in your computer. This entity hasFirstName Maia just like it hasFavoriteColor Rainbow. So in reality, the visual representation would look more like this:</p>

<p><img src="http://maiamcc.github.io/images/colordiagram2.png" alt="RDF in color #2" /></p>

<p><code>&lt;aabbcc&gt;</code>&mdash;the alphanumeric string we give to our entity to represent it and so we can track all of its associated properties and value&mdash;is called a <strong>Uniform Resource Identifier</strong>, or <strong>URI</strong>. (Not to be confused with <strong>Uniform Resource Locators</strong>, or <strong>URLs</strong>. A URL tells you the location of the entity in question, where as the URI is the name the computer has given to our entity; think of a URI as a name and a URL as an address.)</p>

<h3>What Does a Query Look Like, Anyway?</h3>

<p>The first thing to know is that SPARQL objects and properties aren&rsquo;t invented at random. When you&rsquo;re using SPARQL, you work with a predefined set of classes (e.g. <code>contact</code>, <code>email address</code>, etc.) and properties (e.g. <code>hasFirstName</code>, <code>dateAdded</code>, etc.), collectively called an <em>ontology</em>. Generally, systems will use a combination of the standard ontologies floating around the web (GNOME Tracker, for instance uses <a href="//developer.gnome.org/ontology/stable/index.html">this collection of ontologies</a>, someone putting together a contacts list might use <a href="//xmlns.com/foaf/spec/">foaf</a>). I also assume you can make your own, though I&rsquo;ve never experimented with this. Ontologies are identified by a prefix (and if you&rsquo;re writing your own queries from scratch, you&rsquo;ll have to set the prefixes with a link to the ontology on the interwebs)&hellip; The point being, in English, you might get confused between &ldquo;has first name&rdquo; and &ldquo;has name&rdquo; and &ldquo;is named&rdquo; and &ldquo;has given name&rdquo;&hellip; but in SPARQL, there will be only one name for that property (presumably something like <code>foaf:givenName</code>).</p>

<p>Anyway, what does a query look like? It looks something like this:</p>

<pre><code class="SPARQL">SELECT ?a ?b ?c
WHERE {
    ...
}
ORDER BY ?a
LIMIT X
</code></pre>

<p>Basically, you select some stuff (<code>SELECT ?a ?b ?c</code> as specified by the conditions in your <code>WHERE</code> clause&mdash;possibly including some <code>FILTER</code> statements) which you can then do a handful of operations on: ordering by one or more of the values, capping the number of results you want, etc.</p>

<p>But that was (obviously) an extremely sketchy description, and as I warned you, I&rsquo;m not going to go into any more detail in this post. Others have tackled this material better than I&mdash;I learned most of what I knew about SPARQL at the very beginning from <a href="//www.youtube.com/watch?v=r7N7s1yejFQ&amp;list=PLea0WJq13cnA6k4B6Tr1ljj2nleUl9dZt">Dr. Noureddin Sadawi&rsquo;s Simple SPARQL Tutorial</a>, in which he plays around with <a href="//learningsparql.com/2ndeditionexamples/index.html">Bob DuCharme&rsquo;s sample code</a>. Check out their stuff to learn what queries actually look like, and all the cool stuff you can do with them. I hope this has been at least somewhat enlightening; thanks for tuning in!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Best Thing I've Done for My Productivity Lately]]></title>
    <link href="http://maiamcc.github.io/blog/2015/02/25/the-best-thing-ive-done-for-my-productivity-lately/"/>
    <updated>2015-02-25T12:18:41-05:00</updated>
    <id>http://maiamcc.github.io/blog/2015/02/25/the-best-thing-ive-done-for-my-productivity-lately</id>
    <content type="html"><![CDATA[<p>But seriously. The best thing I&rsquo;ve done for my productivity lately (besides blocking Facebook entirely on my work machine) is <a href="//chrome.google.com/webstore/detail/kill-news-feed/hjobfcedfgohjkaieocljfcppjbkglfd">disabling my Facebook newsfeed</a> (this is a Chrome extension, I&rsquo;m sure there are various others for other browsers). Facebook is still a time-suck, but not the ENDLESS VORTEX OF DISTRACTION AND OOH A BUZZFEED ARTICLE that it once was. Pretty cool stuff!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git 301: Changing History]]></title>
    <link href="http://maiamcc.github.io/blog/2015/01/23/git-301-changing-history/"/>
    <updated>2015-01-23T23:53:50-05:00</updated>
    <id>http://maiamcc.github.io/blog/2015/01/23/git-301-changing-history</id>
    <content type="html"><![CDATA[<p>Congratulations, you&rsquo;ve made it through Git 101 (<code>init</code>, <code>add</code>, <code>commit</code>, <code>log</code>, <code>status</code>) and its slightly more difficult companion course, Git 201 (<code>branch</code>, <code>checkout</code>, <code>pull</code>).<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> Are you ready to pull out the big guns? Here are a handful of commands I&rsquo;ve been using lately, which I will now write about on the off-chance that they&rsquo;re useful to someone else. Welcome to Git 301.</p>

<h4>Selective Checkouts with <code>checkout -p</code></h4>

<p>Okay, this isn&rsquo;t really changing history. But it IS a fancy bit of next-level gittery that I&rsquo;ve found useful as I try to make my git history useful to others and actually move in a logical feature-by-feature progression, instead of reflecting my all-over-the-place, distracted workflow.<!--more--></p>

<p><code>git commit -p</code> (for <code>--patch</code>) takes you chunk by chunk through all of your unstaged changes and asks, &ldquo;Do you want to commit this piece?&rdquo; So if you&rsquo;ve changed 3 things in <code>foo.py</code> but they&rsquo;re all part of different features, you can commit them all separately!</p>

<h4>Change the Past with <code>rebase -i</code></h4>

<p>Remember when you learned that you could revise the commit you’d just made with <code>git commit --amend</code> (as long as you hadn’t pushed anything to your remote repo yet cuz then stuff would get borked and you’d probably have to force push), and it was super cool? Rebase is like that, but 50x cooler.</p>

<p>Rebase is the git tool that allows you to rewrite the past. You can use it to pull together commits from different branches, change commit orders, keep some and ignore others, modify messages, modify content… it’s crazy! I won’t bore you here with the plain ‘ol <code>rebase</code> command and how you might use it to smoothly interweave multiple branches’ worth of commits into a single branch of commit history. I totally could if I wanted to because I totally know the details of how rebasing works off the top of my head and don&rsquo;t just blindly run commands whenever I need to rebase stuff. Totally for sure.</p>

<p>But even better than <code>rebase</code> is this excellent new thing I learned about today, <code>git rebase -i</code> (for <code>--interactive</code>)! <code>git rebase -i [hash]</code> will pop up your text editor with a bunch<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> of your commits in it, all preceded by the word <code>pick</code>. And… y’know, it’s actually pretty pointless for me to explain this here, because interactive rebase explains it all to you in the text file! (Yay easy-to-read documentation! Unlike most of the git man pages, but oh well…) Here you can change the order of the commits if you want, delete commits you want to get rid of, and do a couple of other neat things.</p>

<p>In particular, the feature that I’ve found to be a lifesaver is the ability to revise a past commit (not just the message, but the content as well).<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> Change <code>pick</code> to <code>edit</code> next to the commit(s) you want to revise, then save and close the text file. Git will drop you in your project directory just after the time of the first commit marked with <code>edit</code>. Make any changes you want to make, commit them with <code>git commit --amend</code>, and then go ahead with your rebase with <code>git rebase —continue</code>. Magically, the commit has been revised to include any changes you just made! Huzzah!</p>

<h4>Fix Your Mistakes the <em>Responsible</em> Way with <code>revert</code></h4>

<p>Rebasing and fixup-ing and pretending you never made any boo-boos in your commits&mdash;and then probably force pushing (<code>git push origin master -f</code>) to your remote repo&mdash;is all well and good, but if anyone else is working in the same remote repo as you, your tampering with the past will cause a terrible time paradox that will result in you never being born. Okay, not really, but it <em>will</em> royally mess things up for anyone else pulling from this repo. Good version control etiquette demands that you <em>not</em> actually change your commit history, but sometimes you look at your last commit and go &ldquo;&hellip;crap, I need to totally change my approach to this feature and <em>none</em> of this code is valid anymore.&rdquo;</p>

<p>While it would be easy to <code>git reset --hard [hash-of-commit-to-return-to]</code> and <code>git push origin master -f</code> and pretend that last commit never happened, the responsible thing to do is <code>git revert [hash-of-commit-to-get-rid-of]</code>&mdash;which makes a <em>new</em> commit that just undoes everything your mistake-commit did. (The two commits are inverses of each other.) Now your repo is back in the state you want it to be in, but you haven&rsquo;t tinkered with timeline at all, leaving all of your collaborators safe from time paradoxes for another day. Good job.</p>

<p>Tune in for the next episode of Git 301<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> (and possibly some retroactive episodes of Git 201 and Git 101). Possible topics to cover (read: things Maia just learned and got excited about): <code>git stash</code> and <code>git stash pop</code>, <code>git cherrypick</code>.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Unfortunately, these courses are not currently being offered at the University of Maia. However, you may still enroll in <a href="http://maiamcc.github.io/blog/2014/09/02/all-about-git/">Theory of Git pt. 1</a>. The University of Maia accepts deposits at all times, regardless of enrollment status<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>The <code>[hash]</code> in <code>git rebase -i [hash]</code> is the commit after which git will start showing you commits. To put it another way, you should give the hash of <em>the newest commit you want to leave as-is</em>. (Instead of finding the exact hash, you can use <code>HEAD^^^…</code> to go back a handful of commits from your most recent one&mdash;assuming that’s where your HEAD is located at the moment. # of ^’s = # of commits that will be shown to you in the rebase.)<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p>(There are whispered rumors that you can achieve the same thing even more fastly by making the changes in HEAD that you wanted to have made a few commits ago, adding them and committing with <code>git commit --fixup [hash of commit these changes should have belonged to]</code> and then running <code>git rebase -i [starting hash]</code> (or possibly <code>git rebase -i --autosquash [starting hash]</code>&mdash;<a href="//fle.github.io/git-tip-keep-your-branch-clean-with-fixup-and-autosquash.html">see this post</a>, for instance, for details). But I’ve been playing with this and am finding it more complicated than I’d hoped. Everything goes to pot, for instance, if the edits you wanted to make to a previous commit happen within a line, instead of being a clean line addition or subtraction… So, I’ll figure that one out on a later date and report back!)<a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p>Mixed metaphor alert! Danger, Will Robinson! Abort, abort!!<a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OPW: 1 Month In]]></title>
    <link href="http://maiamcc.github.io/blog/2015/01/10/opw-1-month-in/"/>
    <updated>2015-01-10T11:01:33-05:00</updated>
    <id>http://maiamcc.github.io/blog/2015/01/10/opw-1-month-in</id>
    <content type="html"><![CDATA[<p>For anyone who doesn&rsquo;t know, this past December I started an internship with <a href="//www.gnome.org/">GNOME</a> as part of OPW, the <a href="//wiki.gnome.org/OutreachProgramForWomen">Outreach Program for Women</a>. The point of this program is to get more women (by which they really mean cis woman <em>and</em> trans folks <em>and</em> genderqueer/genderfluid/agender folks&hellip; so basically, people who aren&rsquo;t cis <strong><a href="//www.mandleco.com/Default.asp">MEN</a></strong>) involved in the FOSS world. In my particular case, it certainly succeeded! I&rsquo;d been meaning to do some open source contributing for a while, but had always been too intimidated and overwhelmed to start.<!--more--> When it came time for OPW applications, however, I <em>had</em> to: had to pick a project, delve into the codebase, and submit a preliminary bugfix for my <em>application</em>. Which, at least for me, was fabulous, because my very application process convinced me that FOSS contribution was something that I could do, and even something that I enjoyed!</p>

<p>So, here I am, one month into my three months of OPW. I&rsquo;ve been working on <a href="//wiki.gnome.org/Apps/Music">GNOME Music</a>, the new music player for GNOME, and specifically on implementing smart playlists (like Most Played, Recently Played, and maybe someday something as ambitious as Favorites).</p>

<p>In some ways, it feels like I&rsquo;ve done remarkably little work in a month. Part of this is because of timing&mdash;I started the internship, worked for a week at the very bottom of the steepest part of the learning curve getting very little done, then went off for a previously scheduled vacation, then holidays happened, then Vadim was away&hellip; so time-wise, the first few weeks were fragmented and disorganized. Also, I had to set up a development environment&mdash;installing Fedora 21, getting all my dependences in order, and getting GNOME Music to build properly&mdash;which is an experience akin to having teeth pulled, without drugs, while lying on a bed of needles and listening to the Numa Numa song on an endless loop. And I had to do that TWICE, because I started out on this adorable little computer lent to me by a friend which had only 1GB of RAM and I wanted to punch myself in the face whenever I tried to do anything, so I tried again on a much newer, nicer, faster machine. This whole dev. env. set-up took WAY more time than I had anticipated.</p>

<p>But also, it&rsquo;s disconcerting to be in the dark all over again, when I&rsquo;d just gotten used to feeling like I knew what was up. I had to learn a whole new (essentially docs- and comment-free) codebase, and a whole new language&mdash;<a href="//en.wikipedia.org/wiki/SPARQL">SPARQL</a>, a query language that&rsquo;s super powerful but for some reason no one has written accessible tutorials or how-to&rsquo;s on the interwebs, so basically my only resource was the incredibly dense, not at all beginner-friendly <a href="//www.w3.org/TR/rdf-sparql-query/">technical specs</a>. Somehow, I didn&rsquo;t quite expect or remember how slowly work goes when you&rsquo;re just starting out, when you&rsquo;re just learning your tools.</p>

<p>However, recently, I&rsquo;ve started writing actual code. I feel like I have a handle (well, more of a handle, anyway) on how this program actually works, how to write in SPARQL, and the tools at my disposal for testing things. (I don&rsquo;t know how I could do any of this, for instance, if I couldn&rsquo;t tool around with querying my database directly from the command line with <code>tracker-sparql --query</code>.)</p>

<p>It&rsquo;s also occurred to me that I&rsquo;ve been blogging remarkably little about this whole experience. Which is odd, because I actually do really enjoy writing blog posts, and generally jump at the opportunity to talk loudly into the internet, even if no one is listening. But somehow OPW feels different&mdash;more serious, more adult, less happy-fun-play-time&mdash;than Hacker School. At Hacker School I kept a blog mostly for myself, as a journal and archive, a sounding board for my own ideas and a check on myself that I actually understood [concept X], which I could tell by whether or not I could coherently explain it to someone else. Now that I&rsquo;m actually doing a Job (okay, Internship) in the Real World, somehow everything seems higher-stakes. I&rsquo;m now reluctant to post those messy &ldquo;why am I failing?&rdquo; blog posts, or get really excited about this cool new thing I learned but everyone else has known for years. I want my posts to demonstrate the Excellent Things I have done, and be insightful and ground-breaking. And I realize that I&rsquo;ve essentially been kicking my own blogging repeatedly in the shins.</p>

<p>So, I&rsquo;m a month into OPW, finally out of holiday madness and ready to settle down into a consistent schedule. I&rsquo;m past the worst of the learning curve and have a pretty decent handle on SPARQL, the architecture of GNOME Music, and what needs to happen next in this project. I&rsquo;m going to revisit my <a href="http://maiamcc.github.io/blog/2014/12/29/rules-for-opw/">Rules for Myself During OPW</a> so (hopefully) I can successfully work from home without accidentally shutting off my brain and spending the whole day staring at cat pictures because I&rsquo;m too dehydrated to work. I&rsquo;m going to document my code as I go, to make things easier on the next person who has to dive head-first into this codebase. And I&rsquo;m going to blog more, the impressiveness of said blog posts be damned. (Future posts I have in mind: &ldquo;What is SPARQL, Anyway?&rdquo;; &ldquo;How I Chose My First FOSS Project&rdquo;; &ldquo;How to (Start) Figur(ing) Out an Alien Codebase&rdquo;; &ldquo;How Does GNOME Music Work?&rdquo;) And mostly, I&rsquo;m gonna spend the next two months writing some cool code! I encourage you to do the same! (And if you want to contribute to GNOME Music, I am MORE than happy to explain how everything works!)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rules for OPW]]></title>
    <link href="http://maiamcc.github.io/blog/2014/12/29/rules-for-opw/"/>
    <updated>2014-12-29T14:29:39-05:00</updated>
    <id>http://maiamcc.github.io/blog/2014/12/29/rules-for-opw</id>
    <content type="html"><![CDATA[<p>Rules and resolutions for myself during OPW:</p>

<ul>
<li>wake up at the same time every day.</li>
<li>eat breakfast every day.</li>
<li>eat lunch. Seriously, eat lunch. <!--more--></li>
<li>drink liquids. Getting dehydrated is an easy to make your brain not work good and takes surprisingly long to register with your conscious mind.</li>
<li>check in with the inimitable Rose Ames via email every day with 1&ndash;3 problem/plan/deliverable result triples, and follow up at the end of the workday to see how well I did. If I don&rsquo;t, she will attack me with angry animals.</li>
<li>have goals for the day, and plans for how to achieve them. Goals shouldn&rsquo;t be vague, like, &ldquo;Learn SPARQL&rdquo;; they should be actionable (&ldquo;deliverable result,&rdquo; above), like, &ldquo;Learn enough SPARQL to understand the queries in <code>query.py</code>, and as proof, give a line-by-line translation of one of the queries into English.&rdquo;</li>
<li>at the end of the day, figure out what I did today, what still needs going, and what I&rsquo;m going to do tomorrow.</li>
<li>take good notes in my notebook: write down things that I need to understand so that I process them better, write down errors I get and fixes I make so I can replicate, write down bugs and questions and future to-do&rsquo;s, write down reflections and noticings about my working style</li>
<li>ask questions on IRC rather than banging my head against a wall</li>
<li>but bang my head against a wall a <em>little</em>, because it builds character, and more often than not I can figure out what&rsquo;s actually going on.</li>
<li>Facebook is BLOCKED on my work computer, and on my personal computer during the workday (with the possible exception of lunch hour and clearly defined breaks). NO FACEBOOK. NONE. Seriously, I am enabling parental controls on my work computer right now.</li>
<li>there are lots of ways to waste time besides Facebook. If I feel myself getting into that zoned-out place where I flip back and forth between tabs pretending I&rsquo;m doing productive stuff but not getting anything done, I will stand up, walk away, get a drink, etc., and figure out what I&rsquo;m going to do when I sit back down at my computer.</li>
<li>switch up work spaces regularly, try to get out of my apartment.</li>
<li>make sure to see people, if just for side-by-side working, lunch breaks, etc.&mdash;I need social interaction in my life, or else I get sad.</li>
<li>this isn&rsquo;t a rule so much as a neat idea that I may try to incorporate into my work routine: (from Pablo Torres, via Maja Frydrychowicz): &ldquo;a trick I learned from @Maja Frydrychowicz is to take a walk at the beginning of the work day in one direction and to take the same walk in the opposite direction when you are done, which is what you do if you commute to an office.&rdquo; Not sure if I&rsquo;ll do exactly this, but getting outside and walking around is definitely important.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[USB Disk via Terminal]]></title>
    <link href="http://maiamcc.github.io/blog/2014/12/24/usb-via-terminal/"/>
    <updated>2014-12-24T15:19:19-05:00</updated>
    <id>http://maiamcc.github.io/blog/2014/12/24/usb-via-terminal</id>
    <content type="html"><![CDATA[<p>Achievement unlocked: accessing a USB disk via terminal!</p>

<p>Accessing a flash drive from terminal seems like it ought to be simple, but it&rsquo;s varying degrees of a pain on different OS&rsquo;s. It also seems like something I should have learned ages ago&ndash;especially considering that when I first started terminal-ing, <a href="//akaptur.com/">Allison Kaptur</a>&rsquo;s advice to me was to quit Finder cold-turkey until I could do everything I wanted to do via terminal. Anyway, for anyone who&rsquo;s a little confused by this, it&rsquo;s actually pretty easy.<!--more--></p>

<h3>Mac</h3>

<p>Look for your disk in <code>/Volumes/[diskname]</code>. A bit obscure, but actually super simple!</p>

<h3>Linux</h3>

<p>More of a pain. You have to create a directory in which to &lsquo;mount&rsquo; the drive. Then you can work with the content of your drive through that directory, and when you&rsquo;re done, just unmount. This set of instructions was found on <a href="//askubuntu.com/questions/37767/how-to-access-a-usb-flash-drive-from-the-terminal-how-can-i-mount-a-flash-driv">Ask Ubuntu</a>.</p>

<ol>
<li>Find what the disk is called using <code>sudo fdisk -l</code>. (Probably something like <code>/dev/sdb1</code>.)</li>
<li>Create director in <code>/media</code>: <code>sudo mkdir /media/usb</code></li>
<li>Mount it: <code>sudo mount /dev/sdb1 /media/usb</code>. Your drive now lives in <code>/media/usb</code>, congratulations!</li>
<li>When you&rsquo;re done, unmount: <code>sudo umount /media/usb</code>
(Note that the command is <code>umount</code>, NOT <code>unmount</code>. This one had me scratching my head for way longer than it should have.)</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Principles From Liz]]></title>
    <link href="http://maiamcc.github.io/blog/2014/12/01/design-principles-from-liz/"/>
    <updated>2014-12-01T12:17:19-05:00</updated>
    <id>http://maiamcc.github.io/blog/2014/12/01/design-principles-from-liz</id>
    <content type="html"><![CDATA[<p>The other week, I chatted with the fabulous <a href="//lizstarin.com">Liz Starin</a> and picked her aesthetically-enabled brain about fonts and layouts for websites. Below is some stuff I learned from our design adventures, both wisdom straight from her and stuff I picked up from my experience overhauling fonts and layout: <!-- more --></p>

<ul>
<li>x-height is a unit referring to how tall the letter ‘x’ is in a given font. The larger the x-height, the easier to read on-screen. (Some fonts with small x-heights include Garamond and Futura.)</li>
</ul>


<p><img src="http://maiamcc.github.io/images/xheight.gif" alt="A shiny graphic about x-height" />
Graphic found in PAPress’s <a href="//www.papress.com/thinkingwithtype/index.htm">Thinking with Type</a> project.</p>

<ul>
<li>serifs are generally the best choice for body text—they tend to be more readable on-screen.</li>
<li>in CSS, you can set <code>line-height</code>, which controls the space between lines of text. Increasing line spacing just a bit can improve readability a <em>lot</em>.</li>
<li>when picking a font, it’s helpful to have some adjectives in mind, rather than blindly scanning around for a font that you like. At the very least, it will give you a place to start.</li>
<li><a href="//www.google.com/fonts">Google Fonts</a> is an incredible thing.</li>
<li>a surprisingly good way to gauge whether a font has the intended effect: imagine you got a wedding invitation written in that font, and think of what that invitation would say about the people getting married. Is that the image you want your website/blog/pony-rental business to convey?</li>
<li>rounded fonts tend to be more playful. Or is it that playful fonts tend to be more rounded? In any case, if you’re looking for something with a “playful” vibe (like I was), rounded-ness is a good feature to start looking for.</li>
<li>you can achieve a lot of variety with the same font. (In fact, you WANT to achieve a lot of variety with the same font—if no variety, your site looks boring, and if variety achieved by different fonts, your site looks like it got sloppy-drunk and made a bunch of poor decisions at the font bar.) Some ways to achieve variety within the same font: varying font weight (CSS: <code>font-weight</code>), case (upper/lower/title—CSS: <code>text-transform</code>), and letter spacing (CSS: <code>letter-spacing</code>), to name a few.</li>
<li>I had (and still have) massive struggles with making favicons that look like anything besides a blob. A feature I hadn’t consciously thought to look at was <em>light/dark contrast</em>. As a quick way of checking, Liz suggests putting the image in grayscale and seeing if it looks decent like that.</li>
<li>some fonting resources: <a href="//alistapart.com/">A List Apart</a> and <a href="//www.smashingmagazine.com/">Smashing Magazine</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Revisiting My First Python Program]]></title>
    <link href="http://maiamcc.github.io/blog/2014/11/20/revisiting-my-first-python-program/"/>
    <updated>2014-11-20T20:36:26-05:00</updated>
    <id>http://maiamcc.github.io/blog/2014/11/20/revisiting-my-first-python-program</id>
    <content type="html"><![CDATA[<p>Back in mid-July, I started at Hacker School, wide-eyed and green and totally freaked out. With only a little bit of Javascript under my belt (and a basically negligible amount of Java, so we&rsquo;re not even counting that), I decided to teach myself Python, slogged halfway through Zed Shaw&rsquo;s <em>Learn Python the Hard Way</em>, then went off to go build something, because I work best by getting my hands dirty. For my first Python project, I wrote <a href="//github.com/maiamcc/studentchooser">studentchooser</a>, a little command-line app requested by a teacher friend of mine, who wanted a fair way to call on her students at random (for putting homework problems on the board, etc.). The idea was that, once a student had been selected, it was <em>less</em> likely that they would be selected again, but not impossible&mdash;the chance of them being picked subsequently would go down, but they would still be in the running.</p>

<p>So, I made a program to do that! You store a list of students for a given class period in what I called the <code>roster</code> (just a dictionary of students). Each <code>Student</code> object keeps track of the number of times it has been selected and its probability of being selected in the next round, as well as whether or not the student is absent.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> It took me a little more than a week to finish, as I was still muddling through Python as I went, and at the end, I had a working final product! A rough one, but a working one! And then I went off on my merry way, doing more and varied projects and slowly building up my Python chops, getting code review, etc. Somewhere along the way, so gradually I didn&rsquo;t even realize it, I began to feel competent, like with enough time to think and maybe a little Googling, I could Python my way out of most problems that were thrown at me. And so today, back at Hacker School for Alumni Thursday and itching to write some code (because I&rsquo;ve been up to my neck in web work for the past few weeks), I opted for a blast from the past, and dived into my very first Python project to poke around, refactor, clean up, and chronicle what I found and what I had learned in the past four months. Here are some findings, accomplishments, and reflections.<!--more--></p>

<h4>Little things I changed</h4>

<p>There were a handful of little things that now strike me as really silly that I changed straight off. Stuff like the realization that text files don&rsquo;t actually need an extension (<code>.txt</code> or otherwise), or that instead of <code>myfile = open("foo.txt", "r"); contents = myfile.read(); myfile.close()</code> I could do the whole thing more cleanly and more efficiently with <code>with open("foo.txt") as myfile:</code>. Similarly, I found loads of places where a little more specificity in variable naming would have made the code hugely easier to read. So given something like, say, <code>for item in roster_list</code>, I changed it to <code>for roster_name in roster_list</code>.</p>

<h4>Gratuitous, &ldquo;useless&rdquo; comments</h4>

<p>There were comments EVERYWHERE. Like seriously, look at the code sample below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="sd">&quot;&quot;&quot;Load a roster from file.&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Boolean saying that this is NOT a new roster</span>
</span><span class='line'>    <span class="c"># i.e. when the program saves data, it will NOT edit the &quot;config&quot; file</span>
</span><span class='line'><span class="k">global</span> <span class="n">new_roster</span>
</span><span class='line'><span class="n">new_roster</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'><span class="c"># make list of all rosters in config file</span>
</span><span class='line'><span class="n">roster_list</span> <span class="o">=</span> <span class="n">get_all_rosters</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">roster_list</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span> <span class="c"># if list is empty, make a new roster instead</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;No rosters available to load. Make a new one instead.&quot;</span>
</span><span class='line'>    <span class="n">make_new_roster</span><span class="p">()</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span> <span class="c"># if config file contains at least one roster to load...</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Which roster would you like to load? Enter a number.&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># print a list of available rosters from config file</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">roster_list</span><span class="p">:</span>
</span><span class='line'>        <span class="n">item_index</span> <span class="o">=</span> <span class="n">roster_list</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>        <span class="n">pretty_name</span> <span class="o">=</span> <span class="n">get_pretty_name</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="c"># (name of the file w/o the file extension)</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;</span><span class="se">\t</span><span class="si">%d</span><span class="s">. </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">item_index</span><span class="p">,</span> <span class="n">pretty_name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">answer</span> <span class="o">=</span> <span class="n">ask</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># if possible, turn answer from a string into an int.</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">answer_int</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">ValueError</span><span class="p">:</span>
</span><span class='line'>            <span class="n">answer_int</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># if the answer is an int. in the range of # items in the list...</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">answer_int</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">roster_list</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
</span><span class='line'>            <span class="n">index</span> <span class="o">=</span> <span class="n">answer_int</span> <span class="o">-</span> <span class="mi">1</span> <span class="c"># (b/c list as displayed is 1-indexed)</span>
</span><span class='line'>
</span><span class='line'>            <span class="c"># save the given filename as the &#39;current file&#39;</span>
</span><span class='line'>            <span class="k">global</span> <span class="n">current_file</span>
</span><span class='line'>            <span class="n">current_file</span> <span class="o">=</span> <span class="n">roster_list</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;File to load:&quot;</span><span class="p">,</span> <span class="n">current_file</span>
</span><span class='line'>
</span><span class='line'>            <span class="c"># populate the roster using the data in the selected file</span>
</span><span class='line'>            <span class="n">populate_roster</span><span class="p">(</span><span class="n">current_file</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>            <span class="c"># returns name of the class (= name of the file) for display</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">get_pretty_name</span><span class="p">(</span><span class="n">current_file</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span> <span class="c"># if user input isn&#39;t in range or isn&#39;t an integer</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;Sorry, I didn&#39;t get that. Try again.&quot;</span> <span class="c"># run the loop again</span>
</span></code></pre></td></tr></table></div></figure>


<p>This comments-every-step-of-the-way thing pops up again and again in studentchooser, and looking at the code now, it seems pretty silly, because I can tell just by looking what most of these lines do&mdash;or at least, I can after rewriting it a bit so that variable names are intuitive, code is readable, etc. So I took a lot of these comments out of the refactored version, but I think it&rsquo;s really important to remember why I put them in in the first place. When I was first writing this code, it wasn&rsquo;t gratuitous, it was <em>super helpful</em> to know step by step exactly what was happening in my code, and to write it down so I couldn&rsquo;t get away with fudging that understanding. This is actually one of the few things I really took with me from <em>Learn Python the Hard Way</em> (see for instance <a href="//learnpythonthehardway.org/book/ex6.html#study-drills">these study drills</a>&mdash;that explaining your code in English line by line is a <em>great</em> tool for understanding and internalizing it! This is something I still keep in my toolbox for unknown/particularly tricky bits of code.</p>

<h4>Now I know better&hellip;</h4>

<p>This project has a) no tests, which make it a giant pain to refactor; b) haphazard architecture, because I was adding features as they occurred to me and I didn&rsquo;t go in with an overarching plan, and so variable names are unclear, patterns of work are inconsistent, bits of the code are held together with tape and bubble gum, etc., and c) poor readability, due in part to the inconsistent naming schemes, in part to the fact that I wasn&rsquo;t prioritizing readability and didn&rsquo;t know how to code for it, and in part to the fact that I thought gratuitous commenting would make up for hard-to-read code. Now I know better, or at least I hope I do. (When I&rsquo;m not lazy,) I write tests for my projects; I outline my projects ahead of time and plan for the features I may add in the future so the architecture stays coherent and I don&rsquo;t have to refactor halfway through (hopefully); and I strive for readability in my code itself (and don&rsquo;t rely on gratuitous commenting to do that work for me).</p>

<h4>New tools, new sensibilities</h4>

<p>I first learned about list comprehensions when <a href="//ballingt.com/">Tom</a> code-reviewed this project for me, though I didn&rsquo;t really understand what they were until much later&mdash;I initially thought they were something cool you could do in a return statement, which now makes me laugh. But now that I actually understand list comprehensions and a bunch of other handy tricks, I can write much tighter, more efficient code. What used to be this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_all_rosters</span><span class="p">():</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;&quot;Return a list of all of the roster filenames in the config file.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="n">all_rosters_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">config_file</span><span class="p">)</span>
</span><span class='line'>    <span class="n">all_rosters_list</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">all_rosters_file</span><span class="p">:</span>
</span><span class='line'>        <span class="n">all_rosters_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>
</span><span class='line'>    <span class="n">all_rosters_list</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">string</span><span class="o">.</span><span class="n">lower</span><span class="p">)</span>
</span><span class='line'>    <span class="n">all_rosters_file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">all_rosters_list</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;is now this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">get_all_rosters</span><span class="p">():</span>
</span><span class='line'>    <span class="sd">&quot;&quot;&quot;&quot;Return a list of all of the roster filenames in the config file.&quot;&quot;&quot;</span>
</span><span class='line'>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">config_file</span><span class="p">)</span> <span class="k">as</span> <span class="n">all_rosters_file</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">sorted</span><span class="p">([</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">all_rosters_file</span><span class="p">],</span> <span class="n">key</span><span class="o">=</span><span class="n">string</span><span class="o">.</span><span class="n">lower</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code is more compact not only because of the list comprehension (did I mention that list comprehensions are <em>awesome</em>?) but also because I smooshed the sorting into the same line as the list-making. There are other cases where before, I make a list, joined it into a string, and returned the string, but now, I return-a-join-this-list-into-a-string-please-thx-bai, all in one line. The more comfortable I get with Python, the less I need to separate things out and the more able I am to smush things together into fewer lines while still knowing what&rsquo;s going on.</p>

<h4>Global variables, global variables everywhere!</h4>

<p>By far the biggest pain in the neck about this whole program was keeping track of the global variables. I had a few of them floating around: a roster where I stored all of my students, a list of the students (because for some reason I needed to keep a separate list instead of just extracting it from the roster), the filename under which this roster was stored, a boolean telling me whether this was a new roster or not&hellip; And so every time there was a function that needed to interact with and modify, say, the roster, it had to go look for this global variable called <code>roster</code> (I guess because I didn&rsquo;t think to pass in the roster as an argument).</p>

<p>The solution to my dilemna? Classes!</p>

<p><img src="http://maiamcc.github.io/images/stayclassy.jpg" alt="&quot;Stay classy, San Diego!&quot;" /></p>

<p>I made a <code>Roster</code> class so that methods like <code>choose()</code>, instead of finding the global variable <code>roster</code>, accessing it, changing it, and sending it back into the ether to live its global-variable life, would instead be called as <code>myroster.choose()</code> and act on that specific instance of <code>Roster</code>, and there would be no confusion as to what the method was accessing/modifying. This refactoring solved another handful of problems, because I could decree that file names would be the same as roster names, and so <code>myroster.name</code> would also keep track of our current file name; similarly, <code>myroster.new</code><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> would keep track of whether or not this was a newly created roster. Basically, the <code>Roster</code> class let me get rid of all of my global variables, and now all I have to keep track of is the <code>current_roster</code> object. (Also, now I know better than to make it a global variable; if there are functions that need to access it&mdash;which I have tried to minimize&mdash;I pass it to that function as an argument.) Check out a high-level view of my <code>Roster</code> class to see all the functions contained therein:</p>

<p><img src="http://maiamcc.github.io/images/roster_class.png" alt="Can't see this? Bummer, I guess you have to go check out my github." /></p>

<h4>In conclusion</h4>

<p>I refactored some code and had a total blast from the past. I decided to see what I could improve without changing any of the functionality, just the code, and I cut my program from 536 lines down to 432, and to 399 if we remove vestigial testing functions. That&rsquo;s about a 20% reduction in length! I also convinced myself that I <em>do</em>, in fact, know how to write Python, and checked in with myself about how far I&rsquo;ve come in the last four months. I obviously have loads more to learn&mdash;and this exercise reminded me of some of the helpful strategies in my toolbox, like temporarily over-commenting to wrap my head around whacky and confusing code.</p>

<p>So, after reflection, my advice to new programmers who are jumping in the deep end like I did? Get your hands dirty. Write lots of code, without necessarily caring about what the finished product looks like&mdash;you&rsquo;ll learn so much more from finishing it and fixing it later than you will from agonizing over it. Get code review and pair with people who know more than you do&mdash;it&rsquo;s how you pick up the stuff that makes you a better programmer. But mostly, don&rsquo;t panic!</p>

<p>(This is a blog-ified version of a Hacker School Thursday Talk presentation given on 11/20/14.)</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>There are some slightly more finicky mechanics going on that you can read about in the README on github if you&rsquo;re really curious, but this is all that&rsquo;s relevant for this post.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p>No, that&rsquo;s not a typo; yes, it&rsquo;s a boolean, not a function.<a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markov Madness, Part 2]]></title>
    <link href="http://maiamcc.github.io/blog/2014/10/23/markov-madness-2/"/>
    <updated>2014-10-23T16:13:34-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/10/23/markov-madness-2</id>
    <content type="html"><![CDATA[<p>(If you&rsquo;re confused, see <a href="http://maiamcc.github.io/blog/2014/10/23/markov-madness/">my previous post on my Markov generator adventures</a>.)</p>

<p>The other thing I got up to today was implementing some sort of (questionable) part-of-speech-based intelligence. The idea was to have a dictionary for parts of speech, in addition to a dictionary of words. Then the work flow would go something like this:</p>

<ol>
<li>start with a random seed</li>
<li>what part of speech should come next? Given the POS&rsquo;s we already have, pick at random one that might follow it.</li>
<li>given the words we have, pick a word that might follow <em>of the correct part of speech</em>. If none exists, repeat from step 2.</li>
</ol>


<p>Now, using word trigrams and POS trigrams, the above process doesn&rsquo;t really add much beyond what using plain &lsquo;ol word trigrams gets you. Could I make something better, though, by using, say, 4-grams or 5-grams of parts of speech?<!--more--></p>

<p>Well&hellip; I&rsquo;ll leave that to you to decide. Here are a bunch of different sample texts from Pride and Prejudice. All are word-gram-3. Some have no POS support, some are POS-gram-3, and some are POS-gram-4. (POS-gram-5, incidentally, doesn&rsquo;t really work&mdash;the requirements on what word you need to come next get so specific that there generally isn&rsquo;t one and the program crashes.) Which of these seem the most sensical? Can you guess which are no-POS, POS-gram-3, and POS-gram-4? (There are three of each.) Make your guesses&mdash;and then, if you want to check yourself, look at the HTML source for answers.</p>

<blockquote><p>1) &lsquo;into a marriage with Miss Bennet. Miss Bingley&rsquo;s pretended regard.&ldquo; &#8220;Would you believe it, Lizzy, that is the most uncomfortable in her favour. Bingley was then disclosed in the same house with the length of his going away when I tell you, Miss Bennet. I send no compliments to Mr. Darcy:&mdash;but let me shift for myself; and, perhaps, if I were agreeing that we should all be there by Mrs. Hurst and Miss Bingley in a prudential light it places Mr. Darcy, by the awkwardness of the letter nor its writer were at the gate in the discharge of his&rsquo;<!--POS-gram = 4--></p>

<p>2) &lsquo;difference of situation and temper. Consider Mr. Collins&rsquo;s picture of a sort of man; and of late it has not time to reply, but hurrying instantly to her so expressively, and shook hands with great enjoyment; and the mere ceremonious salutation attending his entrance. Anxious and uneasy, the period to which you have pleasure,&ldquo; said Bingley; &#8220;and I am in earnest. I speak plainer? Do not wish me such an assurance of it, that the match with a bow of superior society; but I know very well able to do it, she turned suddenly towards him and Mr. Darcy, &#8220;There&rsquo;<!--POS-gram = 3--></p>

<p>3) &lsquo;from my thoughts.&ldquo; &#8220;When they all are.&rdquo; &ldquo;All young ladies were ready enough to determine her feelings in the time. Good gracious! when I have always seen a great deal more than I might have sufficient charms; and though the probability of error, and seek to recommend them,&rdquo; replied he; &ldquo;they are married!&rdquo; Elizabeth read on: &ldquo;I have no wish of seeing him almost for the felicity which a pair of fine eyes in amazement, but was too happy, however, and if he sees enough of Bingley&rsquo;s being withheld from seeing Jane, she seriously hoped he might change his mind&rsquo; <!--no POS support--></p>

<p>4) &lsquo;ever have courage to shew Mrs. Gardiner&rsquo;s former residence, and where she had listened to her eyes, envied everyone to whom they would have been impossible for us to Miss Darcy, who had only set that down as soon as they used to be privileged to whisper to Elizabeth, &ldquo;I hope not so. Painful recollections will not have forgotten where she was ready enough to make her resigned. As for my impertinence?&rdquo; &ldquo;For the liveliness of your own. But we are better acquainted&mdash;&rdquo; He was resolutely silent, however, and, from a circulating, he started back, and begging pardon, protested&rsquo; <!--no POS support--></p>

<p>5) &lsquo;months. Of having another daughter married to Mr. Bingley. It was at length return home; and she was to bring it in my own doing, and I thought only of the peace of the world, must make Hunsford extremely dull to a real, strong attachment. Pray, how violent was Mr. Bingley&rsquo;s chaise to go with him; and unwilling, for her sister&rsquo;s sake, to provoke him. Elizabeth was the son of old Wickham, the late perverse occurrences had thrown on many of the largest folios in the neighbourhood.&ldquo; &#8220;Oh! no&mdash;it is not so handsome as Wickham; or, rather, he has not&rsquo;<!--POS-gram = 4--></p>

<p>6) &lsquo;Darcy&rsquo;s praise occupied the chief of it. Can I speak plainer? Do not let your fancy run away with you. You will be an object of it, but Colonel Fitzwilliam was no more than she knew it myself, as it had not yet been able to enter the &mdash;shire. She had no other reply to this effect: &ldquo;I have been to persuade him against returning into Hertfordshire, anxiously renewing them at any time, etc. etc.; and if not, it would be gone in five minutes, you meant it to another, not to an end by exclamations and inquiries about the&rsquo;<!--POS-gram = 3--></p>

<p>7) &lsquo;but tell Lydia she shall have as much a debt of gratitude cannot enough acknowledge. By this time have been too pleasantly engaged to my fair cousins, though my brother left us yesterday, he imagined that we have found some resemblance of character to love each other in large mixed parties, it is the man! Now, Lizzy, I hardly know myself what it is no occasion for such a man would satisfy me. We will settle so quietly, and live in my power, I am very far from suspecting that she was discontented, she fancied that praise of himself, of&rsquo; <!--no POS support--></p>

<p>8) &lsquo;the opportunity of saying: &ldquo;Is your sister make such an evil. Human nature is particularly prone to it, and sometimes with playful gaiety, replied to her housekeeping, her parish and her uncle had been her firmest opinion. Her keenest attention was suddenly roused by the middle of June, Kitty was too much sense to recommend myself to hope the best, in accepting a man on the subject. This will never be in want of money. Younger sons cannot marry where they were grieved, how shocking it was to distribute her presents and describe the newest fashions. When this information was&rsquo;<!--POS-gram = 3--></p>

<p>9) &lsquo;the pleasantness of the park,&ldquo; he replied, &#8220;it has been my profession&mdash;I was brought up by him alone, was such as did think, than such a way.&rdquo; &ldquo;I can readily believe,&rdquo; answered he gravely, &ldquo;that reports may vary greatly with respect to me; and as she had not by any particular person, for though the uncomfortable feelings arising from all restraint, his life that, instead of a man of five-and-twenty. His air was grave and stately, and his relation of my nephew! Unfeeling, selfish girl! Do you think of themselves before anybody and everybody! If my vanity had taken on&rsquo;<!--POS-gram = 4--></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markov Madness, Part 1]]></title>
    <link href="http://maiamcc.github.io/blog/2014/10/23/markov-madness/"/>
    <updated>2014-10-23T15:52:47-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/10/23/markov-madness</id>
    <content type="html"><![CDATA[<p>Man, I&rsquo;ve hardly written code in <em>three whole weeks!</em> Such a strange feelings, after 3 solid months of coding. Anyway, back at Hacker School for the day, and with my OPW application in, I&rsquo;ve been itching to actually <em>write some code</em>, so I revisited my old <a href="https://github.com/maiamcc/markovgen">Markov generator</a> project, which takes a training corpus and generates psuedo-random texts in the style of that corpus.<!--more--></p>

<p>I&rsquo;ve tried a few different tacks today for getting texts that actually resembled English and not just word-soup. The first was using n-grams of varying n&rsquo;s when generating my texts[^1]. n = 1 is just random words and not worth testing. n = 2 is very nearly gibberish. n = 3 and n = 4 are the sweet spot of sensical-yet-random text; when we get to n = 5, it tends to be several verbatim sentences from the corpus patched together in odd ways, and at n = 6, it is almost consistently exact quotes from the text. At a guess, in more quote-unquote complex texts (i.e., those with more unique words) n = 5 will be closer to verbatim, and in texts with more common words, there will be more room for deviation from any pattern that the generator falls into, and thus n = 5 will be distinct from the original text. Here are generated texts using n-grams of increasing n, from <em>Pride and Prejudice</em>.</p>

<p>n = 2:</p>

<blockquote><p>&lsquo;to-morrow; and as she could not do. He looked towards clearing him, Charlotte Lucas, when you an admiration will afford, and the establishment were said Miss Darcy was at no reason away, where Mr. Bingley was meant by me. I am sure,&ldquo; she had scarcely ever mentioned to her, &#8220;these offenses might have the temptation, added, &#8220;that my manner in the walk to Mr. Darcy liked him.&rdquo; &ldquo;But it was diffuse in money which had ended only could listen, therefore, pardon for having very day confirms my dear,&rdquo; said by their present party; but their separation. To these three or&rsquo;</p></blockquote>

<p>n = 3:</p>

<blockquote><p>&lsquo;been used to want to speak with composure when she ceased speaking, &ldquo;I have just received from Mr. Collins.&rdquo; &ldquo;From Mr. Collins! and what can he mean by apologising for being simply dressed. She likes to have on the instrument, Eliza, and you ought to have on the length of his description of Jane. She felt it incumbent on her side. But I am in such awe of her wishes. Their sister&rsquo;s wedding day arrived; and Jane seem so wholly unconnected with any other man it would go. But he found, in reply to his ideas of happiness! But it&rsquo;</p></blockquote>

<p>n = 4:</p>

<blockquote><p>&lsquo;was his conviction of its being heard. Elizabeth soon saw that she was not very differently engaged. &ldquo;There is also one other person in the room. Colonel Fitzwilliam seemed really glad to see them; he had felt the smallest interest, and from none received either attention or pleasure. Miss Bennet he acknowledged to be pretty, but she smiled too much. Mrs. Hurst and Miss Bingley was uncivil to her, and she felt how little would be gained by her attempting to pursue them. Calling back the servant, therefore, she commissioned him, though in so breathless an accent as made her&rsquo;</p></blockquote>

<p>n = 5</p>

<blockquote><p>&lsquo;some manner connected with the letter he held. It suddenly struck her that it might be from Lady Catherine; and she anticipated with dismay all the consequent explanations. She followed her father to the fire place, and they both sat down. He then said, &ldquo;I have received a letter this morning that has astonished me exceedingly. As it principally concerns yourself, you ought to know its contents. I did not know what to think.&rdquo; &ldquo;She is a very good kind of woman, not too clever to be a valuable neighbour to Mrs. Bennet. They had several children. The eldest of&rsquo;</p></blockquote>

<p>Compare that to n-grams of increasing n from <em>Harry Potter and the Chamber of Secrets</em>. There&rsquo;s the same pattern of higher n&rsquo;s both making more sense and being closer to the original text, but we don&rsquo;t start getting verbatim text excerpts until n = 6.</p>

<p>n = 2:</p>

<blockquote><p>&lsquo;knock people knew what Ginny out, reflecting the train harder than his hand- picked it into a nobody heard him - three of that your fault,&ldquo; retorted Draco. &#8220;The diary,&rdquo; said in the stairs. &ldquo;Remember, boy was always top Ron had in Transfiguration. &#8220;I don&rsquo;t care, he saw the clouds and George must&rsquo;ve opened the elf came back in the pitch - the wiser -&rdquo; &ldquo;But, Professor,&rdquo; said Harry had never touched Harry&rsquo;s own free rein from his feet climbing through the full of whom were trickling down to turn up off the ground with a beacon of excitement gripped&rsquo;</p></blockquote>

<p>n = 3</p>

<blockquote><p>&lsquo;Near sunset, Fred and George were now crammed into boxes on the side road where the photographer had stepped on what to do. &ldquo;Not lost are you, Myrtle?&rdquo; said Hermione as the Weasleys slouched outside with Harry behind them. &ldquo;No, he was doing something and I, um, I asked her not to smile. And Lockhart was looking furious, and as he tried to put himself under arrest. It drives Mum mad.&rdquo; &ldquo;That&rsquo;s the main road ahead, but their street was empty. &#8220;Okay,&rdquo; he said. &ldquo;Id better get going, Hagrid, it&rsquo;s Transfiguration next and I&rsquo;ve got -well, I think he did,&rdquo;&rsquo;</p></blockquote>

<p>n = 4</p>

<blockquote><p>&lsquo;say no to a large bottle of something labeled Skele-Gro. &ldquo;You&rsquo;re in for a rough night,&rdquo; she said, pouring out a steaming beakerful and handing it to them. &ldquo;I told your dad how to use a telephone last summer - he&rsquo;ll know. Call me at the orphanage she lived just long enough to copy down a name or date, then falling asleep again. He had made up his mind what he was going to tear it. While Ron kept watch he tugged and twisted, and at last, after several tense minutes, the paper came free. It was a nightmare -&rsquo;</p></blockquote>

<p>n = 5</p>

<blockquote><p>&lsquo;side of the field. &ldquo;They love it here &hellip;. Dad&rsquo;s too soft with them; he thinks they&rsquo;re funny &hellip; .&rdquo; He swept off his plumed hat and bowed them inside. It was an incredible sight. The dungeon was full of hundreds of pearly-white, translucent people, mostly drifting around a crowded dance floor, waltzing to the dreadful, quavering sound of thirty musical saws, played by an orchestra on a raised, black-draped platform. A chandelier overhead blazed midnight-blue with a thousand more black candles. Their breath rose in a mist before them; it was like stepping into a freezer. &ldquo;Shall&rsquo;</p></blockquote>

<p>n = 6</p>

<blockquote><p>&lsquo;into the station. Harry had caught the Hogwarts Express the previous year. The tricky part was getting onto platform nine and three-quarters, which wasn&rsquo;t visible to the Muggle eye. What you had to do was walk through the solid barrier dividing platforms nine and ten. It didn&rsquo;t hurt, but it had to be done carefully so that none of the Muggles noticed you vanishing. &ldquo;Percy first,&rdquo; said Mrs. Weasley, looking nervously at the clock overhead, which showed they had only five minutes to disappear casually through the barrier. Percy strode briskly forward and vanished. Mr. Weasley went next; Fred and&rsquo;</p></blockquote>

<p>Fun bonus: infinite loop!</p>

<blockquote><p>&ldquo;as much as possible prevented her husband from pressing her; but Mr. Collins could not conceal his apprehension of Lady Catherine&rsquo;s being rather displeased by her staying at home. When they were gone, Elizabeth, as if intending to exasperate herself as much as possible prevented her husband from pressing her; but Mr. Collins could not conceal his apprehension of Lady Catherine&rsquo;s being rather displeased by her staying at home. When they were gone, Elizabeth, as if intending to exasperate herself as much as possible prevented her husband from pressing her; but Mr. Collins could not conceal his apprehension of Lady&rdquo;</p></blockquote>

<p>[^1] an ngram is a group of n words considered at a time, where the first n-1 words key to the last word. So for instance, if I&rsquo;m working with tri-grams (n = 3) and the phrases &ldquo;it is a,&rdquo; &ldquo;it is silly&rdquo;, and &ldquo;it is Frank&rdquo; appear in my corpus, when my corpus gets loaded into a big dictionary, <code>[('it', 'is')]</code> will key to <code>['a', 'silly', 'Frank']</code>. Then, when I&rsquo;m generating random text and I already have &ldquo;it is&rdquo;, I can look in <code>mydict[('it', 'is')]</code> for words that might possibly follow that phrase. I then pick one at random, stick it onto the end of my text (say, &ldquo;it is Frank&rdquo;) and repeat (`mydict[(&lsquo;is&rsquo;, &lsquo;Frank&rsquo;)] &mdash;> [&lsquo;sick&rsquo;, &lsquo;angry&rsquo;,&lsquo;the&rsquo;]).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reflections on My First Open-Source Contribution]]></title>
    <link href="http://maiamcc.github.io/blog/2014/10/22/reflections-on-my-first-open-source-contribution/"/>
    <updated>2014-10-22T15:52:38-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/10/22/reflections-on-my-first-open-source-contribution</id>
    <content type="html"><![CDATA[<p>Having successfully submitted my <a href="//gnome.org/opw/">OPW</a> application, and in the process submitting my first open-source contribution, I have lots of thoughts and feelings.</p>

<h3>Part 1: Setting up the environment</h3>

<p>Setting up your environment is <em>awful</em>. You think, &ldquo;how long can it take to set up a virtual machine and install this software?&rdquo; The answer? <em>Longer than you could ever imagine.</em> Especially if your project is on a platform you&rsquo;re not familiar with, ask for advice early and often&mdash;because inevitably, something will go wrong and you&rsquo;ll need to ask someone wiser for help anyway, and you might as well not a bunch of junk to undo by the time you do. (Like when I tried to install VirtualBox Guest Additions and it destroyed by VM&rsquo;s video driver, and in fact all video drivers on any VMs I later installed. I had to wipe VirtualBox and start over. No fun.)<!--more--></p>

<p>For those curious, my long and arduous process involved several buggy installations of Ubuntu and much wrestling with VirtualBox; eventually installing Fedora 21 on the recommendation of the project mentor. (Fedora 21, incidentally, is still in alpha and thus moderately scary.) I &ldquo;quick&amp;dirty&rdquo; built GNOME Music, the program I intended to work on, and it <em>worked</em>&hellip; sort of. None of my music files would play, and none of the metadata/durations were showing up&mdash;all of them were by Unknown Artist on Unknown Album and had duration 0:00.</p>

<p>Turns out I was missing lots of GStreamer plugins. I installed various plugins, until I quite literally installed <em>all of the GStreamer plugins</em> (<code>sudo yum install gstreamer1-plugins-*</code>, I kid you not), and mp3&rsquo;s would still not play. I eventually figured out what was wrong by taking a step back from the application and attempting to play the file directly from Terminal, with <code>gst-launch-1.0 playbin uri=file:///home/joe/random-media-file.mp3</code>. The error message I got told me I needed a MPEG-1 Layer 3 Decoder, but more importantly, this step reminded me how debugging works. When in doubt, take away as many of the confounding variables as possible&mdash;like for instance, the borked program install&mdash;and see how much you can accomplish in its barest form, ideally from Terminal because then you will likely get useful error messages.</p>

<p>Oh, and another important thing? Making sure you have valid media. When in doubt, always check the validity of the files you&rsquo;re trying to do stuff to&mdash;can save you a lot of time! Like when I got mp3&rsquo;s working but then spent an hour tearing my hair out about the ogg&rsquo;s that weren&rsquo;t working? Turns out they were just somehow messed up because I&rsquo;d converted them from mp3 myself with VLC on my machine. At least, I can only assume that something was funky about those files, because opening <a href="//www.gnu.org/music/FreeSWSong.ogg">an ogg file off the interwebs</a> worked just fine!</p>

<p>So now, the only problem was that GNOME Music wasn&rsquo;t showing me any metadata about the tracks (including their duration). Having learned my lesson, I checked on my input&mdash;did the files actually have metadata? According to <a href="https://wiki.gnome.org/Apps/EasyTAG">EasyTAG</a>, yes they did. Vadim helped me decipher some error message gibberish and concluded that the problem was something with Tracker. In my limited understanding, indexes the files on your machine and stores all of that data in a database&mdash;GNOME Music looks at that database, using SPARQL queries, to get data about the songs. If that database is all messed up, then so is the data (or lack thereof) that GNOME Music shows.</p>

<p>After wrestling with all manner of resets and diagnostics, I ended up resetting to one of my VM snapshots from the beginning of this whole process and just building the thing via <a href="//wiki.gnome.org/HowDoI/Jhbuild">JHBuild</a>. Hit some snags, but ultimately it worked. It was more of a pain than the &ldquo;quick&amp;dirty&rdquo; build would have been, had it actually worked&hellip; but given the amount of pain that the &ldquo;quick&amp;dirty&rdquo; way brought me, JHBuild was <em>infinitely</em> preferable in the end. I don&rsquo;t know what went on in my JHBuild build that mitigated my Tracker problem, but there was something, and it meant that (exactly a week after I&rsquo;d started this process) I <em>finally</em> had a working, hackable version of GNOME Music!</p>

<p>So, lessons?</p>

<ul>
<li>Write it down or you will forget it (which is what I&rsquo;m doing here!)</li>
<li>Check your input media</li>
<li>IRC doesn&rsquo;t automatically keep logs!</li>
<li>Back up early and often. (VirtualBox lets you take snapshots of the state of your VM. DO THIS LOTS!)</li>
<li>There are lots of very friendly, knowledgeable folks on IRC, and nearly every thing you run into in the FOSS world has its own IRC channel. So <em>ask for help</em>!</li>
<li>Test things as piecemeal as you can. The more components are involved, the more likely it is that one of them is broken and the harder it is to pinpoint the error. When possible, do things directly from Terminal.</li>
<li>VMs are baffling because they shortcut keys are totally different. My brain is bent. I keep wondering why shortcuts on OSX aren&rsquo;t doing anything, only to realize that I&rsquo;m hitting <code>ctrl</code> instead of <code>cmd</code>. Oops.</li>
<li>Sometimes the &ldquo;easy&rdquo; way is easier. Sometimes it&rsquo;s much, much harder.</li>
<li>Sometimes the best thing to do is to reset and start over with another tack.</li>
</ul>


<p>What about writing the actual code, you say? That is, I believe, a post for another day!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Re-Learning How to Ask Questions]]></title>
    <link href="http://maiamcc.github.io/blog/2014/10/13/re-learning-how-to-ask-questions/"/>
    <updated>2014-10-13T13:36:32-04:00</updated>
    <id>http://maiamcc.github.io/blog/2014/10/13/re-learning-how-to-ask-questions</id>
    <content type="html"><![CDATA[<p>I spent a ton of my time at Hacker School learning how to ask questions (or, to put a finer point on it, learning how to <em>not know things</em> and admit to others that I don&rsquo;t know things). The main reason that HS was so hard at first was that I wasn&rsquo;t good at asking questions, at admitting when I didn&rsquo;t know things, at letting myself (I feared) appear &ldquo;stupid&rdquo; in front of others. I was still better than some folks at pushing through this, but I wasn&rsquo;t as good as I would have liked. (This is all tied into impostor syndrome, of course.)</p>

<p>I got vastly better at this skill as I spent more time at Hacker School. I grew more comfortable in the environment, I gained trust in the folks around me and in my own abilities, and I came to believe that my asking questions, even ones about really basic (quote-unquote-&ldquo;basic&rdquo;) things, was a display of intelligence rather than a display of ignorance.</p>

<p>What I didn&rsquo;t realize about my shiny new skill of &ldquo;Admitting When I Don&rsquo;t Know Something and Asking Questions&rdquo; was how context-dependent it is. At Hacker School, in person or on Zulip, I feel totally comfortable asking questions about &ldquo;simple&rdquo; things, and admitting that I&rsquo;m totally in over my head with, say, troubleshooting my Virtual Machine installation and would someone please help me, and what is actually the difference between GET and POST because I never really learned it&hellip; that sort of thing. But as I prepare my application for the coming round of <a href="https://opw.gnome.org">OPW</a> and dive head-first into IRC chats about programs and programming styles I&rsquo;ve never used before, that all seem to require strange dependencies or have to be run on X virtual machine with Y stuff built on it, I recognize a feeling from my early days of Hacker School.<!--more--></p>

<p>I&rsquo;m scared. I&rsquo;m intimidated. I feel like I don&rsquo;t belong here, like I don&rsquo;t know enough. Like I&rsquo;m an impostor, and any second I will be found out. And as I force myself through these feelings to ask clarifying questions about whether x and y do in fact need to be run off a Linux VM, or go back to Zulip to ask a question about IRC that I&rsquo;m too embarrassed to ask IN the IRC room I&rsquo;m in, or keep silent with a question about how the hell I&rsquo;m going to get started on this project because I figure everyone else knows the answer to that question and admitting that I don&rsquo;t will automatically disqualify me from OPW, I realize that I&rsquo;m not done practicing the skills of Asking Questions and Admitting Ignorance.</p>

<p>I got pretty adept at these things at Hacker School, but the OSS/OPW world is an entirely different environment, and I need to relearn these skills, as well as the self-confidence and trust that I need to apply them. Some of this will be learning the skills of this new world so I feel less like an impostor and more like I can hold my own, even if I don&rsquo;t know x and y. Some of this will be asking &ldquo;dumb&rdquo; questions and realizing that nothing bad happens when I do. Some of this will be talking to other people in this community, growing to trust them, and hearing their experiences with the same thing. And some of this&hellip; will just be time and practice and getting used to it. And when I land in another new environment&mdash;say, my first tech job&mdash;I will likely need to learn all of these skills over again.</p>

<p>Whelp. Time to get to work.</p>
]]></content>
  </entry>
  
</feed>
