<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://code.maiamccormick.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://code.maiamccormick.com/" rel="alternate" type="text/html" /><updated>2023-05-09T14:42:16-04:00</updated><id>https://code.maiamccormick.com/feed.xml</id><title type="html">Maia McCormick</title><subtitle>The web presence of Maia Remez McCormick, NYC-based programmer, hacker, and jack-of-several-trades.</subtitle><author><name>Maia McCormick</name></author><entry><title type="html">Job Hunting While Day-Jobbing</title><link href="https://code.maiamccormick.com/2021/06/27/job-hunting.html" rel="alternate" type="text/html" title="Job Hunting While Day-Jobbing" /><published>2021-06-27T12:22:24-04:00</published><updated>2021-06-27T12:22:24-04:00</updated><id>https://code.maiamccormick.com/2021/06/27/job-hunting</id><content type="html" xml:base="https://code.maiamccormick.com/2021/06/27/job-hunting.html">&lt;p&gt;Interviewing is stressful enough, but interviewing &lt;em&gt;while&lt;/em&gt; doing your day job?&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Yikes!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/job-hunting/yikea.jpeg&quot; alt=&quot;Yikea (like Ikea, but for Yikes)&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, I just did it,&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; and I’m here to tell you that it’s totally doable! In this post, I share my thoughts on interview prep, minimizing day job disruptions, keeping up appearances at work, etc.&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;This last time around the interview cycle, I was still working at a company I wanted to do right by, but a lot of the advice below applies whether your aim is “I don’t want to fuck over my current coworkers” or “I want to not burn bridges so I can get a recommendation from these people in future”. (If you have no fucks left to give about your current job, then go nuts!)&lt;/p&gt;

&lt;p&gt;As always, take my advice with a grain of salt, as &lt;a href=&quot;/images/job-hunting/no-idea.png&quot;&gt;I have no idea what I’m doing&lt;/a&gt;. Got more tips? Leave a comment below! Now, without further ado, I present:&lt;/p&gt;

&lt;h2 id=&quot;maias-tips-and-tricks-for-job-hunting-while-day-jobbing&quot;&gt;Maia’s Tips and Tricks for Job Hunting While Day-Jobbing&lt;/h2&gt;

&lt;h3 id=&quot;dont-panic&quot;&gt;Don’t Panic&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/images/job-hunting/dont-panic.jpg&quot; alt=&quot;Don&apos;t Panic (from Hitchhiker&apos;s Guide to the Galaxy)&quot; /&gt;
No seriously, don’t panic. It’s gonna be okay. You’re gonna start slowly and work your way up to the actual interviewing, you’re gonna be smart about scheduling interviews to minimize disruption of your day job, and you are hireable and desirable and don’t let that little jerk voice in your head tell you otherwise.&lt;/p&gt;

&lt;h3 id=&quot;set-secrecy-levels-to-eh-something&quot;&gt;Set Secrecy Levels to… Eh, Something&lt;/h3&gt;
&lt;p&gt;If your current employer suspects that you’re interviewing, it’s not the worst thing&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;! Don’t go shouting it from the rooftops, and try to be discrete, but also don’t worry too hard about whether you’re being conspicuous. You’re probably being a lot less obvious than you think (your co-workers/bosses aren’t actually scrutinizing you that closely). But also, if someone suspects that you’re looking, whatever.&lt;/p&gt;

&lt;p&gt;Remember that you don’t need to explain your “busy” calendar blocks to anyone. Get in the habit early of not offering explanations—instead of “Out of Office (dentist)”, just mark “Out of Office”.&lt;/p&gt;

&lt;p&gt;Don’t tell your boss(es) before you’re ready to give notice, but you can absolutely tell one or two trusted coworkers that you’re looking (this can be great moral support). Consider who you will ask for a reference, and consider telling them that you’re job hunting a little in advance of actually asking for the reference.&lt;/p&gt;

&lt;h3 id=&quot;minimizing-work-disruptions&quot;&gt;Minimizing Work Disruptions&lt;/h3&gt;
&lt;p&gt;Job hunting while working a job is tricky but absolutely doable. There will be some disruption to your day job, but with careful planning and good bookkeeping, you can minimize both that disruption, and the stress and guilt that sometimes comes with it.&lt;/p&gt;

&lt;p&gt;Step 1 is to accept that you won’t be doing your day job at full capacity while interviewing. That’s okay. Set expectations at work: keep people updated on your project timelines as they inevitably fall a little behind, and don’t bite off more work than you can chew. Ideally, you can make an excuse of the form “I’ve got some personal stuff going on right now so I’ll be working a little under capacity.” That’s it, that’s all they need to know. Resist the instinct to give more details or make more excuses—you’re allowed to have a life outside of work.&lt;/p&gt;

&lt;p&gt;This may be a no-brainer, but make sure that any interviews etc. are marked as “busy” on your work calendar—you don’t want people trying to schedule meetings that you then have to decline. I heartily recommend using &lt;a href=&quot;https://calendly.com/&quot;&gt;Calendly&lt;/a&gt; for scheduling.&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;To minimize disruption to your workday, take calls/interviews at the beginning or end of your workday if you can (or during your lunch hour). That said, respect your body’s rhythms. If you’re foggy in the mornings or if you start to flag in the afternoons, don’t schedule technical interviews then.&lt;/p&gt;

&lt;h3 id=&quot;interview-prep&quot;&gt;Interview Prep&lt;/h3&gt;

&lt;h4 id=&quot;timeline&quot;&gt;Timeline&lt;/h4&gt;
&lt;p&gt;If, like me, you’re &lt;em&gt;super intimidated&lt;/em&gt; by the prospect of job hunting, remember that you’re allowed to start slow. You don’t need to be 100% sure you want to leave or completely ready to do an onsite to start doing practice problems or to update your resume.&lt;/p&gt;

&lt;p&gt;Something that worked well for me: as soon as I started thinking about job hunting, I put a recurring weekly 1 hour block of “interview prep” time on my calendar. It helped me make a little progress each week, without freaking out at all times about whether I “should” be prepping.&lt;/p&gt;

&lt;h4 id=&quot;practice-interviews&quot;&gt;Practice Interviews&lt;/h4&gt;
&lt;p&gt;Below I give resources that you can use for self-study, but IMHO, by far the best way to prep for interviews is to do practice interviews with a real live human.&lt;/p&gt;

&lt;p&gt;Reach out to your tech communities, old coworkers, friends in the industry, etc.—more than likely, there will be people willing to give you mock interviews in any of the above. In general, everyone in tech has had someone help them out in this capacity, so most of us are paying it forward and happy to help others!&lt;/p&gt;

&lt;h4 id=&quot;what-to-prep&quot;&gt;What to Prep&lt;/h4&gt;
&lt;h5 id=&quot;a-resume&quot;&gt;A. Resume&lt;/h5&gt;
&lt;p&gt;Update your resume with all the cool stuff you’ve been doing lately! I recommend writing down all of the interesting projects you’ve done at this job; you’ll only end up putting a few on your resume, but having a list of things you’ve worked on lately will be helpful for preparing answers to behavioral questions (“tell me about a time a project ran long” etc.).&lt;/p&gt;

&lt;h5 id=&quot;b-system-design&quot;&gt;B. System Design&lt;/h5&gt;
&lt;p&gt;This is a big one the more senior you get. You should be able to talk in broad strokes about how you’d design various systems, and be familiar (at least in passing) with database operations, caching, load balancing, etc.&lt;/p&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/madd86/awesome-system-design&quot;&gt;Awesome System Design&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/donnemartin/system-design-primer&quot;&gt;System Design Primer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.freecodecamp.org/news/systems-design-for-interviews/&quot;&gt;System Design for Interviews&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.educative.io/courses/grokking-the-system-design-interview&quot;&gt;Grokking the System Design Interview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Any number of system design/tech podcasts&lt;sup id=&quot;fnref:5&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;c-coding--algorithms&quot;&gt;C. Coding &amp;amp; Algorithms&lt;/h5&gt;
&lt;p&gt;I was pleasantly surprised that few of my companies asked me algorithm-heavy “invert this binary tree”-type problems, but it’s good to be prepared. Generally for senior roles, you should focus on being able to code cleanly; narrating your thought process as you go; and discussing the time and space complexity of your solutions.&lt;/p&gt;

&lt;p&gt;Some additional things that will help you in coding interviews:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;liberal use of TODOs so you don’t bog yourself down (e.g. “there’s probably an edge case here, but let me finish the rest of the function and I’ll come back to it”)&lt;/li&gt;
  &lt;li&gt;willingness to ask questions/use Google/admit when you don’t know stuff (“ugh, is the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.sort()&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.sorted()&lt;/code&gt;? Well, that’s the sort of thing I’d Google, let’s assume it’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.sort()&lt;/code&gt; for now…”).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://interviews.school/&quot;&gt;interviews.school&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://runestone.academy/runestone/books/published/pythonds/index.html&quot;&gt;Problem Solving with Algorithms and Data Structures using Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/&quot;&gt;Leetcode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hackerrank.com/dashboard&quot;&gt;Hackerrank&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Any &lt;a href=&quot;https://adventofcode.com/&quot;&gt;“Advent of Code”&lt;/a&gt; problems&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;d-behavioral-questions-aka-soft-skills&quot;&gt;D. Behavioral Questions (aka “Soft Skills”)&lt;/h5&gt;
&lt;p&gt;Don’t neglect this prep! Take the time to outline answers to the common behavioral questions (“tell me about a conflict you had with a coworker” etc.) and practice talking through them, so you have examples at your fingertips. (If your current company has certain behavioral questions they like to ask in interviews, make sure you can answer all of those.)&lt;/p&gt;

&lt;p&gt;In particular, it’s useful to workshop these answers with a friend/collegue/mentor so that you can cast difficult situations in the best light, make sure you’re being honest without being overly critical, etc.&lt;/p&gt;

&lt;h3 id=&quot;where-to-apply&quot;&gt;Where to Apply&lt;/h3&gt;
&lt;p&gt;This advice applies to any job hunt, but &lt;em&gt;especially&lt;/em&gt; when you’ve got limited bandwidth because you’re still day-jobbing: &lt;em&gt;if you can afford to be picky with your companies, be picky!&lt;/em&gt; Narrow your options and don’t try to play the field—move forward with at most 3 companies you’re excited about. (I did 5, that was doable but also pretty stressful).&lt;/p&gt;

&lt;p&gt;Don’t be afraid to bow out of the process early with a given company if you’re not excited about them. You can also always put companies on hold, and come back to them if none of your first choice companies work out.&lt;/p&gt;

&lt;h3 id=&quot;scheduling-interviewstimeline&quot;&gt;Scheduling Interviews/Timeline&lt;/h3&gt;
&lt;p&gt;Do your best to keep all of your interview processes in sync with each other: first all the preliminary recruiter chats, and when you’ve finished those, &lt;em&gt;then&lt;/em&gt; all the tech screens, and &lt;em&gt;then&lt;/em&gt; the onsites, etc.&lt;/p&gt;

&lt;p&gt;Be up front about your timeline from the very beginning, and repeat it every chance you get. Setting expectations for “I hope to do all my onsites the week of X and make a decision by Y” will help your interview coordinators help you, and make it easier for you to keep all your interview processes in sync with each other. Remember that the bigger a company, the slower it probably moves, so err on the side of starting earlier with the bigger companies on your list.&lt;/p&gt;

&lt;h4 id=&quot;on-taking-vacation-while-interviewing&quot;&gt;On Taking Vacation While Interviewing&lt;/h4&gt;
&lt;p&gt;If you &lt;em&gt;can&lt;/em&gt; take a whole week off of work to knock out all of your onsites, I highly recommend it! It gives you more breathing room, and looks less conspicuous than a smattering of random mid-week days off. Remember, you want to take not only enough time to do the interviews, but also enough time to rest between them.&lt;/p&gt;

&lt;p&gt;A note to those with unlimited PTO: &lt;em&gt;take that vacation, yo!&lt;/em&gt; Remember, you don’t get paid out for “unused” vacation days, so you’re shortchanging yourself unless you take off the time that you need.&lt;/p&gt;

&lt;h4 id=&quot;take-a-damn-break&quot;&gt;Take a Damn Break&lt;/h4&gt;
&lt;p&gt;I highly, highly, &lt;em&gt;highly&lt;/em&gt; recommend a break between jobs. It’s the only time in this capitalist grind-machine that we get this much time off, so take advantage of it.&lt;/p&gt;

&lt;p&gt;I mention this here because the sooner you tell companies about your start date needs, the more likely it is that they can accommodate you (and if they can’t, you can decide whether that’s a deal-breaker). In general, start date timelines can take the form of specific dates (“I want to start on mm/dd/yyyyy”) or intervals (“I want to start six weeks after signing”). I prefer the latter because it’s not subject to getting messed up if interview timelines run long, but it’s worth it to &lt;em&gt;keep repeating&lt;/em&gt; to your recruiter, hiring manager, etc. (It’s easy for someone to hear “I want to start 6 weeks after signing” as “I want to start on August 1”, and when your interviews drag out and you sign on July 15, they still think you want to start on August 1.)&lt;/p&gt;

&lt;h3 id=&quot;in-the-interview&quot;&gt;In the Interview&lt;/h3&gt;
&lt;p&gt;There’s plenty of tech interview advice out there that’s way better than what I can give, but I &lt;em&gt;will&lt;/em&gt; say: in your interview, don’t shit on your current job. If you have big frustrations, get them out of your system with a friend, and then workshop diplomatic answers to standard interview questions about why you’re leaving, a time you had a conflict with a coworker, etc.&lt;/p&gt;

&lt;p&gt;Also, remember that when negotiation time rolls around, “I could always just stay at my current job”is a very powerful bargaining chip. Don’t take that away from yourself even if you have no intention of staying at your current job.&lt;/p&gt;

&lt;h3 id=&quot;congrats-youve-landed-an-awesome-job-&quot;&gt;Congrats, You’ve Landed an Awesome Job 🎉&lt;/h3&gt;
&lt;p&gt;Give your notice, thank your current job (or don’t), consider giving an exit interview with some honest feedback (or don’t)… and &lt;em&gt;celebrate&lt;/em&gt;! Take a damn break and relax a little between roles. If you’ve got bandwidth, consider paying it forward by giving some mock interviews to people in your communities. If you’re willing, consider sharing your new salary with friends and old coworkers to make this industry more transparent.&lt;/p&gt;

&lt;p&gt;And take a deep breath. You did it, congrats!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;This post assumes that your day job is also in tech or some field that’s similarly flexible in terms of hours, oversight, taking meetings/breaks/vacation, etc. If you’re hunting for a tech job while in retail etc., I have no concrete advice for you, but godspeed and good luck, and feel free to hit me up for a practice interview. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Note that I was interveiwing as a &lt;em&gt;senior software engineer&lt;/em&gt; (6 yrs. experience). I think this affected the number of companies who wanted to interview me, and the types of interview questions I got. (For instance, my interviews were more focused on system design and troubleshooting than coding and algorithms, and for more junior positions, I’d probably expect the opposite.) &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;There are of course some toxic workplaces that are the exception to this rule. I trust you to know the answer to this question for your specific workplace. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Spring for the pro plan for a month or two, and you can send individual meeting-booking links to all of the recruiters etc. you’re working with, while being sure that nothing scheduled will interfere with anything on your work calendar. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;I particularly liked using podcasts because it was interview prep I could do while out on a walk, instead of being glued to my computer &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Maia McCormick</name></author><category term="tech" /><category term="interviews" /><category term="soft skills" /><summary type="html">Interviewing is stressful enough, but interviewing while doing your day job?1 Yikes! This post assumes that your day job is also in tech or some field that’s similarly flexible in terms of hours, oversight, taking meetings/breaks/vacation, etc. If you’re hunting for a tech job while in retail etc., I have no concrete advice for you, but godspeed and good luck, and feel free to hit me up for a practice interview. &amp;#8617;</summary></entry><entry><title type="html">Amsterdam Recommendations</title><link href="https://code.maiamccormick.com/2020/02/27/amsterdam-recommendations.html" rel="alternate" type="text/html" title="Amsterdam Recommendations" /><published>2020-02-27T16:19:24-05:00</published><updated>2020-02-27T16:19:24-05:00</updated><id>https://code.maiamccormick.com/2020/02/27/amsterdam-recommendations</id><content type="html" xml:base="https://code.maiamccormick.com/2020/02/27/amsterdam-recommendations.html">&lt;p&gt;Huh, I guess I still have a blog!&lt;/p&gt;

&lt;p&gt;How many of you folks out there are going to &lt;a href=&quot;https://events.linuxfoundation.org/kubecon-cloudnativecon-europe/&quot;&gt;Kubecon EU 2020 in Amsterdam&lt;/a&gt;? Well, &lt;a href=&quot;https://tilt.dev/&quot;&gt;Team Tilt&lt;/a&gt; will be there with bells on! …But I myself, unfortunately, will not. Which is a particular shame, because I studied in Amsterdam for a semester in undergrad, and would love to go back! In lieu of that, I’ve written up a bunch of stuff I’d do if I went, and that I want my coworkers to do in my stead. Thought I’d post it here for the whole internet to see—if you want to have some fun in Amsterdam on my behalf, then please please do so! (And if anyone wants to bring me back some cheese or hagelslag, well, I wouldn’t complain 😋 ).&lt;/p&gt;

&lt;p&gt;To all of y’all going to Kubecon (or just touristing around Amsterdam): &lt;em&gt;veilige reizen, en veel plezier&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/amsterdam_2_canalhouses.jpg&quot; alt=&quot;Canal houses in the sun&quot; /&gt;
&lt;em&gt;Canal houses in the sun (Maia McCormick, 2013)&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;some-amsterdam-recommendations-based-on-a-semester-abroad&quot;&gt;Some Amsterdam Recommendations Based on a Semester Abroad&lt;/h2&gt;
&lt;h3 id=&quot;general-advice&quot;&gt;General Advice&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Honestly just wander around a lot—city center, old churches, canals, any of the delightful parks…&lt;/li&gt;
  &lt;li&gt;If you want to see/navigate the city properly, rent a bike while you’re there.&lt;/li&gt;
  &lt;li&gt;Pack your rain gear.&lt;/li&gt;
  &lt;li&gt;For the love of glob don’t walk on the bike paths.&lt;!-- more --&gt;&lt;/li&gt;
  &lt;li&gt;FYI, cafes or coffee houses are for coffee; coffee shops are for pot.&lt;/li&gt;
  &lt;li&gt;In general: wander, get lost, don’t be stuck in your phone, drop into any place that looks interesting, and go pursue some &lt;a href=&quot;https://stuffdutchpeoplelike.com/2015/09/23/gezelligheid-gezellig/&quot;&gt;gezelligheid&lt;/a&gt; (basically “coziness”, similar to the Danisy &lt;em&gt;hygge&lt;/em&gt;): pop into a random cafe in the city center, drink a beer and eat a toastie while gazing out at some canals, and &lt;em&gt;enjoy&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;museums-etc&quot;&gt;Museums etc.:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Rijksmuseum (classic art museum, GORGEOUS, will be mobbed)&lt;/li&gt;
  &lt;li&gt;Stedelijk (right by Rijskmuseum, probably less mobbed, contemporary art, looks like a giant bathtub)&lt;/li&gt;
  &lt;li&gt;Anne Frank House&lt;/li&gt;
  &lt;li&gt;Artis (the zoo, which is actually surprisingly really awesome–and iirc not far from the botanic gardens)&lt;/li&gt;
  &lt;li&gt;Jewish Historical Museum/old Portuguese synagogue (not far from Artis) and Holocaust Museum (also nearby)&lt;/li&gt;
  &lt;li&gt;My favorite hidden gem was Our Lord In the Attic near the center of town, which is a few old canalhouses with a secret catholic church in the attic.&lt;/li&gt;
  &lt;li&gt;Second-place hidden gem: the Begijnhof–not really a musuem or anything, but a lil secret courtyard near the center of town.&lt;/li&gt;
  &lt;li&gt;There are some canal houses-turned-museums (Grachtenhuis, Van Loon) that are also neat.&lt;/li&gt;
  &lt;li&gt;Nemo (the science museum, technically for kids but pretty delightful).&lt;/li&gt;
  &lt;li&gt;FYI the Sex Museum is not worth it imho.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;music&quot;&gt;Music&lt;/h3&gt;
&lt;p&gt;Miziekgebouw and Concertgebouw are their two big concert halls, you can probably get rush tickets to something neat. There are probably clubs or something that have other kinds of music, idk.&lt;/p&gt;

&lt;h3 id=&quot;markets&quot;&gt;Markets&lt;/h3&gt;
&lt;p&gt;There are lots of outdoor fleamarkets that are delightful to wander through, as well as great places to buy souveniers/tchotchkes, as well as delicious foodstuffs. Check out:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dappermarkt&lt;/li&gt;
  &lt;li&gt;Albert Cuypmart&lt;/li&gt;
  &lt;li&gt;Niewemarkt&lt;/li&gt;
  &lt;li&gt;Waterlooplein&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;food&quot;&gt;Food&lt;/h3&gt;
&lt;p&gt;(Because the most important part of any trip is the food, right??)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pancakes (Pannekoeken) if you can find a place that’s not super touristy (I suggest Pancakes!)&lt;/li&gt;
  &lt;li&gt;Stroopwafles, fresh if possible&lt;/li&gt;
  &lt;li&gt;Indonesian and Surinamese food. Colonialism sucks but is sometimes delicious.&lt;/li&gt;
  &lt;li&gt;Bitterballen are prime drunk food: deep fried meatballs mmm. (I’m not sure how many I could eat sober, but with a beer or two they are 👌)&lt;/li&gt;
  &lt;li&gt;Fries, especially with satay sauce or curry&lt;/li&gt;
  &lt;li&gt;Not necessarily &lt;em&gt;good&lt;/em&gt;, but certainly &lt;em&gt;an experience&lt;/em&gt;: get a burger from a vending machine at Febo. Not as bad as you might imagine!&lt;/li&gt;
  &lt;li&gt;CHEESE. (Bring me some back?)&lt;/li&gt;
  &lt;li&gt;Other uniquely Dutch stuff to try if you end up in a supermarket: hagelslag (chocolate sprinkles but actually good), speculoos (cookie butter), probably loads more that I’m forgetting. Go explore!&lt;/li&gt;
  &lt;li&gt;There are some fabulous Belgian beers to be had, and even some Dutch ones; drink one for me! (In particular, try Brouwerij ‘t IJ, a cozy l’il brewery by a windmill. I lived right by here!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/amsterdam_1_windmill.jpg&quot; alt=&quot;De Gooyer windmill at sunset&quot; /&gt;
&lt;em&gt;De Gooyer windmill (next to the Brouwerij ‘t IJ) at sunset (Maia McCormick, 2013)&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;like-this-list-have-any-reports-or-anything-to-add-leave-a-comment-below-&quot;&gt;(Like this list? Have any reports, or anything to add? Leave a comment below 👇🏻)&lt;/h4&gt;</content><author><name>Maia McCormick</name></author><category term="travel" /><category term="kubecon" /><category term="non-technical" /><summary type="html">Huh, I guess I still have a blog!</summary></entry><entry><title type="html">How Windmill Prepped for GothamGo</title><link href="https://code.maiamccormick.com/2018/05/29/how-windmill-prepped-for-gothamgo.html" rel="alternate" type="text/html" title="How Windmill Prepped for GothamGo" /><published>2018-05-29T20:29:12-04:00</published><updated>2018-05-29T20:29:12-04:00</updated><id>https://code.maiamccormick.com/2018/05/29/how-windmill-prepped-for-gothamgo</id><content type="html" xml:base="https://code.maiamccormick.com/2018/05/29/how-windmill-prepped-for-gothamgo.html">&lt;p&gt;(Cross-posted from &lt;a href=&quot;//medium.com/windmill-engineering/how-windmill-prepped-for-gothamgo-3308020d70b&quot;&gt;Windmill’s blog&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;At the end of April, Windmill (all five of us) trekked down to GothamGo to learn things, meet people, and pitch our product. As Silver Level sponsors, we had our very own little table on the first floor; it was the perfect chance to pitch our fledgling product, make connections, and figure out what developers might want from us. The only question was: how?&lt;/p&gt;

&lt;p&gt;We’re a brand-new team, and GothamGo was a great excuse to do some important work. In preparation for the conference, we talked, we brainstormed, we aligned on our values and objectives and product goals; and then took the results of those conversations and ran with them, building our booth and our pitch from the bottom up.&lt;/p&gt;

&lt;h2 id=&quot;the-booth-objectives-and-values&quot;&gt;The Booth (Objectives and Values)&lt;/h2&gt;

&lt;p&gt;The first order of business was: &lt;em&gt;what was our booth going to look like&lt;/em&gt;? We asked this question of the team, and immediately realized that we first had to tackle our zeroth order of business: &lt;em&gt;what were our &lt;strong&gt;objectives&lt;/strong&gt; for the conference&lt;/em&gt;? In other words, what did we as a company hope to get out of GothamGo? Our answers would shape how we interacted with attendees, and how we decked out our booth to encourage those interactions.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;We decided that the primary things we were looking to get out of this conference were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;A pulse on developer needs.&lt;/strong&gt; (What are the pain points of people’s current dev tools? What do they want their magic dev tools solution to do for them?)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Product feedback&lt;/strong&gt;. (Is our current incarnation of Windmill the right product to be building?)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Design partners.&lt;/strong&gt; (These are larger organizations interested in adopting Windmill for their codebase, who will work with us to refine our product for them — and by extension, for other users.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, though not our primary focus, nice-to-have conference benefits included:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Buzz around our product&lt;/li&gt;
  &lt;li&gt;Alpha users who would play with Windmill and give us feedback&lt;/li&gt;
  &lt;li&gt;Rad developers interested in joining our team&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With a framework in mind, we then turned to booth design.&lt;/p&gt;

&lt;p&gt;Last year at GothamGo, our founders went full science fair, with great success.&lt;/p&gt;

&lt;div&gt;
	&lt;img src=&quot;https://cdn-images-1.medium.com/max/4000/0*M074ur4hu5eHFvxJ.jpg&quot; alt=&quot;Nick and Dan at GothamGo ‘17&quot; /&gt;
	&lt;p class=&quot;caption&quot;&gt;Nick and Dan at GothamGo ‘17&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;This year we wanted something with a similar vibe — not a big fancy banner with our company name on it, but something more personal and more interesting.&lt;/p&gt;

&lt;p&gt;Instead of throwing ideas out into the void, though, we decided to focus our thinking. What did we like about last year’s booth that we were trying to replicate? What did we want this year’s booth to communicate? We brainstormed, and came up with some &lt;strong&gt;values&lt;/strong&gt; that we wanted our booth to reflect:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DIY (“we got our hands dirty making this booth instead of just buying a pretty banner”)&lt;/li&gt;
  &lt;li&gt;Authentic (“we’re being our excitable, nerdy selves and we’re &lt;em&gt;really psyched about dev tools, y’all!”&lt;/em&gt;)&lt;/li&gt;
  &lt;li&gt;Approachable&lt;/li&gt;
  &lt;li&gt;Sparks conversation&lt;/li&gt;
  &lt;li&gt;Communicates the stage of our startup (i.e. early. Very early.)&lt;/li&gt;
  &lt;li&gt;Empathetic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We started tossing out ideas for booth themes in keeping with these values, but the breakthrough actually came when we took a slightly different tack: rather than “what do we want our booth to &lt;em&gt;be&lt;/em&gt;,” we considered, “how do we want our booth to hook passersby?” The very first idea that got proposed was: “let’s let people complain about their dev tools. People &lt;em&gt;love&lt;/em&gt; complaining about their dev tools.” The team loved it, and from there, it was jut a hop, skip, and a jump to Lucy’s “Psychiatric Help 5¢” stall from Peanuts.&lt;/p&gt;

&lt;div&gt;
	&lt;img src=&quot;https://cdn-images-1.medium.com/max/4000/0*Yq9VvVfMsajAS2z8.jpg&quot; alt=&quot;The final product!&quot; /&gt;
	&lt;p class=&quot;caption&quot;&gt;The final product!&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;We spent some time spitballing ideas, and declared a sub-committee to come up with a more concrete proposal. (It turned out that this was a key move — brainstorming is great for generating high-level ideas, but trying to make specific decisions in a committee of 5+ is a recipe for disaster.) With the fruits of this meeting in mind, our sub-committee set out to decide exactly what the booth would look like, and what swag/shiny things/interactive bits we would have to spark conversation and move towards our objectives.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keeping It Lean&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Our sub-committee brought back a booth proposal with a bunch of neat stuff, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a “tip jar” where people could optionally put their 5¢ for donation to Women Who Go&lt;/li&gt;
  &lt;li&gt;a monitor with a screencast of our alpha product in use&lt;/li&gt;
  &lt;li&gt;a “make your own T-shirt” station&lt;/li&gt;
  &lt;li&gt;an iPad and keyboard for folks to fill out a contact form (okay, maybe this one is par for the course)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;…and more! In the end though, we decided to strike almost all of their proposals.&lt;/p&gt;

&lt;div&gt;
	&lt;img src=&quot;https://cdn-images-1.medium.com/max/4000/0*hWp3mx7TMlqSWcug.jpg&quot; alt=&quot;The initial booth proposal. Note a handful of things already crossed out.&quot; /&gt;
	&lt;p class=&quot;caption&quot;&gt;The initial booth proposal. Note a handful of things already crossed out.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Any of the things suggested would be great booth components and conversation starters in their own right; but all together, it was just too much! If someone came up to our booth, we &lt;em&gt;didn’t&lt;/em&gt; want to overwhelm them with choice; instead, we wanted a booth that funneled visitors into our desired modes of interaction. In the end, we opted to keep our booth lean, with only three major components: the psychiatry booth sign itself (“Dev Tools Help 5¢”); the screencast of Windmill Alpha in action; and a handout asking people for dev tools horror stories and directing them to our contact form.&lt;/p&gt;

&lt;h2 id=&quot;the-pitch&quot;&gt;The Pitch&lt;/h2&gt;

&lt;p&gt;The product we’re trying to build is a little new and a little amorphous. Given that, and the fact that 40% of our team had joined within the previous months, we took GothamGo as an opportunity to align on our vision of Windmill and to practice pitching our product.&lt;/p&gt;

&lt;p&gt;To kick off our practice session, our co-founders (by far our most experienced pitches) shared some of their one-sentence product hooks. (We don’t have a clean-cut “&lt;a href=&quot;//itsthisforthat.com/&quot;&gt;Windmill is like {Uber} for {cats}&lt;/a&gt;”, but there are a handful of pithy phrases that work well to explain our product and spur further conversation.) Armed with these one-liners, we all role-played pitching Windmill to a conference attendee, with the rest of the team giving feedback. Here are some useful guideposts that emerged from this exercise:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Your opening line can be brief.&lt;/strong&gt; I had previously bent over backwards trying to explain Windmill in one sentence, but to my surprise, the best pitch-starters were the shortest: say, “Windmill makes development tools that give you faster answers to better questions.” The purpose of the opening line was &lt;em&gt;not&lt;/em&gt; to explain our entire product in one go; it was to catch interest and spark discussion.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Let the pitch-ee steer the pitch.&lt;/strong&gt; If you’re talking to a real containers nerd, of &lt;em&gt;course&lt;/em&gt; you want to seize the opportunity to brag about your container magic. And conversely, if you’re talking to someone whose biggest pain point is iOS integration testing, if you spend 5 minutes talking to them about deploying to Kubernetes, you’re wasting their time. However, if you take their signals and talk about the things they seem most interested in, you hold their interest better and have a greater chance of getting their buy-in. And in order to customize your pitch, you probably want to…&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Ask your pitch-ee questions about their situation/use case&lt;/strong&gt;. This is by far the best way to make sure you’re pitching &lt;em&gt;to&lt;/em&gt; someone and holding their interest, instead of rambling about generic stuff that’s not of interest to them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Corollary point: &lt;strong&gt;probe to get at their concerns and reservations, and address them directly&lt;/strong&gt;. If you’re feeling resistance to your pitch, figure out *why — *either you can address your pitch-ee’s concerns and explain how your product is in fact right for them, or you come away with a new growth area for your product.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We came away from our practice session more comfortable in our pitch, and more unified in our product vision. And because of our thorough prep work — for pitch, booth, and conference objectives alike — we were able to go into GothamGo prepared, aligned, and ready to make some new friends on behalf of Windmill.&lt;/p&gt;

&lt;p&gt;Want to see the fruits of our pitch-practicing? Luckily, it’s easy to get a first-hand demonstration: hit us up at &lt;a href=&quot;//twitter.com/windmill_eng&quot;&gt;@windmill_eng&lt;/a&gt; or &lt;a href=&quot;mailto:hi@windmill.engineering&quot;&gt;drop us an email&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks to &lt;a href=&quot;https://twitter.com/geekygirlsarah&quot;&gt;Sarah Withee&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/rustbeltrae&quot;&gt;Rae Krantz&lt;/a&gt; for their feedback on this post!&lt;/em&gt;&lt;/p&gt;</content><author><name>Maia McCormick</name></author><category term="windmill" /><category term="go" /><category term="conferences" /><summary type="html">(Cross-posted from Windmill’s blog.)</summary></entry><entry><title type="html">Preparing for Technical Interviews</title><link href="https://code.maiamccormick.com/2018/03/25/interview-prep.html" rel="alternate" type="text/html" title="Preparing for Technical Interviews" /><published>2018-03-25T15:17:41-04:00</published><updated>2018-03-25T15:17:41-04:00</updated><id>https://code.maiamccormick.com/2018/03/25/interview-prep</id><content type="html" xml:base="https://code.maiamccormick.com/2018/03/25/interview-prep.html">&lt;p&gt;Life update time! After three great years at &lt;a href=&quot;https://engineering.shopspring.com/&quot;&gt;Spring&lt;/a&gt;, I’m moving on to my next adventure; in April, I’ll be joining &lt;a href=&quot;https://windmill.engineering/&quot;&gt;Windmill&lt;/a&gt; as their fifth engineer, where I’ll be building cloud-based developer tools, as well as company culture.&lt;/p&gt;

&lt;p&gt;The most frequent question I’ve got from people upon telling them this news (after “what the heck is Windmill?!”) is, “How did you prepare for your interviews?” (And all the related questions: “How long did you prep for?”, “What were your on-sites like?”, etc.)&lt;/p&gt;

&lt;p&gt;This post aims to answer those questions. Here’s some detail on my own personal interview prep and interview process. Of course, everything here should be taken with a grain of salt, as all of this will vary widely based on you and your skills, the sorts of companies you’re interviewing for, etc.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&quot;how-did-you-prep&quot;&gt;How did you prep?&lt;/h1&gt;
&lt;h2 id=&quot;resumesoft-skills&quot;&gt;Resume/Soft Skills&lt;/h2&gt;
&lt;p&gt;The first thing I did (because it felt like the least intimidating way to ease into the job search process) was to update my resume. I made a big list of all the things I’d done at work since I last updated my resume, then went back over that list, pulled out the most compelling and impressive items, and wrote bullets for them. I also got several rounds of feedback from friends and collegues in the tech industry. You can never have too many eyes on your resume.&lt;/p&gt;

&lt;p&gt;I also practiced talking about my work and my projects, and answering so-called “soft skills” questions. Cracking the Coding Interview has a handy grid to help you organize your thoughts about your projects:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ctci-interview-prep-matrix.png&quot; alt=&quot;From Cracking the Coding Interview (4th ed.), p. 23&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I &lt;em&gt;didn’t&lt;/em&gt; physically fill this out, because I’m lazy—but I &lt;em&gt;did&lt;/em&gt; go over all of this in my head, making sure I had an idea of the interesting, challenging, and conversation-worthy bits of the major bullet points on my resume.&lt;/p&gt;

&lt;p&gt;I’ve been interviewing candidates at work for 2ish years now, so I have some idea of the questions that get asked in interviews and could think ahead about my answers to those&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;: but by far the most useful prep I did here was to have people mock-interview me. Having to answer these questions &lt;em&gt;out loud&lt;/em&gt; forced me to think about them more concretely, and I could also get feedback on the things that I was saying that were more or less impressive, red-flag-y, etc. (“If they ask you about conflicts with coworkers, tell story A, not story B, cuz in story A you resolved your disagreement, and in story B you were right and your coworker wrong and the system broke because of it, but even though you were right, it still resulted in the system breaking.”)&lt;/p&gt;

&lt;h3 id=&quot;preparing-your-interview-qs-for-them&quot;&gt;Preparing YOUR Interview Qs For THEM&lt;/h3&gt;
&lt;p&gt;Another thing worth doing is preparing a list of questions that &lt;em&gt;you&lt;/em&gt; want to ask &lt;em&gt;of your interviewers&lt;/em&gt; to get a better idea about the company you may possibly work for. The better your questions for them, the more insight you can get into their workplace—and the more prepared you are with these questions, the less dumb you look in front of your interviewer.&lt;/p&gt;

&lt;p&gt;I read a bunch of “questions to ask in job interviews” articles, grilled my friends, and put together a big doc of the questions I thought were the most informative. Some useful blog posts on the topic:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://jvns.ca/blog/2013/12/30/questions-im-asking-in-interviews/&lt;/li&gt;
  &lt;li&gt;http://juliepagano.com/blog/2015/08/15/job-search-retrospective/#interview-questions&lt;/li&gt;
  &lt;li&gt;http://lizabinante.com/blog/getting-hired-without-getting-burned/&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;algorithms&quot;&gt;Algorithms&lt;/h2&gt;
&lt;p&gt;To brush up on my algos, I worked through &lt;a href=&quot;http://interactivepython.org/runestone/static/pythonds/index.html&quot;&gt;Problem Solving with Algorithms and Data Structures using Python&lt;/a&gt;, making sure to ask questions about/dig deeper into anything I didn’t understand. Most of this I skimmed because I was already familiar with it, but I made sure to note the architypal problems for each data type (“oh, it’s an X problem? You should use data structure Y!”), and paid special attention to trees and graphs cuz they’re my weak spot.&lt;/p&gt;

&lt;p&gt;And then it was just looots of practice problems. Some from &lt;em&gt;Cracking the Coding Interview&lt;/em&gt;, some from &lt;a href=&quot;https://leetcode.com/&quot;&gt;LeetCode&lt;/a&gt;, and as much practicing with friends as I could get. The best is to get friends who actually interview developers, because they know the ins and outs of their questions better, but even just having a friend mock-interview you with CtCI or LeetCode questions is better than nothing.&lt;/p&gt;

&lt;p&gt;Practicing algos Qs on your own just thinking through the solution, or writing the solution on a computer, is good. Writing it out on paper/a whiteboard is better. Practicing with a person (in a mock interview sort of capacity, where you’re timed, they’re giving you hints where necessary but pushing you to explain yourself) is best. Especially if technical interviews make you nervous: the more you do it, even with friends, the more used to that anxiety you’ll be, and the better you’ll be able to perform in the real thing.&lt;/p&gt;

&lt;h2 id=&quot;system-design&quot;&gt;System Design&lt;/h2&gt;

&lt;p&gt;Like with algos, mostly this was a matter of practice—getting friends to mock interview me with system design quesitons. I also went over some of the systems I built at work and made sure that I understood the technical choices and trade-offs there, so I could talk intelligently about it in interviews.&lt;/p&gt;

&lt;p&gt;A piece of advice I got here (which I didn’t end up taking, and it all turned out okay, but I probably should have done this anyway) was to talk to folks at other companies about their system architecture. My Achilles’ heel in system design interviews has always been that I’m only really familiar with the one or two paradigms I’ve worked in—talking to others about &lt;em&gt;their&lt;/em&gt; paradigms would have been super useful, and given me a lot more ideas to draw on.&lt;/p&gt;

&lt;h1 id=&quot;how-long-did-you-prep-for&quot;&gt;How long did you prep for?&lt;/h1&gt;
&lt;p&gt;I took two weeks off of work around Christmas/New Years, and was doing a bit of prep work every day—sometimes several hours of reading or practice interviews, sometimes 15 minutes researching a company or brushing up my resume, but I tried to do &lt;em&gt;something&lt;/em&gt; every day. After that, I went back to my day job and I did a bit whenever I could—some problems on LeetCode in the evening, or a practice problem coffee date with a friend over the weekend. After a few weeks of occasional practice interviews, I felt pretty prepped. My process was pretty drawn out cuz I took my time to find companies I wanted to interview for, set up those interviews, etc., so I would keep doing the occasional practice problem during that to keep in shape, but mostly I felt pretty well prepared.&lt;/p&gt;

&lt;h1 id=&quot;what-was-your-interview-schedule-like&quot;&gt;What was your interview schedule like?&lt;/h1&gt;
&lt;p&gt;Like I said, I took a while at the beginning of this process to get my resume in order, do some research on companies and write up a big list, brush up on algos, etc.&lt;/p&gt;

&lt;p&gt;I lined up a couple of phone screens early to get them out of the way (staggering them so that I wasn’t too absent at work), and punted on the on-sites so I could cluster those around the same time.&lt;/p&gt;

&lt;p&gt;I highly recommend having your first on-site (or two) be a “warm-up”: &lt;em&gt;not&lt;/em&gt; your dream job, but either one you don’t feel too strongly about, or one that is a real long shot and you’re not really banking on. The idea is to have your first interview or two be a little lower stress and lower stakes. Best case scenario, you get an offer and have more leverage or a fab opportunity you didn’t count on; worst case, you get to ease yourself back into the sometimes-grueling world of on-site technical interviews.&lt;/p&gt;

&lt;h1 id=&quot;how-did-you-decide-where-to-interview&quot;&gt;How did you decide where to interview?&lt;/h1&gt;
&lt;p&gt;The way I decide many other things: I made a big ol’ doc where I kept track of recommendations from friends, collegues, the Internet, etc. I brainstormed products I’d be interested to work on, and places friends had worked or places I’d seen on the internet with cultures that I liked. I looked up the companies of people I enjoy on Twitter and elsewhere on the interwebs. I took suggestions from the amaaazing jobs team at &lt;a href=&quot;https://www.recurse.com/&quot;&gt;RC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And then I dug into those companies. Looked for articles on company culture, their approach to tech problems, their thoughts on diversity and whether they had women and PoC on their engineering team/in management, how many blog posts they had by women/PoC, etc. I looked on Glassdoor. If I had friends there, or friends of friends, I reached out to them to ask them if they liked it there. I hit up people in my network (esp. women) for word-on-the-street. And from all that, sortakinda got a picture of these companies and which I was or wasn’t interested in moving forward with.&lt;/p&gt;

&lt;p&gt;(I should note that an important part of this process was being clear on what I wanted out of my next company. Having a concrete idea of my own values helped me know what things to look for, which questions to ask, and which things were dealbreakers. It’s worth spending a good chunk of time on this step, as it will inform the rest of your search. In particular, I found Key Values’ &lt;a href=&quot;https://www.keyvalues.com/culture-queries/&quot;&gt;Culture Queries&lt;/a&gt; a useful place to start.)&lt;/p&gt;

&lt;h1 id=&quot;then-what&quot;&gt;Then what?&lt;/h1&gt;
&lt;p&gt;Well hopefully, the offers start rolling in! Be transparent with everyone in your interview process about where you’re at, what your concerns are, and what you need from them. Stating your needs going in sets a good precedent!&lt;/p&gt;

&lt;p&gt;When you start thinking about switching jobs, be prepared for lots of last minute insurance submissions and affair-getting-in-order, and remember to take any relevant documents off your computer/email/google drive, any relevant passwords off your password manager, etc. (Pro tip: if you know you’ll be leaving early-ish in the year, max out your Flex Spending Account and you’ll end up with free money! It’s a good time to buy those prescription sunglasses you don’t reaaally need, but heck, they’re free!)&lt;/p&gt;

&lt;p&gt;As for me, I’m taking a month off and chilling, and so very excited about it. And thennnnn… I start my new job!&lt;/p&gt;

&lt;p&gt;I’m pretty psyched about this next chapter in my life, and I hope that some of the thoughts above are of use to someone. Best of luck, y’all!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Things like: “How do you learn a new language or framework?”; “Tell me about a time that you failed”; etc. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Maia McCormick</name></author><category term="tech" /><category term="interviews" /><category term="soft skills" /><summary type="html">Life update time! After three great years at Spring, I’m moving on to my next adventure; in April, I’ll be joining Windmill as their fifth engineer, where I’ll be building cloud-based developer tools, as well as company culture.</summary></entry><entry><title type="html">F***in’ Decorators, How Do THEY Work?!</title><link href="https://code.maiamccormick.com/2018/02/01/python-decorators.html" rel="alternate" type="text/html" title="F***in’ Decorators, How Do THEY Work?!" /><published>2018-02-01T13:16:46-05:00</published><updated>2018-02-01T13:16:46-05:00</updated><id>https://code.maiamccormick.com/2018/02/01/python-decorators</id><content type="html" xml:base="https://code.maiamccormick.com/2018/02/01/python-decorators.html">&lt;p&gt;If you’ve been in Python-land for long, you’ve probably seen some &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@&lt;/code&gt;-sign thingies hovering (often mysteriously) above functions and class definitions, saying things like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@patch&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@classmethod&lt;/code&gt; or perhaps something even more obscure. Maybe you already know that these are called “decorators”. Maybe you’ve even used them, or written your own!&lt;/p&gt;

&lt;p&gt;Even if you’ve done all that and still don’t quiiiite get what’s going on under the hood with decorators… don’t worry, my friend, you are not alone. Heck, &lt;em&gt;I’m&lt;/em&gt; still not quite sure what goes on under the hood with decorators, but after a very productive afternoon of fiddling, I have a much better idea, and I’m here to share the fruits of that fiddling with you. Ready? Here we go:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Decorators are callables called on callables that return a callable which then replaces the original callable.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Got it?&lt;/p&gt;

&lt;p&gt;…No?&lt;/p&gt;

&lt;p&gt;…Yeah, okay, that’s fair. Let me try that again.&lt;/p&gt;

&lt;!--more--&gt;
&lt;h1 id=&quot;a-temporary-oversimplification&quot;&gt;A Temporary Oversimplification&lt;/h1&gt;

&lt;p&gt;I know I said “callable” up there before, but just for now, I’m going to simplify and instead of talking about “callables”, I’ll talk about “functions”. All functions are callables—i.e. “functions” are a subset of “callables”—and they tend to be the easiest case for people to wrap their heads around.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/callables_venn_diagram.png&quot; alt=&quot;Functions are a subset of callables&quot; /&gt;&lt;/p&gt;

&lt;p&gt;“Callables” can also be classes, or heck, most any object, if it’s got the appropriate set of behaviors. We’ll dig into that in a bit, but for now, let’s talk about decorators in terms of “functions”. With this simplification in mind, let me amend my definition above to make it maaarginally less confusing:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A decorator is a function (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dec(…)&lt;/code&gt;) called on a function (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fn(…)&lt;/code&gt;) returning a function (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fn_decorated(…)&lt;/code&gt;) which then replaces the original function:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dec&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(...):&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Is approximately equal to:
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/decorators_flow_function.png&quot; alt=&quot;Decorators are functions that modify functions&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;how-decorators-are-applied&quot;&gt;How Decorators are Applied&lt;/h1&gt;

&lt;p&gt;Say we’ve got this function. It doesn’t do much, but it’s a nice little function:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;times_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But say that we’re so excited about that function that we want everyone to know when we call it, so we’re gonna sound a klaxon every time we do:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;times_two_with_alarm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WOOP! WOOP! WOOP!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sure, that works. But what if we’ve got a BUNCH of functions that we’re really excited about, and we want to add this big ‘ol alarm (by which I mean “print statement”) to all of them? It’ll get repetitive to add that code everywhere; what if we just wrote a function to stick that print statement into our functions for us?&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add_alarm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fn_with_alarm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WOOP! WOOP! WOOP!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn_with_alarm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_alarm&lt;/code&gt; is a function that takes an argument &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fn&lt;/code&gt;, the function we want to add an alarm to: it then returns us a NEW function which does the following:
a) sound the alarm
b) invoke the original function we passed to it&lt;/p&gt;

&lt;p&gt;In practice, then, we can achieve the same thing we achieved above like so:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;times_two_with_alarm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_alarm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Because, remember, in Python, functions are first class objects; they can be passed around, passed as arguments, assigned, etc. In this case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_alarm&lt;/code&gt; takes a function as an argument, and it &lt;em&gt;returns&lt;/em&gt; a function (one that does whatever the original func. does, but this time with an alarm). We can then assign the output of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_alarm&lt;/code&gt;; so now, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;times_two_with_alarm&lt;/code&gt; is that new, modified function:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times_two_with_alarm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;WOOP&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WOOP&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WOOP&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Heck, maybe we don’t want to keep track of a whole different function name, we just want that alarm to be baked into our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;times_two&lt;/code&gt; function. Well, we can do that too:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# In case you forgot, here&apos;s how we defined this function...
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;times_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Add the alarm to it!
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times_two&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_alarm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;WOOP&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WOOP&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WOOP&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;okay-but-like-you-havent-used-a-decorator-yet&quot;&gt;Okay, But Like… You Haven’t Used a Decorator Yet…?&lt;/h2&gt;

&lt;p&gt;Geez, I’m getting there! In fact, THIS is where decorators come in! If the above seems a little tiresome, we can use this shortcut:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_alarm&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;times_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@decorator&lt;/code&gt; syntax means basically what we said above: “define this function, but then run it through this other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decorator&lt;/code&gt; function, and assign the result of that call (which, again, ought to be a function) back to the function I just defined.” This way, you can easily modify multiple functions in predictable&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; ways, and moreover, modify them &lt;em&gt;in place&lt;/em&gt;; no need to keep track of both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;times_two&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;times_two_with_alarm&lt;/code&gt;, just update &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;times_two&lt;/code&gt; to do the new thing.&lt;/p&gt;

&lt;h1 id=&quot;back-to-callables&quot;&gt;Back to “Callables”&lt;/h1&gt;

&lt;p&gt;So remember earlier when I waved a hand and said that we’d talk about decorators as “functions that manipulate functions”? Well it’s actually a bit gnarlier than that. Properly speaking, decorators are &lt;strong&gt;callables that manipulate callables&lt;/strong&gt;, and as such, both decorators and the things they decorate &lt;em&gt;may&lt;/em&gt; be functions, or they may be &lt;em&gt;random other stuff.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;whats-a-callable&quot;&gt;What’s a “Callable”?&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;callable&lt;/strong&gt; is &lt;strong&gt;anything that you can&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;call&lt;/em&gt;&lt;/strong&gt;—i.e. anything that you can stick a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;()&lt;/code&gt; after (with maybe some arguments inside) and have something happen. A callable may be a &lt;strong&gt;function&lt;/strong&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_func(...)&lt;/code&gt;) or a &lt;strong&gt;class&lt;/strong&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyClass(...)&lt;/code&gt;&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;), or (as helpful as this definition is) any &lt;strong&gt;object&lt;/strong&gt;, as long as it can be… well, called. Some things that are NOT callable include strings, ints, lists, etc.:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;str&apos;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;callable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So then, to re-visit our original definition of a decorator, taking away our initial oversimplification: &lt;strong&gt;decorators are callables that manipulate callables (and then replace the original thing with the modified thing).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/decorators_flow_callable.png&quot; alt=&quot;Decorators are callables that modify callables&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ve already talked about decorators as functions being used to modify functions. But since callables can be either functions or classes (…or objects, but we’ll ignore that for now), let’s talk about some other cases.&lt;/p&gt;

&lt;h2 id=&quot;decorating-a-class-with-a-function&quot;&gt;Decorating a Class with a Function&lt;/h2&gt;

&lt;p&gt;What if we just got really excited about a bunch of classes, and wanted to announce to the world whenever we made a new instance of one? It might look something like this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;announce_new_instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;make_new_instance_with_announcement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Making a thing!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_new_instance_with_announcement&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;announce_new_instance&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;bar&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Making&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x10fd84b70&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Recall that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyClass&lt;/code&gt; is a &lt;em&gt;callable&lt;/em&gt;—&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyClass()&lt;/code&gt; means, “make me a new MyClass instance!”—and so we can treat it just like any other thing that can be called, and even treat it like the function from our first example. In this case, under the hood, we’re replacing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyClass&lt;/code&gt; (the function-like thing that, when called, makes a new instance) with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make_new_instance_with_announcement&lt;/code&gt;, which makes its announcement and &lt;em&gt;then&lt;/em&gt; kicks off making a new instance. (In the context of the decorator above, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cls&lt;/code&gt; represents the class you passed in, i.e. the class you’re decorating; so here, it’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyClass&lt;/code&gt;, thus &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cls()&lt;/code&gt; is the same as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyClass()&lt;/code&gt;.&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;classes-as-decorators&quot;&gt;Classes as Decorators&lt;/h2&gt;

&lt;p&gt;This one bends my brain, but you can totally use a class as a decorator! Because as we discusssed (say it with me), &lt;em&gt;classes are callables too&lt;/em&gt;. A call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyClass(*args, **kwargs)&lt;/code&gt; eventually calls out to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyClass.__init__(self, *args, **kwargs)&lt;/code&gt; (and does some other magic such that at the end of it all, an instance is returned back). There are probably other rad things you can do with classes-as-decorators, but the pattern I’ve seen most often (in all three hours of looking into this) is this one:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DecoratorClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__call__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Look how decorated!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DecoratorClass&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;times_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Look&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;how&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorated&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;82&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Oh man, weird, right? &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DecoratorClass&lt;/code&gt; is a class that takes a function (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fn&lt;/code&gt;) as an initialization argument and hangs onto it. And recall that we replace the function-to-be-decorated with the result of a call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decorator&lt;/code&gt;, thus the above is equivalent to:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;times_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;times_two&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DecoratorClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That is, the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;times_two&lt;/code&gt; is an &lt;em&gt;instance&lt;/em&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DecoratorClass&lt;/code&gt;?! What?!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times_two&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DecoratorClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x109b867b8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But the point of decorators is that we don’t really &lt;em&gt;care&lt;/em&gt; what &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;times_two&lt;/code&gt; is, we just want it to do what we expect when we call it. Thus, we need an instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DecoratorClass&lt;/code&gt; to actually DO stuff when you stick &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(…)&lt;/code&gt; at the end. That’s where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__call__&lt;/code&gt; method we defined earlier comes in.&lt;/p&gt;

&lt;h3 id=&quot;tangent-__call__&quot;&gt;Tangent: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__call__&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;We can make an object (i.e. an instance of a class) callable using the magic &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__call__&lt;/code&gt; method, like so:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# defining the __call__ method on an INSTANCE of this class
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__call__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;you called me!&quot;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Callable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;you called me!&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Contrast with...
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotCallable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotCallable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&apos;NotCallable&apos;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;callable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;back-to-decoratorclass&quot;&gt;Back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DecoratorClass&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;So we’ve got a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DecoratorClass&lt;/code&gt; that takes in a function and hangs onto it, and when we define the magic method  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__call__&lt;/code&gt;, we’re defining what happens when we stick &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(...)&lt;/code&gt; on the end of an instance of this class—we call the function that we passed in in the first place:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DecoratorClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;times_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# i.e. DecoratorClass.__call__(5)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Look&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;how&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decorated&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So after all that decorator magic, we’ve replaced &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;times_two&lt;/code&gt; with an instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DecoratorClass&lt;/code&gt;, right? But as we just saw above, we can call that instance like we would call any other function; thus &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;times_two&lt;/code&gt; can still be called like normal, and in all respects treated as a normal function—but now it has some shiny extra functionality added via our decorator.&lt;/p&gt;

&lt;h2 id=&quot;okay-but-why-would-you-want-to-use-a-class-as-a-decorator&quot;&gt;Okay, But Why Would You WANT to Use a Class as a Decorator?&lt;/h2&gt;

&lt;p&gt;That’s a great question. There are probably lots of fascinating answers. At this present moment, I only have two: “to store state” and “because you can”. Since I’ve already covered the latter in quite a bit of detail, let’s turn to the former, i.e., a halfway plausible case in which you might want to use a class as a decorator. (I’m sure there are other reasonable ways to store state on a function, as well as other compelling reasons to use classes as decorators, but let’s just go with this for now.)&lt;/p&gt;

&lt;p&gt;Unlike functions, which are (generally) one-and-done, classes allow you to store state.&lt;sup id=&quot;fnref:4&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; How might you use this in a decorator context? Consider something like this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;countcalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CALLS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__call__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CALLS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This func. has been called {} time(s)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CALLS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;countcalls&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello world&quot;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;been&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;called&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello world&quot;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;been&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;called&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello world&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And heck, why not go for broke and use a class to decorate a class?!&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;countinits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INITS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__call__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INITS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You&apos;ve made {} of this class&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INITS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;countinits&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inst1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;You&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&apos;ve made 1 of this class

&amp;gt; inst2 = MyClass()
You&apos;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ve&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;made&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above example looks a little gnarly, but remember that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cls&lt;/code&gt; here is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyClass&lt;/code&gt; which is a callable (that makes and returns a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyClass&lt;/code&gt; instance), and remember how the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@decorator&lt;/code&gt; syntax is applied, and you can piece together precisely what dark magic is happening here.&lt;/p&gt;

&lt;h1 id=&quot;awesome-wait-what&quot;&gt;Awesome! …Wait, What?&lt;/h1&gt;

&lt;p&gt;Yeah, I know, a lot of things just went down. To summarize:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;you can &lt;em&gt;decorate&lt;/em&gt; any callable—be it a function, a class, or any callable object.&lt;/li&gt;
  &lt;li&gt;a &lt;em&gt;decorator&lt;/em&gt;—the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@something&lt;/code&gt; thing—is a callable (function, class, etc.) that takes as an argument the thing you’re decorating and returns another callable that preserves the original functionality but adding something new&lt;/li&gt;
  &lt;li&gt;the type of callable is irrelevant. Functions can decorate functions, or classes, or objects. Classes can decorate functions, or classes, or objects. Basically, anything goes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are lots of other resources on the interwebs about what sort of stuff you might want to use decorators for—and heck, I might write a blogpost about some of them in future—but I hope this is an illuminating overview of just what the heck decorators &lt;em&gt;are&lt;/em&gt; and how they work. As always, feel free to reach out with any questions! A big thank you to all the excellent folks who beta-read/edited this post: &lt;a href=&quot;http://happyspork.com/&quot;&gt;Ben Anderman&lt;/a&gt;, &lt;a href=&quot;https://github.com/cappachu&quot;&gt;Codanda Appachu&lt;/a&gt;, &lt;a href=&quot;http://antha.site/&quot;&gt;Sam Auciello&lt;/a&gt;, and &lt;a href=&quot;https://alexburka.com/&quot;&gt;Alex Burka&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;…except that decorators as described here can potentially do weird things to doc strings and other function attributes. This is one of the reasons that many folks use &lt;a href=&quot;https://docs.python.org/3/library/functools.html#functools.wraps&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;functools.wraps&lt;/code&gt;&lt;/a&gt; when decorating things: it copies over most (though not all 😞) of the original functions’     hidden attributes to the new, wrapped function. Hat tip to &lt;a href=&quot;https://github.com/cappachu&quot;&gt;Codanda Appachu&lt;/a&gt; for reminding me of this. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyClass(...)&lt;/code&gt;, of course, being shorthand for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyClass.__init__(...)&lt;/code&gt;. (That’s totally an oversimplification; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyClass(...)&lt;/code&gt; is &lt;em&gt;actually&lt;/em&gt; shorthand for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyClass.__new__(cls)&lt;/code&gt;, which does a bunch of stuff, including call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__&lt;/code&gt; on the newly made &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyClass&lt;/code&gt; instance… but sufice it to say that when I call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyClass(...)&lt;/code&gt; I expect some stuff to happen, including a call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyClass.__init__&lt;/code&gt;, and to eventually get back a new instance of that class.) &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Note that since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyClass(...)&lt;/code&gt; is baaasically shorthand for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MyClass.__init__(...)&lt;/code&gt; (see above), and so you can achieve a pretty similar effect by decorating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__&lt;/code&gt;  method. The thing passed into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;announce_new_instance&lt;/code&gt; to be transformed will be different, but the new function will execute in just about the same way. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Hat tip to &lt;a href=&quot;http://jayantj.github.io/&quot;&gt;Jayant Jain&lt;/a&gt;, who pointed out an error I made in the original version of this blogpost. (Yes, if you really wanted to, you could store state on a function as well, cuz it’s Python and everything is an object, including functions. For instance, I could totally set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_func.some_value = &quot;hello&quot;&lt;/code&gt;. However, it’s awkward and unidiomatic. So like, go ahead and do that if you want, but it’s kinda weird, and really it just makes more sense to use classes.) &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Maia McCormick</name></author><category term="tech" /><category term="python" /><summary type="html">If you’ve been in Python-land for long, you’ve probably seen some @-sign thingies hovering (often mysteriously) above functions and class definitions, saying things like @patch or @classmethod or perhaps something even more obscure. Maybe you already know that these are called “decorators”. Maybe you’ve even used them, or written your own!</summary></entry><entry><title type="html">What Are Interfaces?</title><link href="https://code.maiamccormick.com/2017/06/17/what-are-interfaces.html" rel="alternate" type="text/html" title="What Are Interfaces?" /><published>2017-06-17T13:04:02-04:00</published><updated>2017-06-17T13:04:02-04:00</updated><id>https://code.maiamccormick.com/2017/06/17/what-are-interfaces</id><content type="html" xml:base="https://code.maiamccormick.com/2017/06/17/what-are-interfaces.html">&lt;p&gt;This is a blog post about interfaces in Go. I wanted to write about a headscratcher that cost me several hours of work when I first started learning Go, and I figured I might as well start from the beginning and write the article on interfaces that I wish I had read back then. The story of my encounter with nil interfaces is coming soon, but for now, here’s a brief and hopefully accessible piece on interfaces in Go.&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; So, without further ado, I give you…&lt;/p&gt;

&lt;h3 id=&quot;what-is-an-interface&quot;&gt;What Is an Interface?&lt;/h3&gt;

&lt;p&gt;Coming from the dynamically-typed wild west of Python, one of the bits of Go that took the most getting used to was the idea of &lt;em&gt;interfaces&lt;/em&gt;. An interface is a way of typing things according to their methods. If I want a function that can take any number of different types, so long as they have a given method (or two, or five) in common, I’ll want to use an interface to accomplish this (since I can’t pass in any old thing because of Go’s type safety rules). To give a concrete example, say I’ve got these classes: &lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;octopus&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;numTentacles&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;octopus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ooze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ink&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slug&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;salted&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ooze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;slime&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slug&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;octopus&lt;/code&gt; are their own types, but both have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ooze()&lt;/code&gt; methods. If I wanted a function to make use of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ooze&lt;/code&gt; method, and didn’t know how to make effective use of interfaces, I might write something like this. Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interface{}&lt;/code&gt; is a wild card and I’ll explain why in a minute… but for now, just accept that this is the way we can allow this function to take either a slug OR an octopus (…or anything else, unfortunately) without Go complaining at us.&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oozeAttack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slugOrOctopus&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oozingThing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slugOrOctopus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// cast oozingThing as a slug&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You got %s’d!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oozingThing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ooze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;octopus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// cast oozingThing as an octopus&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You got %s’d!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oozingThing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ooze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;panic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;```This thing doesn&apos;t know how to ooze!
            ...It sucks that you were able to pass this in
            without the compiler complaining at you, but
            here we are.```&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ugh. Awkward, right? And it has repeated code, and it can potentially panic b/c we have no guarantees of the type of the thing we passed, and… ugh. No good. But luckily, I can use interfaces as they were meant to be used, and suddenly my code is a lot prettier:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oozer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// the signature of a function called &quot;ooze&quot;,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// which takes no args and returns a string&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ooze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oozeAttack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oozer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;You got %s’d!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ooze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If an object has all of the methods required for an interface, we say that that object &lt;em&gt;implements&lt;/em&gt; (or satisfies) that interface. In this case, both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;octopus&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;slug&lt;/code&gt; implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oozer&lt;/code&gt; because they both have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ooze()&lt;/code&gt; methods. The compiler can check this for us, so we know that anything we pass into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oozeAttack&lt;/code&gt; has an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ooze()&lt;/code&gt; method and won’t break our code—in stark contrast to the example above, where we could pass in &lt;em&gt;literally anything&lt;/em&gt; and just had to pray that it wouldn’t cause a panic at runtime.&lt;/p&gt;

&lt;h3 id=&quot;okay-but-what-is-an-interface&quot;&gt;Okay, But What Is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interface{}&lt;/code&gt;?&lt;/h3&gt;

&lt;p&gt;If you’ve been using Go for more than a couple of days, you’ve probably stumbled across &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interface{}&lt;/code&gt;, the mythical and mysterious empty interface (&lt;a href=&quot;https://www.youtube.com/watch?v=bW7Op86ox9g&quot;&gt;click here for dramatic effect&lt;/a&gt;). (I even used it in the example above.) The empty interface baffled me for a long time. I understood that practically, it was a type wildcard—you used it anywhere you weren’t sure of the type of a thing. If I have a function that’s going to get passed &lt;em&gt;some thing&lt;/em&gt; but I don’t know what the type of that thing is, I’ll use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interface{}&lt;/code&gt; so nothing breaks:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printMysteryObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thing&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Your mystery thing is: %v (of type %T)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But it was only after I started thinking about what interfaces actually are, and reading some blog posts, that I figured out why this works. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;interface{}&lt;/code&gt; is this:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BoringInterface&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// … nothing to see here …&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s an interface that requires no methods! And so any object at all will satisfy this interface, because any object in Go has 0+ methods. I finally understand what the flip this thing is. So exciting.&lt;/p&gt;

&lt;p&gt;Stay tuned for part 2 in this series, “When Interfaces Go Nil (dun dun dunnn)”.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;I need to make the disclaimer that lots of other folks have written about this, and the &lt;a href=&quot;https://blog.golang.org/laws-of-reflection&quot;&gt;Go blogpost on &lt;em&gt;The Laws of Reflection&lt;/em&gt;&lt;/a&gt; probably explains this stuff better than I do. That said, I hope this blog post is more to the point, and perhaps more entertaining. (Mad props to &lt;a href=&quot;http://aoeu.github.io/&quot;&gt;Travis McDemus&lt;/a&gt; for inspiration for this excellent example of how interfaces work, which I find 100% more accessible than the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;io.Reader/Writer&lt;/code&gt; examples that get used in all the canonical Go blogposts about interfaces.) &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Maia McCormick</name></author><category term="tech" /><category term="go" /><summary type="html">This is a blog post about interfaces in Go. I wanted to write about a headscratcher that cost me several hours of work when I first started learning Go, and I figured I might as well start from the beginning and write the article on interfaces that I wish I had read back then. The story of my encounter with nil interfaces is coming soon, but for now, here’s a brief and hopefully accessible piece on interfaces in Go.1 So, without further ado, I give you… I need to make the disclaimer that lots of other folks have written about this, and the Go blogpost on The Laws of Reflection probably explains this stuff better than I do. That said, I hope this blog post is more to the point, and perhaps more entertaining. (Mad props to Travis McDemus for inspiration for this excellent example of how interfaces work, which I find 100% more accessible than the io.Reader/Writer examples that get used in all the canonical Go blogposts about interfaces.) &amp;#8617;</summary></entry><entry><title type="html">Dig Yourself Out of a ‘Git Commit Amend’ Hole With Reflog</title><link href="https://code.maiamccormick.com/2016/04/29/dig-yourself-out-of-a-git-commit-amend-hole.html" rel="alternate" type="text/html" title="Dig Yourself Out of a ‘Git Commit Amend’ Hole With Reflog" /><published>2016-04-29T22:59:25-04:00</published><updated>2016-04-29T22:59:25-04:00</updated><id>https://code.maiamccormick.com/2016/04/29/dig-yourself-out-of-a-git-commit-amend-hole</id><content type="html" xml:base="https://code.maiamccormick.com/2016/04/29/dig-yourself-out-of-a-git-commit-amend-hole.html">&lt;p&gt;Raise your hand if you’ve ever &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt;’d something you shouldn’t have. (It’s okay, this is a judgement-free space.)&lt;/p&gt;

&lt;p&gt;And raise your hand if you’ve ever used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit --amend --no-edit&lt;/code&gt;&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; to try and hide your terrible, terrible shame. (We’re not even gonna &lt;em&gt;talk&lt;/em&gt; about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push -f origin master&lt;/code&gt;. Don’t do it, kids.)&lt;/p&gt;

&lt;p&gt;And raise your hand one last time if you’ve ever &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit --amend --no-edit&lt;/code&gt;’d and then paused and looked at your computer and were suddenly struck by the realization that you’d ruined everything.&lt;/p&gt;

&lt;p&gt;That last one might be just me, but I’m going to pretend it happens to other people to make myself feel better. (Like all of those times I thought I was fixing a slightly incorrect commit, only to realize I had instead wiped out all of my latest work. Whoooops.) &lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;Well, I put in an appearance at &lt;a href=&quot;http://git-merge.com&quot;&gt;Git Merge 2016&lt;/a&gt; (an all-around delightful event), and this gem was among the many things I learned there. This gem, friends, is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reflog&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD@{x}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The reflog is… well, it’s a log of your refs. Refs being references to commits, which might be things like branch names (because recall that branch names are just human-readable references to commits) or this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; thing, which is a pointer to &lt;em&gt;the commit you’re on right now&lt;/em&gt;. In fact, if you went into a folder that was a git repo and looked at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git/refs/heads/master&lt;/code&gt;, you’d see a file with a single commit hash in it–that’s the current tip of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;, i.e. &lt;em&gt;the commit that your “master” ref is pointing to&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Now, refs in and of themselves aren’t gonna solve your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit --amend&lt;/code&gt; debacle, but it turns out that git is really smart sometimes. In this particular case, the smart thing that git does is keep track of everywhere your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; has been pointing. This info is stored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git/logs/HEAD&lt;/code&gt;, and looks something like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0000000000000000000000000000000000000000 5a90f86dbb681f914790fbe494cbc5680ce372cc Maia &amp;lt;maia.mcc@gmail.com&amp;gt; 1461979447 -0400    commit (initial): add a file with some stuff
5a90f86dbb681f914790fbe494cbc5680ce372cc fdaec86d18b70bf8b9f87e74b473dcdb53d5b814 Maia &amp;lt;maia.mcc@gmail.com&amp;gt; 1461979493 -0400    commit: totally innocuous change
fdaec86d18b70bf8b9f87e74b473dcdb53d5b814 d77508cfe5df412158ad8a19540aca0ba195348f Maia &amp;lt;maia.mcc@gmail.com&amp;gt; 1461979518 -0400    commit (amend): totally innocuous change
d77508cfe5df412158ad8a19540aca0ba195348f fdaec86d18b70bf8b9f87e74b473dcdb53d5b814 Maia &amp;lt;maia.mcc@gmail.com&amp;gt; 1461979572 -0400    reset: moving to HEAD@{1}
fdaec86d18b70bf8b9f87e74b473dcdb53d5b814 514dd505826ddc1276823506e7682b33b64547b6 Maia &amp;lt;maia.mcc@gmail.com&amp;gt; 1461980303 -0400    commit (merge): Merge commit &apos;d77508c&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you find that a little hard to parse (and you probably do), you can (and should) get at it in a more human-readable form with the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reflog show&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fdaec86 HEAD@{2}: commit (merge): Merge commit &apos;d77508c&apos;514dd505826ddc1276823506e7682b33b64547b6 fdaec86d18b70bf8b9f87e74b473dcdb53d5b814 Maia &amp;lt;maia.mcc@gmail.com&amp;gt; 1461982854 -0400    checkout: moving from master to head^
fdaec86 HEAD@{3}: checkout: moving from d77508cfe5df412158ad8a19540aca0ba195348f to master
d77508c HEAD@{4}: checkout: moving from master to HEAD@{3}
fdaec86 HEAD@{5}: reset: moving to HEAD@{1}
d77508c HEAD@{6}: checkout: moving from fdaec86d18b70bf8b9f87e74b473dcdb53d5b814 to master
fdaec86 HEAD@{7}: checkout: moving from master to fdaec86d18b70bf8b9f87e74b473dcdb53d5b814
d77508c HEAD@{8}: commit (amend): totally innocuous change
fdaec86 HEAD@{9}: commit: totally innocuous change
5a90f86 HEAD@{10}: commit (initial): add a file with some stuff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So I had always thought that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit --amend&lt;/code&gt; &lt;em&gt;amended your current commit&lt;/em&gt;–wrote all of your changes onto the same commit and called it a day. But it turns out that it doesn’t; rather, it creates a &lt;em&gt;whole new commit&lt;/em&gt; in which to store your amended changes. Like, look, you can see it right there in the reflog: the same commit message, before and after amend, with two different hashes, whoadamn! So Whatever my commit looked liked before I mistakenly amended is still out there somewhere in the void, and with reflog, I can get that hash! From here, getting back your lost work is simple: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout [lost-commit-hash]&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git reset --hard [lost-commit-hash]&lt;/code&gt;, what have you.&lt;/p&gt;

&lt;p&gt;But there’s one more nifty thing here: all the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD@{x}&lt;/code&gt; numbers in the reflog are shortcuts to those commits. Much the same way that you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD^^^&lt;/code&gt; to point to the commit three generations up from your current head, you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD@{3}&lt;/code&gt; to point to the commit &lt;em&gt;from three movements of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; ago&lt;/em&gt;. That makes “oh crap, I need  to get back to the last commit I was on before I did [stupid thing]” even easier–instead of having to go to the reflog and find the commit, you can just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout HEAD@{1}&lt;/code&gt; to get to whatever commit your head was previously on. (The commit your head is currently on, of course, being &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HEAD@{0}&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;So, there you go: a cool git thing I learned recently. Nothing earth-shattering, but hopefully a useful tip for someone out there. Happy gitting!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;For those of you who don’t know, this is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit --amend&lt;/code&gt;’s older and better-looking cousin: it’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit --amend&lt;/code&gt; except that it automatically reuses the commit message of the commit you’re amending, rather than prompting you for a new one. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Maia McCormick</name></author><category term="tech" /><category term="git" /><summary type="html">Raise your hand if you’ve ever git commit’d something you shouldn’t have. (It’s okay, this is a judgement-free space.)</summary></entry><entry><title type="html">28 Days Later: My First Four Weeks as a Junior Engineer at Spring</title><link href="https://code.maiamccormick.com/2015/06/11/28-days-later.html" rel="alternate" type="text/html" title="28 Days Later: My First Four Weeks as a Junior Engineer at Spring" /><published>2015-06-11T22:47:20-04:00</published><updated>2015-06-11T22:47:20-04:00</updated><id>https://code.maiamccormick.com/2015/06/11/28-days-later</id><content type="html" xml:base="https://code.maiamccormick.com/2015/06/11/28-days-later.html">&lt;p&gt;I came out of school with a BA in music, tripped and fell, and landed in the tech world. The folks at Spring took a chance on me as an extremely junior developer and offered me a job. I’ve been here now for a little more than two months, and I couldn’t be happier. Going into my first day at Spring (which also happened to be my first day as a software engineer, full stop), I was understandably pretty nervous. But I was also excited for what lay ahead, and Spring has done a fabulous job of easing me into my new life here. Here are some reflections on that first month (posted, er, somewhat belatedly), to give you an idea of what it’s like to be a new junior engineer at Spring.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img src=&quot;/images/28daysspring.jpg&quot; alt=&quot;I promise, working at Spring does NOT actually involve deadly virus-plagues!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(I promise, working at Spring does NOT actually involve deadly virus-plagues!)&lt;/p&gt;

&lt;h3 id=&quot;week-one&quot;&gt;Week One&lt;/h3&gt;
&lt;p&gt;My first week at Spring was also my first week as a professional software engineer, and it was, as you might expect, a rollercoaster. When I got to my desk that first day, I found a shiny new Macbook, an ergonomic keyboard and mouse, and a pile of Spring swag (t-shirts, sweatshirts, tote bag, etc.). There was an all-hands meeting that morning, and so the entire team gathered in the kitchen to check in, and I got to introduce myself to everyone. (Of course, I also had to answer the obligatory icebreaker question, which I won’t reveal in case you join Spring one day and have to answer it for yourself, but rest assured, it gave everyone something to remember me by!) Thinking back on it now, that first day was a blur of new people, computer set-up nonsense, and free snacks (snacks which continue to be an integral part of my Spring experience).&lt;/p&gt;

&lt;p&gt;Anyone who’s set up a dev environment recently knows it takes about 20 times longer than you think it should, no matter how good the onboarding guide is (and Spring’s is pretty comprehensive). My first two days were spent installing software, transferring over dotfiles, and getting our app to build on my machine. As far as I can tell, though, that’s pretty much par for the course; I daresay the whole process was much less painful than it could have been because of Spring’s excellent internal wiki and because the rest of the engineering team was so happy to help. With their support, I had everything up and running by midday on Wednesday, and could actually start looking through the code.&lt;/p&gt;

&lt;p&gt;I entered the codebase gradually, starting on the back-end and working on a smallish and fairly contained bug. Still, even a simple bugfix has a lot of moving parts: I had to understand how the database, the various parts of our backend, and the iOS code all fit together. Sadly, Go doesn’t have a debugger, so my usual Python-oriented strategy—sticking break points around the code and stepping through until I know what’s going on—was useless here. The next best thing was to scatter approximately a million print statements throughout the code, and, of course, to talk to my teammates. From giving me an impromptu high-level whiteboard overview of our system (thanks Vadim!) to answering my finicky detail questions on Slack, everyone on the engineering team seemed happy to help me out.&lt;/p&gt;

&lt;p&gt;My brain was working overtime that first week as it processed new people, a new system, a new programming language, and a new way of doing things. But the good thing about starting from the bottom of the learning curve is that you’re learning &lt;em&gt;so much&lt;/em&gt; all the time. What’s more, my new coworkers were super friendly and welcoming; they all went out of their way to say hi, and socializing was a welcome break from mile-a-minute code learning. As if I needed more proof that Spring knows how to have fun, my third day on the job was the anniversary of Spring’s incorporation, and everyone left work early for BBQ and shuffleboard in Brooklyn. Although a lot was thrown at me that first week, I was meeting cool new people and learning cool new things, and by the time Friday rolled around I was exhausted, but also really excited about my new job.&lt;/p&gt;

&lt;h3 id=&quot;week-two&quot;&gt;Week Two&lt;/h3&gt;
&lt;p&gt;My second week was truncated because I was out sick, but I kept up my momentum from week one by fixing small bugs, poking around more the code base, and asking lots of questions—and by the end of the week, I could see definite improvements! I pushed some code and submitted some more for review, and felt myself settling in to Go. Before starting at Spring, I had only ever worked in Python, so this job has been both my first time using Go and my first time learning a new language&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. I had already worked through most of the &lt;a href=&quot;//tour.golang.org/&quot;&gt;Tour of Go&lt;/a&gt;, but sitting down to read and write real code did wonders for my comprehension. Even though I was (and still am) scratching my head at times, by the end of the second week I could wrap my head around the syntax. I didn’t really &lt;em&gt;know&lt;/em&gt; Go, but I could fake it pretty well.&lt;/p&gt;

&lt;p&gt;(The other exciting thing this week was that I was no longer the newest engineer at Spring. Alan Wang, another &lt;a href=&quot;//www.recurse.com/&quot;&gt;Recurse Center&lt;/a&gt;&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; alum, came on board as a software engineer. Seeing the environment setup process give someone else grief was strangely comforting!)&lt;/p&gt;

&lt;h3 id=&quot;week-three&quot;&gt;Week Three&lt;/h3&gt;
&lt;p&gt;During my third week, things started to move a little faster and get a little easier. My projects were still small in scope, but less self-contained, and I could get my hands dirty in sections of the codebase with more moving parts.&lt;/p&gt;

&lt;p&gt;I also found myself expanding my mental model of the app, filling in some of the blanks in the whiteboard diagram that Vadim drew for me my first week. Granted, there were still a lot of blanks left, but I was getting a better sense of how things fit together. I was still asking loads of questions, but I also had more resources in my toolbox to answer them for myself before pinging someone on my team. I was also starting to feel the groove of Spring office life, and trying to build good habits for myself, such as: drinking lots of water; using &lt;a href=&quot;//www.dejal.com/timeout/&quot;&gt;Time Out&lt;/a&gt; to give myself regular breaks; going outside on days when lunch was delivered to the office, significantly reducing the need to leave the building; and running up and down the stairs a few times to get my blood pumping. (Because if your blood isn’t pumping, you can’t code very effectively. Or do much at all, really. Try to avoid this.)&lt;/p&gt;

&lt;h3 id=&quot;week-four-and-beyond&quot;&gt;Week Four and Beyond&lt;/h3&gt;
&lt;p&gt;My fourth week at Spring had me writing my first test, embarking on my first actual project, and generally feeling like I sort of knew what was going on. Since then, I’ve been working on an integration with a new ecommerce API, and while I can still get help when I need it, I’ve gotten to take ownership of this project from the beginning. And that’s pretty excellent! I’m also finding that I know enough raw basics of Go to start picking up some stylistic things and code conventions.&lt;/p&gt;

&lt;h3 id=&quot;some-final-summary-type-thoughts&quot;&gt;Some Final Summary-Type Thoughts&lt;/h3&gt;
&lt;p&gt;During my first month at Spring, I felt in over my head and bewildered most of the time—but that’s okay, especially considering this is my first job as an engineer. Learning a lot of new things—code, tools, procedures, the names of other humans—is always going to be a bit overwhelming, but any company worth their salt (of which Spring is certainly one) will go out of their way to ease you into your new engineering life. In fact, I daresay that any new engineer who &lt;em&gt;doesn’t&lt;/em&gt; feel a little overwhelmed first is probably being unreasonably coddled, or else no trying very hard.&lt;/p&gt;

&lt;p&gt;To me, the two most useful things in my onboarding process were: a) the gradual ramping up of assignments; and b) Spring’s culture of question-asking and teammates who are excited to help. My tasks gradually increased in complexity and scope, allowing me to get familiar with the codebase incrementally and not overwhelm myself trying to jam it all into my brain at once. It was especially helpful to have a designated point person that I could go to even if my questions seemed embarrassingly trivial. Solid onboarding documentation, especially for dev environment setup, was also key! (Though not even the most comprehensive wiki pages can eliminate the pain of setting up a dev environment—they only make it slightly more tolerable.)&lt;/p&gt;

&lt;p&gt;I’m still getting the hang of life at Spring, and very much still in the midst of my onboarding process. I certainly don’t know the whole system, and I’m sure I’ll be asking questions in a month or two (or five). But I’m okay with that. Spring has brought me on gently enough that I can really put to use what I &lt;em&gt;do&lt;/em&gt; know, and I feel comfortable going to my team with questions about things I don’t yet understand. Thanks to Spring, my first engineering job has been pretty great so far, and I can’t wait to see how it develops!&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Go is the first language I’ve learned since I got serious about programming (which I did by way of Python). I don’t really count picking up Python as “learning a language,” since I was learning how to code in general. Now, though, I know how to code, and I need to fit my pre-existing knowledge into Go’s framework, which requires an entirely different set of mental acrobatics. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Formerly Hacker School &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Maia McCormick</name></author><category term="spring" /><summary type="html">I came out of school with a BA in music, tripped and fell, and landed in the tech world. The folks at Spring took a chance on me as an extremely junior developer and offered me a job. I’ve been here now for a little more than two months, and I couldn’t be happier. Going into my first day at Spring (which also happened to be my first day as a software engineer, full stop), I was understandably pretty nervous. But I was also excited for what lay ahead, and Spring has done a fabulous job of easing me into my new life here. Here are some reflections on that first month (posted, er, somewhat belatedly), to give you an idea of what it’s like to be a new junior engineer at Spring.</summary></entry><entry><title type="html">Truthiness</title><link href="https://code.maiamccormick.com/2015/04/16/truthiness.html" rel="alternate" type="text/html" title="Truthiness" /><published>2015-04-16T21:13:19-04:00</published><updated>2015-04-16T21:13:19-04:00</updated><id>https://code.maiamccormick.com/2015/04/16/truthiness</id><content type="html" xml:base="https://code.maiamccormick.com/2015/04/16/truthiness.html">&lt;p&gt;Truthiness in Python is occasionally confusing. Obviously, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False&lt;/code&gt; is false and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt; is true, but beyond that, what then?&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;None&lt;/code&gt; is always false–though this doesn’t mean that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False == None&lt;/code&gt;, which is a mistake I made early in my Python career. I was confused by how a nonexistant list and an empty list were both falsey, and somewhere in my mind I thought that they were both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;None&lt;/code&gt; as well. Not so much.&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A stylistic note here: since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;None&lt;/code&gt; is a singleton (i.e. there exists only one instance of it), the proper syntax is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo is None&lt;/code&gt;, rather than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;foo == None&lt;/code&gt;. But I digress.&lt;/p&gt;

&lt;p&gt;The empty values of data structures are always falsey. Hence:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({})&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And perhaps most confusingly:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;31.4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I mean, this makes sense because we know that 0 is false and 1 is true… but if you think about it, this also means that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; is the empty value of an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt; (which means that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; is false, but every other value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float&lt;/code&gt; is true) This doesn’t mean much in Python, of course, but I’ve been playing with Go lately, in which you have to initialize your variables before you can do anything with them, and suddenly the idea of an empty value makes a lot more sense (and the empty value for an int is indeed zero).&lt;/p&gt;

&lt;p&gt;Conversely, every non-zero value of a data structure is true. That means that a string with stuff in it, a dict. with stuff in it, a list with stuff in it, etc. is true no matter what the stuff is. And so:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Proving conclusively, as we all knew, that &lt;em&gt;hips don’t lie&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;//instantrimshot.com/index.php?sound=rimshot&amp;amp;play=true&quot;&gt;Ba-bm-psh&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;Extra credit: do you know what &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[&quot;hip&quot;, &quot;hip&quot;]&lt;/code&gt; is?&lt;/p&gt;

&lt;p&gt;…(wait for it)…&lt;/p&gt;

&lt;p&gt;It’s a &lt;em&gt;hip hip array&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;(&lt;a href=&quot;//wompwompwomp.com/&quot;&gt;Womp womp&lt;/a&gt;.)&lt;/p&gt;</content><author><name>Maia McCormick</name></author><category term="tech" /><category term="python" /><category term="humor" /><summary type="html">Truthiness in Python is occasionally confusing. Obviously, False is false and True is true, but beyond that, what then?</summary></entry><entry><title type="html">OPW Retrospective</title><link href="https://code.maiamccormick.com/2015/03/09/opw-retrospective.html" rel="alternate" type="text/html" title="OPW Retrospective" /><published>2015-03-09T16:48:33-04:00</published><updated>2015-03-09T16:48:33-04:00</updated><id>https://code.maiamccormick.com/2015/03/09/opw-retrospective</id><content type="html" xml:base="https://code.maiamccormick.com/2015/03/09/opw-retrospective.html">&lt;p&gt;Three months later, I’m done with my OPW internship with GNOME Music.&lt;/p&gt;

&lt;p&gt;I’ve learned that open-source contributing isn’t as scary and impossible as it once seemed, and that IRC is full of nice people who are happy to help! But I’ve also learned that diving into a new codebase is challenging, at best, and nearly impossible at worst. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pdb&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for x in dir(foo): print(x)&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;traceback.print_stack()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inspect.getargspec(myfunc)&lt;/code&gt; have become good friends of mine in the past three months. Good documentation, it turns out, is essential—the project I was working on had very little, and the libraries it utilized (at least, the Python wrappers for those libraries) were similarly sketchily documented, and all this made learning the code waaaaay tougher than it needed to be.&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;I’ve learned how much I benefit from writing things down. I took notes when I was &lt;a href=&quot;//www.youtube.com/watch?v=r7N7s1yejFQ&amp;amp;list=PLea0WJq13cnA6k4B6Tr1ljj2nleUl9dZt&quot;&gt;learning SPARQL&lt;/a&gt;, and color-coded my questions so I could come back to them later. I kept track of all the weird dependency problems I ran into during my build—which turned out to be way more useful than I’d even imagined when I ended up having to JHBuild my program all over again on a different machine. I made a to-do list at the beginning of every work day, with a macro-goal or two and manageable sub-steps that I could check off as I did them, to keep myself on-task and non-overwhelmed. I kept a list of bugs as I ran into them so I didn’t get side-tracked—I could finish the task at hand, then go back and report all the intervening bugs at once. Similarly, I tried my best to jot down any real-world distractions—like that email I needed to send, that form I needed to mail…—so that they were out of my head and on paper, and I could come back to them whenever I was done with work.&lt;/p&gt;

&lt;p&gt;I’ve learned how important task-setting and accountability is to me. If I don’t know &lt;em&gt;what&lt;/em&gt; task I’m doing at any given time, I have the potential to just mess around in the source code for a good few hours without really getting anything done. Having “Bug X: Put Y in the Z” written at the top of my notebook, or telling my mentor Vadim, “Okay, I’m gonna work on foo today,” clarified my purpose and kept me from trying to do 5 things at once, or from doing nothing at all.&lt;/p&gt;

&lt;p&gt;I’ve learned that working from home is &lt;em&gt;hard&lt;/em&gt;! I need to be pretty firm with myself to get out of bed in the morning, shower, eat a good breakfast, and sit down to work, instead of lazing around in bed with a book for ages and messing around on Facebook. But for the most part, I managed to stick to the &lt;a href=&quot;/blog/2014/12/29/rules-for-opw/&quot;&gt;rules I laid out for myself&lt;/a&gt; at the beginning of all of this, to great positive effect. (Having codified rules definitely helps!) (Disabling Facebook on my work machine, and &lt;a href=&quot;/blog/2015/02/25/the-best-thing-ive-done-for-my-productivity-lately/&quot;&gt;disabling my Facebook newsfeed&lt;/a&gt; on my personal machine, have both been very good choices as far as my productivity goes.) Having a space that is my &lt;em&gt;work space&lt;/em&gt; (my desk, with an external monitor) helps a lot—if I find myself distracted, I get up, wander away, and take a break, and come back when I can actually think straight.&lt;/p&gt;

&lt;p&gt;I’ve learned that the toughest part of any project tends to come right at the very beginning: the system set-up is always &lt;a href=&quot;/blog/2014/10/22/reflections-on-my-first-open-source-contribution/&quot;&gt;stupidly, grossly difficult&lt;/a&gt;, and learning a new codebase (as I mentioned above) is &lt;em&gt;hard&lt;/em&gt;! For the first month, &lt;a href=&quot;/blog/2015/01/10/opw-1-month-in/&quot;&gt;I felt like I’d hardly accomplished anything&lt;/a&gt;—I could barely write patches because I was still trying to figure out how everything worked.&lt;/p&gt;

&lt;p&gt;And of course, I learned a bunch of concrete skills. I know a fair bit (though by no means everything) about how &lt;a href=&quot;//git.gnome.org/gnome-music&quot;&gt;GNOME Music&lt;/a&gt; works, I know about Tracker and &lt;a href=&quot;//code.maiamccormick.com/blog/2015/03/04/the-joys-of-sparql/&quot;&gt;SPARQL&lt;/a&gt;, I know a little something now about open-source workflow, bug reporting, and bugzilla, and I’ve acquired some new git-fu by necessity (since I’m working on a multi-contributor project, need to make my commits as self-contained as possible, etc.). I’m so grateful to the GNOME Foundation and to OPW for this fabulous opportunity, and to &lt;a href=&quot;//wiki.gnome.org/VadimRutkovsky&quot;&gt;Vadim Rutkovsky&lt;/a&gt; for being the most friendly, helpful, and laid-back mentor I could have hoped for!&lt;/p&gt;

&lt;p&gt;What’s next? At the end of the month, I’ll be starting as a software engineer at &lt;a href=&quot;//www.shopspring.com/&quot;&gt;Spring&lt;/a&gt;, a mobile shopping app startup based in NYC. I’m beyond psyched to join their team, and to put to use all of the skills I’ve gotten from OPW. And I’ll certainly stick around GNOME Music/GNOME/the open-source community—you’ll probably see me poking my head into various IRC channels from time to time (nick = &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maiamcc&lt;/code&gt;). If anyone wants to talk about GNOME Music, or OPW, or SPARQL, or anything, really: come say hi!&lt;/p&gt;</content><author><name>Maia McCormick</name></author><category term="opw" /><summary type="html">Three months later, I’m done with my OPW internship with GNOME Music.</summary></entry></feed>